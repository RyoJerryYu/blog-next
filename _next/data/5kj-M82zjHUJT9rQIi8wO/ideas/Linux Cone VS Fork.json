{"pageProps":{"slug":"Linux Cone VS Fork","tags":[],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"meta":{"content":"","title":"Linux Cone VS Fork","abstract":"","length":1,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":[],"license":false},"prevNextInfo":{"prevInfo":{"pathMapping":{"filePath":"public/content/ideas/Linux 调度 —— 进程与线程.md","pagePath":"/ideas/Linux 调度 —— 进程与线程","slug":"Linux 调度 —— 进程与线程"},"meta":{"content":"\n#Linux #schedule #BasicKnowledge \n\n## 进程\n\n**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n\n切换需要切换上下文\n\n- 需要切换内存映射表(MMU)\n- 进程栈大小随机，但比线程栈大\n\n\n\n\n## 线程\n\n**线程**是计算机**调度**最小的单位，也是程序执行的最小单位。\n\n线程的内存描述符直接指向父进程的描述符。线程间切换代价比较小，**不需要切换映射表**（MMU），**只是指令间的切换**即可，比较轻量级。线程的栈在主进程的堆中。\n\n- 只需切换各种寄存器\n- 线程共享地址空间\n- 线程栈固定大小，默认 8M ，默认值由操作系统确定， `ulimit -a` 查看， `ulimit -s` 修改\n\n同一进程内的线程间共享：\n- \n\n## 细节\n\n关于 MMU ： [[Linux 内存 —— 内存分页、分段]]\n\n\n内存管理是以进程为单元，线程的栈在主进程的堆中。[[Linux 内存 —— 堆和栈]]\n\n## 上下文切换开销\n\n- 寄存器状态保存、恢复\n- 缓存失效\n- 陷入内核态开销","title":"Linux 调度 —— 进程与线程","abstract":"**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n切换需要切换上下文\n- 需要切换内存映射表(MMU)","length":40,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","schedule","BasicKnowledge"],"license":false}},"nextInfo":{"pathMapping":{"filePath":"public/content/ideas/Linux Systemd.md","pagePath":"/ideas/Linux Systemd","slug":"Linux Systemd"},"meta":{"content":"\n#Linux #systemctl #journalctl #timedatectl #BasicKnowledge #Operation \n\n每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\n\nSystemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\n\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。\n\n```\n$ sudo systemctl enable clamd@scan.service\n# 等同于\n$ sudo ln -s '/usr/lib/systemd/system/clamd@scan.service' '/etc/systemd/system/multi-user.target.wants/clamd@scan.service'\n```\n如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。\n\n与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。\n\n```\n$ sudo systemctl disable clamd@scan.service\n```\n配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。\n\n\n### 简单例子\n\n```\n[Unit]\nDescription=Ethereum go client\nAfter=syslog.target network.target\n\n[Service]\nType=simple\nWorkingDirectory=/home/ec2-user\nExecStart=/home/ec2-user/bin/geth --http --http.addr 0.0.0.0 --http.vhosts '*' --ws --ws.addr 0.0.0.0 --ws.origins '*' --rinkeby\nUser=ec2-user\nGroup=ec2-user\nKillMode=process\nKillSignal=SIGTERM\nRestart=on-failure\n\n[Install]\nWantedBy=default.target\n```\n\n# timedatectl \n\n时间管理\n\n设置时区\n```shell\nsudo timedatectl set-timezone zone\n```\n\n查看\n```shell\ntimedatectl status\n```\n\n# 日志\n\njournalctl\n\n查看所有日志: 不加任何参数\n```\njournalctl\n```\n\n按单位\n```\njournalctl -u geth\n```\n\n\n参考：\n- https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html","title":"Linux Systemd","abstract":"每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\nSystemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。","length":76,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","systemctl","journalctl","timedatectl","BasicKnowledge","Operation"],"license":false}}}},"__N_SSG":true}