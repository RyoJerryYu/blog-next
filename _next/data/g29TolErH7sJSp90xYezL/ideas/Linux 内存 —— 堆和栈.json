{"pageProps":{"slug":"Linux 内存 —— 堆和栈","tags":[{"tag":"Linux","slug":"linux","path":"/tags/linux","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"memory","slug":"memory","path":"/tags/memory","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"}]},{"tag":"BasicKnowledge","slug":"basicknowledge","path":"/tags/basicknowledge","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ObsidianTag} = _components;\n  if (!ObsidianTag) _missingMdxReference(\"ObsidianTag\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(ObsidianTag, {\n        tag: \"Linux\",\n        slug: \"linux\",\n        path: \"/tags/linux\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"memory\",\n        slug: \"memory\",\n        path: \"/tags/memory\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"BasicKnowledge\",\n        slug: \"basicknowledge\",\n        path: \"/tags/basicknowledge\"\n      })]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"堆区与栈区都是程序内存分段中的一段。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/ideas/Linux%20%E5%86%85%E5%AD%98%20%E2%80%94%E2%80%94%20%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E3%80%81%E5%88%86%E6%AE%B5\",\n        children: \"Linux 内存 —— 内存分页、分段\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"栈\",\n      children: _jsx(_components.a, {\n        href: \"#栈\",\n        children: \"栈\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"是逻辑栈，连续\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"有大小限制， Windows 下为 2M\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"入栈出栈为 CPU 指令，申请、读取快\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"储存内容\",\n      children: _jsx(_components.a, {\n        href: \"#储存内容\",\n        children: \"储存内容\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"下条指令地址（ pop 后运行那条指令）\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"函数参数\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"函数局部变量\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"堆\",\n      children: _jsx(_components.a, {\n        href: \"#堆\",\n        children: \"堆\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"逻辑上是链表，不连续\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"基本无大小限制\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"申请慢，容易产生内存碎片\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"储存内容-1\",\n      children: _jsx(_components.a, {\n        href: \"#储存内容-1\",\n        children: \"储存内容\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"堆的大小\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"堆变量\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"meta":{"content":"\n#Linux #memory #BasicKnowledge \n\n> 堆区与栈区都是程序内存分段中的一段。\n\n[[Linux 内存 —— 内存分页、分段]]\n\n## 栈\n\n- 是逻辑栈，连续\n- 有大小限制， Windows 下为 2M\n- 入栈出栈为 CPU 指令，申请、读取快\n\n### 储存内容\n\n- 下条指令地址（ pop 后运行那条指令）\n- 函数参数\n- 函数局部变量\n\n## 堆\n\n- 逻辑上是链表，不连续\n- 基本无大小限制\n- 申请慢，容易产生内存碎片\n\n### 储存内容\n\n- 堆的大小\n- 堆变量","title":"Linux 内存 —— 堆和栈","abstract":"> 堆区与栈区都是程序内存分段中的一段。\n[[Linux 内存 —— 内存分页、分段]]\n- 是逻辑栈，连续","length":29,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","memory","BasicKnowledge"],"license":false,"headingTrees":[{"key":"栈","href":"#栈","heading":2,"title":"栈","children":[{"key":"储存内容","href":"#储存内容","heading":3,"title":"储存内容","children":[],"id":"储存内容"}],"id":"栈"},{"key":"堆","href":"#堆","heading":2,"title":"堆","children":[{"key":"储存内容-1","href":"#储存内容-1","heading":3,"title":"储存内容","children":[],"id":"储存内容-1"}],"id":"堆"}],"wikiRefAliases":["Linux 内存 —— 内存分页、分段"],"richRefAliases":[]},"prevNextInfo":{"prevInfo":{"pathMapping":{"pagePath":"/ideas/Linux 内存 —— 内存分页、分段","filePath":"public/content/ideas/Linux 内存 —— 内存分页、分段.md"},"meta":{"title":"Linux 内存 —— 内存分页、分段","created_at":"2024-11-16T07:32:08.000Z","updated_at":null}},"nextInfo":{"pathMapping":{"pagePath":"/ideas/Linux 内存 —— 虚拟内存","filePath":"public/content/ideas/Linux 内存 —— 虚拟内存.md"},"meta":{"title":"Linux 内存 —— 虚拟内存","created_at":"2024-11-16T07:32:08.000Z","updated_at":null}}},"backRefResources":[{"pathMapping":{"filePath":"public/content/ideas/Linux 内存 —— 虚拟内存.md","pagePath":"/ideas/Linux 内存 —— 虚拟内存","slug":"Linux 内存 —— 虚拟内存"},"meta":{"content":"\n#Linux #memory #Operation #BasicKnowledge \n\n> 每个**进程**分配一套**虚拟内存**地址，由操作系统管理，**进程间独立**互不干涉。\n> 程序访问虚拟地址时，由操作系统转换成物理地址，使得这样不同进程内存不会冲突。\n\n [kernel_memory_management/✍ 文章/一文带你了解，虚拟内存、内存分页、分段、段页式内存管理.md at main · 0voice/kernel_memory_management](https://github.com/0voice/kernel_memory_management/blob/main/%E2%9C%8D%20%E6%96%87%E7%AB%A0/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%EF%BC%8C%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E3%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E3%80%81%E5%88%86%E6%AE%B5%E3%80%81%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.md) \n \nCPU是直接操作内存的物理地址。\n\n两个线程占用内存空间不能重叠，否则会相互擦除。如果直接使用物理内存，需要各线程都要理解其他所有线程占用住的空间，违反隔离原理。因此需要一种隔离内存的机制。\n\n这个机制就是虚拟内存。\n\n> [!important]\n> 每个**进程**分配一套**虚拟内存**地址，由操作系统管理，**进程间独立**互不干涉。\n\n- 程序所使用的内存地址叫做**虚拟内存地址**（_Virtual Memory Address_）\n- 实际存在硬件内存里面的空间地址叫**物理内存地址**（_Physical Memory Address_）\n\n程序访问虚拟地址时，由操作系统转换成物理地址，使得这样不同进程内存不会冲突。\n\n操作系统引入了虚拟内存，进程持有的虚拟地址会通过 CPU 芯片中的内存管理单元（MMU）的映射关系，来转换变成物理地址，然后再通过物理地址访问内存\n\n操作系统通过**内存分页**和**内存分段**等机制来管理虚拟内存与物理内存的映射。\n\n深入：[[Linux 内存 —— 内存分页、分段]]\n\n\n\n## Extra\n\n内存管理是以进程为单元，线程的栈在主进程的堆中。[[Linux 内存 —— 堆和栈]]","title":"Linux 内存 —— 虚拟内存","abstract":"> 每个**进程**分配一套**虚拟内存**地址，由操作系统管理，**进程间独立**互不干涉。\n> 程序访问虚拟地址时，由操作系统转换成物理地址，使得这样不同进程内存不会冲突。\n [kernel_memory_management/✍ 文章/一文带你了解，虚拟内存、内存分页、分段、段页式内存管理.md at main · 0voice/kernel_memory_management](https://github.com/0voice/kernel_memory_management/blob/main/%E2%9C%8D%20%E6%96%87%E7%AB%A0/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%EF%BC%8C%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E3%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E3%80%81%E5%88%86%E6%AE%B5%E3%80%81%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.md) ","length":33,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","memory","Operation","BasicKnowledge"],"license":false,"headingTrees":[{"key":"extra","href":"#extra","heading":2,"title":"Extra","children":[],"id":"extra"}],"wikiRefAliases":["Linux 内存 —— 内存分页、分段","Linux 内存 —— 堆和栈"],"richRefAliases":[]}},{"pathMapping":{"filePath":"public/content/ideas/Linux 调度 —— 进程与线程.md","pagePath":"/ideas/Linux 调度 —— 进程与线程","slug":"Linux 调度 —— 进程与线程"},"meta":{"content":"\n#Linux #schedule #BasicKnowledge \n\n## 进程\n\n**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n\n切换需要切换上下文\n\n- 需要切换内存映射表(MMU)\n- 进程栈大小随机，但比线程栈大\n\n\n\n\n## 线程\n\n**线程**是计算机**调度**最小的单位，也是程序执行的最小单位。\n\n线程的内存描述符直接指向父进程的描述符。线程间切换代价比较小，**不需要切换映射表**（MMU），**只是指令间的切换**即可，比较轻量级。线程的栈在主进程的堆中。\n\n- 只需切换各种寄存器\n- 线程共享地址空间\n- 线程栈固定大小，默认 8M ，默认值由操作系统确定， `ulimit -a` 查看， `ulimit -s` 修改\n\n同一进程内的线程间共享：\n- \n\n## 细节\n\n关于 MMU ： [[Linux 内存 —— 内存分页、分段]]\n\n\n内存管理是以进程为单元，线程的栈在主进程的堆中。[[Linux 内存 —— 堆和栈]]\n\n## 上下文切换开销\n\n- 寄存器状态保存、恢复\n- 缓存失效\n- 陷入内核态开销","title":"Linux 调度 —— 进程与线程","abstract":"**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n切换需要切换上下文\n- 需要切换内存映射表(MMU)","length":40,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","schedule","BasicKnowledge"],"license":false,"headingTrees":[{"key":"进程","href":"#进程","heading":2,"title":"进程","children":[],"id":"进程"},{"key":"线程","href":"#线程","heading":2,"title":"线程","children":[],"id":"线程"},{"key":"同一进程内的线程间共享","href":"#同一进程内的线程间共享","heading":2,"title":"同一进程内的线程间共享：","children":[],"id":"同一进程内的线程间共享"},{"key":"细节","href":"#细节","heading":2,"title":"细节","children":[],"id":"细节"},{"key":"上下文切换开销","href":"#上下文切换开销","heading":2,"title":"上下文切换开销","children":[],"id":"上下文切换开销"}],"wikiRefAliases":["Linux 内存 —— 内存分页、分段","Linux 内存 —— 堆和栈"],"richRefAliases":[]}}]},"__N_SSG":true}