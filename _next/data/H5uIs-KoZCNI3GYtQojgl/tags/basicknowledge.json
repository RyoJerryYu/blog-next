{"pageProps":{"allTagInfos":[{"tag":"杂技","slug":"杂技","path":"/tags/杂技","postSlugs":[{"postType":"article","postSlug":"Building-this-blog","postPagePath":"/articles/Building-this-blog"},{"postType":"article","postSlug":"hello-world","postPagePath":"/articles/hello-world"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"}]},{"tag":"Blog","slug":"blog","path":"/tags/blog","postSlugs":[{"postType":"article","postSlug":"Building-this-blog","postPagePath":"/articles/Building-this-blog"},{"postType":"article","postSlug":"init-a-new-hexo-project","postPagePath":"/articles/init-a-new-hexo-project"},{"postType":"article","postSlug":"create-blog-cicd-by-github","postPagePath":"/articles/create-blog-cicd-by-github"},{"postType":"article","postSlug":"use-paste-image-and-vscode-memo","postPagePath":"/articles/use-paste-image-and-vscode-memo"},{"postType":"idea","postSlug":"blog-in-next","postPagePath":"/ideas/blog-in-next"},{"postType":"idea","postSlug":"blog-syntax","postPagePath":"/ideas/blog-syntax"}]},{"tag":"杂谈","slug":"杂谈","path":"/tags/杂谈","postSlugs":[{"postType":"article","postSlug":"hello-world","postPagePath":"/articles/hello-world"},{"postType":"article","postSlug":"try-cursor-and-thinking","postPagePath":"/articles/try-cursor-and-thinking"}]},{"tag":"C++","slug":"c++","path":"/tags/c++","postSlugs":[{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"}]},{"tag":"Python","slug":"python","path":"/tags/python","postSlugs":[{"postType":"article","postSlug":"python-dict","postPagePath":"/articles/python-dict"}]},{"tag":"数据结构","slug":"数据结构","path":"/tags/数据结构","postSlugs":[{"postType":"article","postSlug":"python-dict","postPagePath":"/articles/python-dict"},{"postType":"article","postSlug":"Sort-algorithm","postPagePath":"/articles/Sort-algorithm"},{"postType":"article","postSlug":"Handy-heap-cheat-sheet","postPagePath":"/articles/Handy-heap-cheat-sheet"}]},{"tag":"算法","slug":"算法","path":"/tags/算法","postSlugs":[{"postType":"article","postSlug":"Sort-algorithm","postPagePath":"/articles/Sort-algorithm"},{"postType":"article","postSlug":"Handy-heap-cheat-sheet","postPagePath":"/articles/Handy-heap-cheat-sheet"}]},{"tag":"排序","slug":"排序","path":"/tags/排序","postSlugs":[{"postType":"article","postSlug":"Sort-algorithm","postPagePath":"/articles/Sort-algorithm"}]},{"tag":"算法竞赛","slug":"算法竞赛","path":"/tags/算法竞赛","postSlugs":[{"postType":"article","postSlug":"Handy-heap-cheat-sheet","postPagePath":"/articles/Handy-heap-cheat-sheet"}]},{"tag":"设计模式","slug":"设计模式","path":"/tags/设计模式","postSlugs":[{"postType":"article","postSlug":"The-beauty-of-design-parten","postPagePath":"/articles/The-beauty-of-design-parten"}]},{"tag":"笔记","slug":"笔记","path":"/tags/笔记","postSlugs":[{"postType":"article","postSlug":"The-beauty-of-design-parten","postPagePath":"/articles/The-beauty-of-design-parten"}]},{"tag":"GitHub","slug":"github","path":"/tags/github","postSlugs":[{"postType":"article","postSlug":"create-blog-cicd-by-github","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"AWS","slug":"aws","path":"/tags/aws","postSlugs":[{"postType":"article","postSlug":"create-blog-cicd-by-github","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"CI/CD","slug":"ci-cd","path":"/tags/ci-cd","postSlugs":[{"postType":"article","postSlug":"create-blog-cicd-by-github","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"IaC","slug":"iac","path":"/tags/iac","postSlugs":[{"postType":"article","postSlug":"create-blog-cicd-by-github","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"DevOps","slug":"devops","path":"/tags/devops","postSlugs":[{"postType":"article","postSlug":"create-blog-cicd-by-github","postPagePath":"/articles/create-blog-cicd-by-github"},{"postType":"article","postSlug":"introduction-for-k8s","postPagePath":"/articles/introduction-for-k8s"},{"postType":"article","postSlug":"introduction-for-k8s-2","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"idea","postSlug":"newest","postPagePath":"/ideas/newest"}]},{"tag":"VSCode","slug":"vscode","path":"/tags/vscode","postSlugs":[{"postType":"article","postSlug":"use-paste-image-and-vscode-memo","postPagePath":"/articles/use-paste-image-and-vscode-memo"}]},{"tag":"Hexo","slug":"hexo","path":"/tags/hexo","postSlugs":[{"postType":"article","postSlug":"use-paste-image-and-vscode-memo","postPagePath":"/articles/use-paste-image-and-vscode-memo"}]},{"tag":"JavaScript","slug":"javascript","path":"/tags/javascript","postSlugs":[{"postType":"article","postSlug":"use-paste-image-and-vscode-memo","postPagePath":"/articles/use-paste-image-and-vscode-memo"}]},{"tag":"Kubernetes","slug":"kubernetes","path":"/tags/kubernetes","postSlugs":[{"postType":"article","postSlug":"introduction-for-k8s","postPagePath":"/articles/introduction-for-k8s"},{"postType":"article","postSlug":"introduction-for-k8s-2","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"idea","postSlug":"newest","postPagePath":"/ideas/newest"}]},{"tag":"Docker","slug":"docker","path":"/tags/docker","postSlugs":[{"postType":"article","postSlug":"introduction-for-k8s","postPagePath":"/articles/introduction-for-k8s"},{"postType":"article","postSlug":"introduction-for-k8s-2","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"idea","postSlug":"newest","postPagePath":"/ideas/newest"}]},{"tag":"Cloud Native","slug":"cloud-native","path":"/tags/cloud-native","postSlugs":[{"postType":"article","postSlug":"introduction-for-k8s","postPagePath":"/articles/introduction-for-k8s"},{"postType":"article","postSlug":"introduction-for-k8s-2","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"idea","postSlug":"newest","postPagePath":"/ideas/newest"}]},{"tag":"Cursor","slug":"cursor","path":"/tags/cursor","postSlugs":[{"postType":"article","postSlug":"try-cursor-and-thinking","postPagePath":"/articles/try-cursor-and-thinking"}]},{"tag":"Nextjs","slug":"nextjs","path":"/tags/nextjs","postSlugs":[{"postType":"idea","postSlug":"blog-in-next","postPagePath":"/ideas/blog-in-next"},{"postType":"idea","postSlug":"blog-syntax","postPagePath":"/ideas/blog-syntax"}]},{"tag":"Linux","slug":"linux","path":"/tags/linux","postSlugs":[{"postType":"idea","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"},{"postType":"idea","postSlug":"Linux 信号处理 —— Signal","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"idea","postSlug":"Linux 内存 —— 内存分页、分段","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"idea","postSlug":"Linux 内存 —— 堆和栈","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"idea","postSlug":"Linux 内存 —— 虚拟内存","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"idea","postSlug":"Linux 调度 —— 进程与线程","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"systemctl","slug":"systemctl","path":"/tags/systemctl","postSlugs":[{"postType":"idea","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"journalctl","slug":"journalctl","path":"/tags/journalctl","postSlugs":[{"postType":"idea","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"timedatectl","slug":"timedatectl","path":"/tags/timedatectl","postSlugs":[{"postType":"idea","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"BasicKnowledge","slug":"basicknowledge","path":"/tags/basicknowledge","postSlugs":[{"postType":"idea","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"},{"postType":"idea","postSlug":"Linux 信号处理 —— Signal","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"idea","postSlug":"Linux 内存 —— 内存分页、分段","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"idea","postSlug":"Linux 内存 —— 堆和栈","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"idea","postSlug":"Linux 内存 —— 虚拟内存","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"idea","postSlug":"Linux 调度 —— 进程与线程","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"Operation","slug":"operation","path":"/tags/operation","postSlugs":[{"postType":"idea","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"},{"postType":"idea","postSlug":"Linux 信号处理 —— Signal","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"idea","postSlug":"Linux 内存 —— 内存分页、分段","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"idea","postSlug":"Linux 内存 —— 虚拟内存","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"}]},{"tag":"Signal","slug":"signal","path":"/tags/signal","postSlugs":[{"postType":"idea","postSlug":"Linux 信号处理 —— Signal","postPagePath":"/ideas/Linux 信号处理 —— Signal"}]},{"tag":"memory","slug":"memory","path":"/tags/memory","postSlugs":[{"postType":"idea","postSlug":"Linux 内存 —— 内存分页、分段","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"idea","postSlug":"Linux 内存 —— 堆和栈","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"idea","postSlug":"Linux 内存 —— 虚拟内存","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"}]},{"tag":"schedule","slug":"schedule","path":"/tags/schedule","postSlugs":[{"postType":"idea","postSlug":"Linux 调度 —— 进程与线程","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"Cloud Computing","slug":"cloud-computing","path":"/tags/cloud-computing","postSlugs":[{"postType":"idea","postSlug":"newest","postPagePath":"/ideas/newest"}]}],"selectedTagInfo":{"tag":"BasicKnowledge","slug":"basicknowledge","path":"/tags/basicknowledge","postSlugs":[{"postType":"idea","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"},{"postType":"idea","postSlug":"Linux 信号处理 —— Signal","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"idea","postSlug":"Linux 内存 —— 内存分页、分段","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"idea","postSlug":"Linux 内存 —— 堆和栈","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"idea","postSlug":"Linux 内存 —— 虚拟内存","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"idea","postSlug":"Linux 调度 —— 进程与线程","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},"posts":[{"pathMapping":{"filePath":"public/content/ideas/Linux Systemd.md","pagePath":"/ideas/Linux Systemd","slug":"Linux Systemd"},"meta":{"content":"\n#Linux #systemctl #journalctl #timedatectl #BasicKnowledge #Operation \n\n每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\n\nSystemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\n\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。\n\n```\n$ sudo systemctl enable clamd@scan.service\n# 等同于\n$ sudo ln -s '/usr/lib/systemd/system/clamd@scan.service' '/etc/systemd/system/multi-user.target.wants/clamd@scan.service'\n```\n如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。\n\n与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。\n\n```\n$ sudo systemctl disable clamd@scan.service\n```\n配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。\n\n\n### 简单例子\n\n```\n[Unit]\nDescription=Ethereum go client\nAfter=syslog.target network.target\n\n[Service]\nType=simple\nWorkingDirectory=/home/ec2-user\nExecStart=/home/ec2-user/bin/geth --http --http.addr 0.0.0.0 --http.vhosts '*' --ws --ws.addr 0.0.0.0 --ws.origins '*' --rinkeby\nUser=ec2-user\nGroup=ec2-user\nKillMode=process\nKillSignal=SIGTERM\nRestart=on-failure\n\n[Install]\nWantedBy=default.target\n```\n\n# timedatectl \n\n时间管理\n\n设置时区\n```shell\nsudo timedatectl set-timezone zone\n```\n\n查看\n```shell\ntimedatectl status\n```\n\n# 日志\n\njournalctl\n\n查看所有日志: 不加任何参数\n```\njournalctl\n```\n\n按单位\n```\njournalctl -u geth\n```\n\n\n参考：\n- https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html","title":"Linux Systemd","abstract":"每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\nSystemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。","length":76,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","systemctl","journalctl","timedatectl","BasicKnowledge","Operation"],"license":false}},{"pathMapping":{"filePath":"public/content/ideas/Linux 信号处理 —— Signal.md","pagePath":"/ideas/Linux 信号处理 —— Signal","slug":"Linux 信号处理 —— Signal"},"meta":{"content":"\n#Linux #Signal #BasicKnowledge #Operation \n\n信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n\n\n### 信号的定义\n- 9: `SIGKILL`\n- 2: `SIGINT`\n- 15: `SIGTERM`\n\n### 信号的使用\n- `signal.h` 中，调用 `signal` 函数传入一个 `sighandler_t` 类型的 `handler` ，注册信号处理函数 \n- 用 `kill` 函数对一个 pid 发送一个信号。已注册信号， `kill` 发送的信号都能收到\n- `exec` 函数会将原先要捕捉的信号设置为默认动作\n- `fork` 函数的子进程会继承父进程的信号处理方式 [[Linux Clone VS Fork]]\n\n原型：\n```cpp\n#include <signal.h>\ntypedef void (*sighandler_t)(int);\nsighandler_t signal(int signum, sighandler_t handler);\n```\n\n```cpp\n#include <sys/types.h>\n#include <signal.h>\nint kill(pid_t pid, int sig);\n```\n\n### 未了解\n- [ ] 高级信号发送接收： sigaction , sigqueue\n\n\n# 一文看懂 Linux 信号处理原理与实现\n\n [一文看懂 Linux 信号处理原理与实现-linux 信号处理流程](https://www.51cto.com/article/675743.html) \n\n### 信号处理时内核态\n\n信号处理程序代码运行在用户态\nA 进程向 B 进程发送信号，发起系统调用陷入内核态，内核触发信号处理函数，返回用户态执行信号处理程序，信号处理程序执行完毕后返回到内核态执行收尾工作，再返回用户态继续执行程序\n\n![[Pasted image 20240819014740.png]]\n### 未了解\n- [ ] sigaction 详细解释\n- [ ] signal 在内核态的处理过程\n- [ ]","title":"Linux 信号处理 —— Signal","abstract":"信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n- 9: `SIGKILL`","length":50,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","Signal","BasicKnowledge","Operation"],"license":false}},{"pathMapping":{"filePath":"public/content/ideas/Linux 内存 —— 内存分页、分段.md","pagePath":"/ideas/Linux 内存 —— 内存分页、分段","slug":"Linux 内存 —— 内存分页、分段"},"meta":{"content":"\n#Linux #memory #Operation #BasicKnowledge \n\n> 内存**分页**与内存**分段**是**操作系统**管理**虚拟内存**的方式。\n> \n> 分段：将进程内存分为**代码分段**、**数据分段**、**栈段**、**堆段**等逻辑分明的段。能产生连续的物理空间。容易造成内存碎片，内存交换率低。\n> 分页：将物理内存与虚拟内存都分为一个个**固定大小**的页，内存以页为单位分配、回收、释放。适配局部性原理，碎片利用率高，可以不加载整个内存。\n\n [kernel_memory_management/✍ 文章/一文带你了解，虚拟内存、内存分页、分段、段页式内存管理.md at main · 0voice/kernel_memory_management](https://github.com/0voice/kernel_memory_management/blob/main/%E2%9C%8D%20%E6%96%87%E7%AB%A0/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%EF%BC%8C%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E3%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E3%80%81%E5%88%86%E6%AE%B5%E3%80%81%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.md) \n\n\n前置知识：[[Linux 内存 —— 虚拟内存]]\n\n## 内存分段\n\n内存分段是操作管理虚拟地址与物理地址之间关系的方式之一。\n\n> [!important]\n程序是由若干个逻辑分段组成的，可由**代码分段**、**数据分段**、**栈段**、**堆段**组成。不同的段是有不同的属性的，所以就用分段（_Segmentation_）的形式把这些段分离出来。\n\n### 如何映射\n\n分段机制下的虚拟地址由两部分组成，**段内选择子**和**段内偏移量**。\n\n- 段选择子里面最重要的是**段号**，用作段表的索引。**段表**里面保存的是这个**段的基地址、段的界限和特权等级**等。\n- **段内偏移量**应该位于 0 和段界限之间，如果段内偏移量是合法的，就将段基地址加上段内偏移量得到物理内存地址。\n\n![[Pasted image 20231110131944.png]]\n\n有一些不足之处：\n\n- 第一个就是**内存碎片**的问题。\n- 第二个就是**内存交换的效率低**的问题。\n\n### 内存碎片\n\n内存碎片的问题共有两处地方：\n\n- 外部内存碎片，也就是产生了多个不连续的小物理内存，导致新的程序无法被装载；\n- 内部内存碎片，程序所有的内存都被装载到了物理内存，但是这个程序有部分的内存可能并不是很常使用，这也会导致内存的浪费；\n\n解决外部内存碎片的问题就是**内存交换**。\n\n![[Pasted image 20231110132032.png]]\n\n步骤：\n\n- 将程序内存写到磁盘上\n- 从磁盘上读回内存，并整合内存碎片\n\n> [!info]\n> 可以把音乐程序占用的那 256MB 内存写到硬盘上，然后再从硬盘上读回来到内存里。不过再读回的时候，我们不能装载回原来的位置，而是紧紧跟着那已经被占用了的 512MB 内存后面。这样就能空缺出连续的时间 256MB 空间，于是新的 200MB 程序就可以装载进来。\n\n这个内存交换空间，在 Linux 系统里，也就是我们经常看到的 **Swap 空间**，这块空间是从硬盘划分出来的，用于内存与硬盘的空间交换\n\n## 内存分页\n\n分段的好处就是能产生连续的内存空间，但是会出现内存碎片和内存交换的空间太大的问题。\n\n要解决这些问题，那么就要想出能少出现一些内存碎片的办法。另外，当需要进行内存交换的时候，让需要交换的**写入或者从磁盘装载的数据更少**一点，这样就可以解决问题了。这个办法，也就是**内存分页**（_Paging_）。\n\n页表实际上存储在 CPU 的**内存管理单元** （_MMU_） 中，于是 CPU 就可以直接通过 MMU，找出要实际要访问的物理内存地址。\n\n> [!important]\n分页是把整个**虚拟和物理内存**空间切成一段段固定大小的**页**（_Page_）。一个页是一个连续并且尺寸固定的内存空间。在 Linux 下，**每一页的大小为 4KB**。\n\n虚拟地址与物理地址之间通过**页表**来映射，如下图：\n\n![[Pasted image 20231110132824.png]]\n\n### 如何解决内存碎片、内存交换效率低\n\n由于内存空间都是预先划分好的，也就不会像分段会产生间隙非常小的内存，这正是分段会产生内存碎片的原因。而采用了分页，那么释放的**内存**都是**以页为单位释放**的，也就不会产生无法给进程使用的小内存。\n\n如果内存空间不够，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页面给释放掉，也就是暂时写在硬盘上，称为**换出**（_Swap Out_）。一旦需要的时候，再加载进来，称为**换入**（_Swap In_）。所以，一次性写入磁盘的也只有少数的一个页或者几个页，不会花太多时间，**内存交换的效率就相对比较高。**\n\n更进一步地，分页的方式使得我们在加载程序的时候，不再需要一次性都把程序加载到物理内存中。我们完全可以在进行虚拟内存和物理内存的页之间的映射之后，并不是真的把页加载到物理内存里，而是**只有**在程序运行中，**需要用到**对应虚拟内存页里面的指令和数据时，**再加载到物理内存**里面去。\n\n### 如何映射\n\n在分页机制下，虚拟地址分为两部分，**页号**和**页内偏移**。页号作为页表的索引，**页表**包含物理页每页所在**物理内存的基地址**，这个基地址与页内偏移的组合就形成了物理内存地址，见下图。\n\n![[Pasted image 20231110133623.png]]\n\n三个步骤：\n\n- 把虚拟内存地址，切分成页号和偏移量；\n- 根据页号，从页表里面，查询对应的物理页号；\n- 直接拿物理页号，加上前面的偏移量，就得到了物理内存地址。\n\n### 局部性与 Cache\n\n在一段时间内，整个程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域。\n\n可把最常访问的几个页表项存储到访问速度更快的硬件，于是加入了一个专门存放程序最常访问的页表项的 Cache，这个 Cache 就是 TLB（_Translation Lookaside Buffer_） ，通常称为页表缓存、转址旁路缓存、快表等。\n\n## 段页式内存管理\n\n段页式内存管理实现的方式：\n\n- 先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制；\n- 接着再把每个段划分为多个页，也就是对分段划分出来的连续空间，再划分固定大小的页；\n\n![[Pasted image 20231110134320.png]]\n\n这样，地址结构就由**段号、段内页号和页内位移**三部分组成。\n\n段页式地址变换中要得到物理地址须经过三次内存访问：\n\n- 第一次访问段表，得到页表起始地址；\n- 第二次访问页表，得到物理页号；\n- 第三次将物理页号与页内位移组合，得到物理地址。\n\n可用软、硬件相结合的方法实现段页式地址变换，这样虽然增加了硬件成本和系统开销，但提高了内存的利用率。","title":"Linux 内存 —— 内存分页、分段","abstract":"> 内存**分页**与内存**分段**是**操作系统**管理**虚拟内存**的方式。\n> \n> 分段：将进程内存分为**代码分段**、**数据分段**、**栈段**、**堆段**等逻辑分明的段。能产生连续的物理空间。容易造成内存碎片，内存交换率低。","length":114,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","memory","Operation","BasicKnowledge"],"license":false}},{"pathMapping":{"filePath":"public/content/ideas/Linux 内存 —— 堆和栈.md","pagePath":"/ideas/Linux 内存 —— 堆和栈","slug":"Linux 内存 —— 堆和栈"},"meta":{"content":"\n#Linux #memory #BasicKnowledge \n\n> 堆区与栈区都是程序内存分段中的一段。\n\n[[Linux 内存 —— 内存分页、分段]]\n\n## 栈\n\n- 是逻辑栈，连续\n- 有大小限制， Windows 下为 2M\n- 入栈出栈为 CPU 指令，申请、读取快\n\n### 储存内容\n\n- 下条指令地址（ pop 后运行那条指令）\n- 函数参数\n- 函数局部变量\n\n## 堆\n\n- 逻辑上是链表，不连续\n- 基本无大小限制\n- 申请慢，容易产生内存碎片\n\n### 储存内容\n\n- 堆的大小\n- 堆变量","title":"Linux 内存 —— 堆和栈","abstract":"> 堆区与栈区都是程序内存分段中的一段。\n[[Linux 内存 —— 内存分页、分段]]\n- 是逻辑栈，连续","length":29,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","memory","BasicKnowledge"],"license":false}},{"pathMapping":{"filePath":"public/content/ideas/Linux 内存 —— 虚拟内存.md","pagePath":"/ideas/Linux 内存 —— 虚拟内存","slug":"Linux 内存 —— 虚拟内存"},"meta":{"content":"\n#Linux #memory #Operation #BasicKnowledge \n\n> 每个**进程**分配一套**虚拟内存**地址，由操作系统管理，**进程间独立**互不干涉。\n> 程序访问虚拟地址时，由操作系统转换成物理地址，使得这样不同进程内存不会冲突。\n\n [kernel_memory_management/✍ 文章/一文带你了解，虚拟内存、内存分页、分段、段页式内存管理.md at main · 0voice/kernel_memory_management](https://github.com/0voice/kernel_memory_management/blob/main/%E2%9C%8D%20%E6%96%87%E7%AB%A0/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%EF%BC%8C%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E3%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E3%80%81%E5%88%86%E6%AE%B5%E3%80%81%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.md) \n \nCPU是直接操作内存的物理地址。\n\n两个线程占用内存空间不能重叠，否则会相互擦除。如果直接使用物理内存，需要各线程都要理解其他所有线程占用住的空间，违反隔离原理。因此需要一种隔离内存的机制。\n\n这个机制就是虚拟内存。\n\n> [!important]\n> 每个**进程**分配一套**虚拟内存**地址，由操作系统管理，**进程间独立**互不干涉。\n\n- 程序所使用的内存地址叫做**虚拟内存地址**（_Virtual Memory Address_）\n- 实际存在硬件内存里面的空间地址叫**物理内存地址**（_Physical Memory Address_）\n\n程序访问虚拟地址时，由操作系统转换成物理地址，使得这样不同进程内存不会冲突。\n\n操作系统引入了虚拟内存，进程持有的虚拟地址会通过 CPU 芯片中的内存管理单元（MMU）的映射关系，来转换变成物理地址，然后再通过物理地址访问内存\n\n操作系统通过**内存分页**和**内存分段**等机制来管理虚拟内存与物理内存的映射。\n\n深入：[[Linux 内存 —— 内存分页、分段]]\n\n\n\n## Extra\n\n内存管理是以进程为单元，线程的栈在主进程的堆中。[[Linux 内存 —— 堆和栈]]","title":"Linux 内存 —— 虚拟内存","abstract":"> 每个**进程**分配一套**虚拟内存**地址，由操作系统管理，**进程间独立**互不干涉。\n> 程序访问虚拟地址时，由操作系统转换成物理地址，使得这样不同进程内存不会冲突。\n [kernel_memory_management/✍ 文章/一文带你了解，虚拟内存、内存分页、分段、段页式内存管理.md at main · 0voice/kernel_memory_management](https://github.com/0voice/kernel_memory_management/blob/main/%E2%9C%8D%20%E6%96%87%E7%AB%A0/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%EF%BC%8C%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E3%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E3%80%81%E5%88%86%E6%AE%B5%E3%80%81%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.md) ","length":33,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","memory","Operation","BasicKnowledge"],"license":false}},{"pathMapping":{"filePath":"public/content/ideas/Linux 调度 —— 进程与线程.md","pagePath":"/ideas/Linux 调度 —— 进程与线程","slug":"Linux 调度 —— 进程与线程"},"meta":{"content":"\n#Linux #schedule #BasicKnowledge \n\n## 进程\n\n**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n\n切换需要切换上下文\n\n- 需要切换内存映射表(MMU)\n- 进程栈大小随机，但比线程栈大\n\n\n\n\n## 线程\n\n**线程**是计算机**调度**最小的单位，也是程序执行的最小单位。\n\n线程的内存描述符直接指向父进程的描述符。线程间切换代价比较小，**不需要切换映射表**（MMU），**只是指令间的切换**即可，比较轻量级。线程的栈在主进程的堆中。\n\n- 只需切换各种寄存器\n- 线程共享地址空间\n- 线程栈固定大小，默认 8M ，默认值由操作系统确定， `ulimit -a` 查看， `ulimit -s` 修改\n\n同一进程内的线程间共享：\n- \n\n## 细节\n\n关于 MMU ： [[Linux 内存 —— 内存分页、分段]]\n\n\n内存管理是以进程为单元，线程的栈在主进程的堆中。[[Linux 内存 —— 堆和栈]]\n\n## 上下文切换开销\n\n- 寄存器状态保存、恢复\n- 缓存失效\n- 陷入内核态开销","title":"Linux 调度 —— 进程与线程","abstract":"**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n切换需要切换上下文\n- 需要切换内存映射表(MMU)","length":40,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","schedule","BasicKnowledge"],"license":false}}]},"__N_SSG":true}