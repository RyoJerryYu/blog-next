{"pageProps":{"slug":"Linux Systemd","tags":[{"tag":"Linux","slug":"linux","path":"/tags/linux","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"systemctl","slug":"systemctl","path":"/tags/systemctl","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"journalctl","slug":"journalctl","path":"/tags/journalctl","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"timedatectl","slug":"timedatectl","path":"/tags/timedatectl","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"BasicKnowledge","slug":"basicknowledge","path":"/tags/basicknowledge","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"Operation","slug":"operation","path":"/tags/operation","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"}]}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    figure: \"figure\",\n    h1: \"h1\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ObsidianTag} = _components;\n  if (!ObsidianTag) _missingMdxReference(\"ObsidianTag\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(ObsidianTag, {\n        tag: \"Linux\",\n        slug: \"linux\",\n        path: \"/tags/linux\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"systemctl\",\n        slug: \"systemctl\",\n        path: \"/tags/systemctl\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"journalctl\",\n        slug: \"journalctl\",\n        path: \"/tags/journalctl\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"timedatectl\",\n        slug: \"timedatectl\",\n        path: \"/tags/timedatectl\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"BasicKnowledge\",\n        slug: \"basicknowledge\",\n        path: \"/tags/basicknowledge\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"Operation\",\n        slug: \"operation\",\n        path: \"/tags/operation\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Systemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"systemctl enable命令用于在上面两个目录之间，建立符号链接关系。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"plaintext\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"$ sudo systemctl enable clamd@scan.service\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"# 等同于\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"$ sudo ln -s '/usr/lib/systemd/system/clamd@scan.service' '/etc/systemd/system/multi-user.target.wants/clamd@scan.service'\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"plaintext\",\n        \"data-theme\": \"plastic\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"$ sudo systemctl disable clamd@scan.service\"\n            })\n          })\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"简单例子\",\n      children: _jsx(_components.a, {\n        href: \"#简单例子\",\n        children: \"简单例子\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"plaintext\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"[Unit]\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"Description=Ethereum go client\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"After=syslog.target network.target\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"[Service]\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"Type=simple\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"WorkingDirectory=/home/ec2-user\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"ExecStart=/home/ec2-user/bin/geth --http --http.addr 0.0.0.0 --http.vhosts '*' --ws --ws.addr 0.0.0.0 --ws.origins '*' --rinkeby\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"User=ec2-user\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"Group=ec2-user\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"KillMode=process\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"KillSignal=SIGTERM\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"Restart=on-failure\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"[Install]\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"WantedBy=default.target\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"timedatectl\",\n      children: _jsx(_components.a, {\n        href: \"#timedatectl\",\n        children: \"timedatectl\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"时间管理\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"设置时区\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"shell\",\n        \"data-theme\": \"plastic\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"shell\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"sudo\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \" timedatectl\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \" set-timezone\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \" zone\"\n            })]\n          })\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"查看\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"shell\",\n        \"data-theme\": \"plastic\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"shell\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"timedatectl\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \" status\"\n            })]\n          })\n        })\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"日志\",\n      children: _jsx(_components.a, {\n        href: \"#日志\",\n        children: \"日志\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"journalctl\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"查看所有日志: 不加任何参数\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"plaintext\",\n        \"data-theme\": \"plastic\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"journalctl\"\n            })\n          })\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"按单位\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"plaintext\",\n        \"data-theme\": \"plastic\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"journalctl -u geth\"\n            })\n          })\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"参考：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html\",\n          children: \"https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"meta":{"content":"\n#Linux #systemctl #journalctl #timedatectl #BasicKnowledge #Operation \n\n每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\n\nSystemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\n\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。\n\n```\n$ sudo systemctl enable clamd@scan.service\n# 等同于\n$ sudo ln -s '/usr/lib/systemd/system/clamd@scan.service' '/etc/systemd/system/multi-user.target.wants/clamd@scan.service'\n```\n如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。\n\n与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。\n\n```\n$ sudo systemctl disable clamd@scan.service\n```\n配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。\n\n\n### 简单例子\n\n```\n[Unit]\nDescription=Ethereum go client\nAfter=syslog.target network.target\n\n[Service]\nType=simple\nWorkingDirectory=/home/ec2-user\nExecStart=/home/ec2-user/bin/geth --http --http.addr 0.0.0.0 --http.vhosts '*' --ws --ws.addr 0.0.0.0 --ws.origins '*' --rinkeby\nUser=ec2-user\nGroup=ec2-user\nKillMode=process\nKillSignal=SIGTERM\nRestart=on-failure\n\n[Install]\nWantedBy=default.target\n```\n\n# timedatectl \n\n时间管理\n\n设置时区\n```shell\nsudo timedatectl set-timezone zone\n```\n\n查看\n```shell\ntimedatectl status\n```\n\n# 日志\n\njournalctl\n\n查看所有日志: 不加任何参数\n```\njournalctl\n```\n\n按单位\n```\njournalctl -u geth\n```\n\n\n参考：\n- https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html","title":"Linux Systemd","abstract":"每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\nSystemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。","length":76,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","systemctl","journalctl","timedatectl","BasicKnowledge","Operation"],"license":false,"headingTrees":[{"key":"简单例子","href":"#简单例子","heading":3,"title":"简单例子","children":[],"id":"简单例子"},{"key":"timedatectl","href":"#timedatectl","heading":1,"title":"timedatectl","children":[],"id":"timedatectl"},{"key":"日志","href":"#日志","heading":1,"title":"日志","children":[],"id":"日志"}],"wikiRefAliases":[],"richRefAliases":[]},"prevNextInfo":{"prevInfo":{"pathMapping":{"filePath":"public/content/ideas/Linux Clone VS Fork.md","pagePath":"/ideas/Linux Clone VS Fork","slug":"Linux Clone VS Fork"},"meta":{"content":"","title":"Linux Clone VS Fork","abstract":"","length":1,"created_at":"2025-03-09T17:10:04.000Z","updated_at":null,"tags":[],"license":false,"headingTrees":[{"key":"title-linux-clone-vs-fork","href":"#title-linux-clone-vs-fork","heading":2,"title":"title: Linux Clone VS Fork","children":[],"id":"title-linux-clone-vs-fork"}],"wikiRefAliases":[],"richRefAliases":[]}},"nextInfo":{"pathMapping":{"filePath":"public/content/ideas/Linux 信号处理 —— Signal.md","pagePath":"/ideas/Linux 信号处理 —— Signal","slug":"Linux 信号处理 —— Signal"},"meta":{"content":"\n#Linux #Signal #BasicKnowledge #Operation \n\n信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n\n\n### 信号的定义\n- 9: `SIGKILL`\n- 2: `SIGINT`\n- 15: `SIGTERM`\n\n### 信号的使用\n- `signal.h` 中，调用 `signal` 函数传入一个 `sighandler_t` 类型的 `handler` ，注册信号处理函数 \n- 用 `kill` 函数对一个 pid 发送一个信号。已注册信号， `kill` 发送的信号都能收到\n- `exec` 函数会将原先要捕捉的信号设置为默认动作\n- `fork` 函数的子进程会继承父进程的信号处理方式 [[Linux Clone VS Fork]]\n\n原型：\n```cpp\n#include <signal.h>\ntypedef void (*sighandler_t)(int);\nsighandler_t signal(int signum, sighandler_t handler);\n```\n\n```cpp\n#include <sys/types.h>\n#include <signal.h>\nint kill(pid_t pid, int sig);\n```\n\n### 未了解\n- [ ] 高级信号发送接收： sigaction , sigqueue\n\n\n# 一文看懂 Linux 信号处理原理与实现\n\n [一文看懂 Linux 信号处理原理与实现-linux 信号处理流程](https://www.51cto.com/article/675743.html) \n\n### 信号处理时内核态\n\n信号处理程序代码运行在用户态\nA 进程向 B 进程发送信号，发起系统调用陷入内核态，内核触发信号处理函数，返回用户态执行信号处理程序，信号处理程序执行完毕后返回到内核态执行收尾工作，再返回用户态继续执行程序\n\n![[Pasted image 20240819014740.png]]\n### 未了解\n- [ ] sigaction 详细解释\n- [ ] signal 在内核态的处理过程\n- [ ]","title":"Linux 信号处理 —— Signal","abstract":"信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n- 9: `SIGKILL`","length":50,"created_at":"2024-11-16T07:32:08.000Z","updated_at":"2025-03-09T17:10:04.000Z","tags":["Linux","Signal","BasicKnowledge","Operation"],"license":false,"headingTrees":[{"key":"信号的定义","href":"#信号的定义","heading":3,"title":"信号的定义","children":[],"id":"信号的定义"},{"key":"信号的使用","href":"#信号的使用","heading":3,"title":"信号的使用","children":[],"id":"信号的使用"},{"key":"未了解","href":"#未了解","heading":3,"title":"未了解","children":[],"id":"未了解"},{"key":"一文看懂-linux-信号处理原理与实现","href":"#一文看懂-linux-信号处理原理与实现","heading":1,"title":"一文看懂 Linux 信号处理原理与实现","children":[{"key":"信号处理时内核态","href":"#信号处理时内核态","heading":3,"title":"信号处理时内核态","children":[],"id":"信号处理时内核态"},{"key":"未了解-1","href":"#未了解-1","heading":3,"title":"未了解","children":[],"id":"未了解-1"}],"id":"一文看懂-linux-信号处理原理与实现"}],"wikiRefAliases":["Linux Clone VS Fork"],"richRefAliases":["Pasted image 20240819014740.png"]}}},"backRefResources":[]},"__N_SSG":true}