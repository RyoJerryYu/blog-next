{"pageProps":{"slug":"the-using-in-cpp","tags":[{"tag":"C++","slug":"c++","path":"/tags/c++","postSlugs":[{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"}]},{"tag":"杂技","slug":"杂技","path":"/tags/杂技","postSlugs":[{"postType":"article","postSlug":"Building-this-blog","postPagePath":"/articles/Building-this-blog"},{"postType":"article","postSlug":"hello-world","postPagePath":"/articles/hello-world"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"Building-this-blog","postPagePath":"/articles/Building-this-blog"},{"postType":"article","postSlug":"hello-world","postPagePath":"/articles/hello-world"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"Building-this-blog","postPagePath":"/articles/Building-this-blog"},{"postType":"article","postSlug":"hello-world","postPagePath":"/articles/hello-world"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"Building-this-blog","postPagePath":"/articles/Building-this-blog"},{"postType":"article","postSlug":"hello-world","postPagePath":"/articles/hello-world"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"Building-this-blog","postPagePath":"/articles/Building-this-blog"},{"postType":"article","postSlug":"hello-world","postPagePath":"/articles/hello-world"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"Building-this-blog","postPagePath":"/articles/Building-this-blog"},{"postType":"article","postSlug":"hello-world","postPagePath":"/articles/hello-world"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"},{"postType":"article","postSlug":"Building-this-blog","postPagePath":"/articles/Building-this-blog"},{"postType":"article","postSlug":"hello-world","postPagePath":"/articles/hello-world"},{"postType":"article","postSlug":"the-using-in-cpp","postPagePath":"/articles/the-using-in-cpp"}]}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    figure: \"figure\",\n    h2: \"h2\",\n    h4: \"h4\",\n    hr: \"hr\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"using的用法\",\n      children: _jsx(_components.a, {\n        href: \"#using的用法\",\n        children: \"using的用法\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"using与命名空间\",\n      children: _jsx(_components.a, {\n        href: \"#using与命名空间\",\n        children: \"using与命名空间\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"引入整个命名空间中的成员\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"不引入命名空间时，使用其中变量需要使用\", _jsx(_components.code, {\n            children: \"<命名空间名>::<变量名>\"\n          }), \"的方式使用。\"]\n        }), \"\\n\", _jsx(_components.figure, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.pre, {\n            style: {\n              backgroundColor: \"#232136\",\n              color: \"#e0def4\"\n            },\n            tabIndex: \"0\",\n            \"data-language\": \"C++\",\n            \"data-theme\": \"rose-pine-moon\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"C++\",\n              \"data-theme\": \"rose-pine-moon\",\n              style: {\n                display: \"grid\"\n              },\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"using namespace foo;\"\n                })\n              })\n            })\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"如此会将命名空间foo下所有的成员名称引入，可在直接以 \", _jsx(_components.code, {\n            children: \"<变量名>\"\n          }), \" 的形式使用。但如此做有可能会使得命名空间foo中部分变量与当前定义的变量名冲突，违反命名空间隔离编译时名称冲突的初衷，因此不建议如此使用。\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"引入命名空间中的部分成员\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"可通过仅引入命名空间中部分的成员，避免命名冲突。\"\n        }), \"\\n\", _jsx(_components.figure, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.pre, {\n            style: {\n              backgroundColor: \"#232136\",\n              color: \"#e0def4\"\n            },\n            tabIndex: \"0\",\n            \"data-language\": \"C++\",\n            \"data-theme\": \"rose-pine-moon\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"C++\",\n              \"data-theme\": \"rose-pine-moon\",\n              style: {\n                display: \"grid\"\n              },\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"using foo::bar;\"\n                })\n              })\n            })\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"这种方法仅会引入在语句中明确声明的名称。如using一个枚举类时，不会连其定义的枚举常量也一同引入。\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"using与基类成员\",\n      children: _jsx(_components.a, {\n        href: \"#using与基类成员\",\n        children: \"using与基类成员\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"子类中引入基类名称\"\n        }), \"\\n\", _jsx(_components.figure, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.pre, {\n            style: {\n              backgroundColor: \"#232136\",\n              color: \"#e0def4\"\n            },\n            tabIndex: \"0\",\n            \"data-language\": \"C++\",\n            \"data-theme\": \"rose-pine-moon\",\n            children: _jsxs(_components.code, {\n              \"data-language\": \"C++\",\n              \"data-theme\": \"rose-pine-moon\",\n              style: {\n                display: \"grid\"\n              },\n              children: [_jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" class Base {\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" public:\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"     std::size_t size() const { return n; }\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" protected:\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"     std::size_t n;\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" };\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: \" \"\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" class Derived : private Base {\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" public:\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"     using Base::size;\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" protected:\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"     using Base::n;\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" // ...\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" };\"\n                })\n              })]\n            })\n          })\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"例中子类private继承基类，由于private继承使得\", _jsx(_components.code, {\n            children: \"Base::size\"\n          }), \"与\", _jsx(_components.code, {\n            children: \"Base::n\"\n          }), \"可视性变为private。而使用\", _jsx(_components.code, {\n            children: \"using Base::size\"\n          }), \"、\", _jsx(_components.code, {\n            children: \"using Base::n\"\n          }), \"后，可分别使其变为public与protected。\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"子类成员函数与基类同名时保留基类函数用以重载\"\n        }), \"\\n\", _jsx(_components.figure, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.pre, {\n            style: {\n              backgroundColor: \"#232136\",\n              color: \"#e0def4\"\n            },\n            tabIndex: \"0\",\n            \"data-language\": \"C++\",\n            \"data-theme\": \"rose-pine-moon\",\n            children: _jsxs(_components.code, {\n              \"data-language\": \"C++\",\n              \"data-theme\": \"rose-pine-moon\",\n              style: {\n                display: \"grid\"\n              },\n              children: [_jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" class Base\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" {\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" public:\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"     int Func(){return 0;}\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" };\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" class Derived : Base\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" {\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" public:\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"     using Base::Func;\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"     int Func(int);\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \" };\"\n                })\n              })]\n            })\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"子类中定义的成员函数与基类中重名时，即使函数原型不同，子类函数也会覆盖基类函数。\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"如果基类中定义了一个函数的多个重载，而子类中又重写或重定义了其中某些版本，或是定义了一个新的重载，则基类中该函数的所有重载均被隐藏。\"\n        }), \"\\n\", _jsxs(_components.p, {\n          children: [\"此时可以在子类中使用\", _jsx(_components.code, {\n            children: \"using Base::Func\"\n          }), \"，令基类中所有重载版本在子类中可见，再重定义需要更改的版本。\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"又如cppreference中的\", _jsx(_components.a, {\n        href: \"https://en.cppreference.com/w/cpp/language/using_declaration#In_class_definition\",\n        children: \"例子\"\n      }), \"：\"]\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        style: {\n          backgroundColor: \"#232136\",\n          color: \"#e0def4\"\n        },\n        tabIndex: \"0\",\n        \"data-language\": \"C++\",\n        \"data-theme\": \"rose-pine-moon\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"C++\",\n          \"data-theme\": \"rose-pine-moon\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"#include <iostream>\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"struct B {\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    virtual void f(int) { std::cout << \\\"B::f\\\\n\\\"; }\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    void g(char)        { std::cout << \\\"B::g\\\\n\\\"; }\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    void h(int)         { std::cout << \\\"B::h\\\\n\\\"; }\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"protected:\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    int m; // B::m is protected\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    typedef int value_type;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"};\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"struct D : B {\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    using B::m; // D::m is public\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    using B::value_type; // D::value_type is public\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    using B::f;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    void f(int) { std::cout << \\\"D::f\\\\n\\\"; } // D::f(int) overrides B::f(int)\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    using B::g;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    void g(int) { std::cout << \\\"D::g\\\\n\\\"; } // both g(int) and g(char) are visible\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"                                        // as members of D\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    using B::h;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    void h(int) { std::cout << \\\"D::h\\\\n\\\"; } // D::h(int) hides B::h(int)\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"};\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"int main()\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"{\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    D d;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    B& b = d;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"//    b.m = 2; // error, B::m is protected\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    d.m = 1; // protected B::m is accessible as public D::m\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    b.f(1); // calls derived f()\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    d.f(1); // calls derived f()\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    d.g(1); // calls derived g(int)\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    d.g('a'); // calls base g(char)\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    b.h(1); // calls base h()\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"    d.h(1); // calls derived h()\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"}\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"using\"\n      }), \"语句可以改变基类成员的可访问性，也能在子类中重载(Overload)、重写(Override)基类的函数，或是通过重定义隐藏(Hide)对应的基类函数。\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"using与别名\",\n      children: _jsx(_components.a, {\n        href: \"#using与别名\",\n        children: \"using与别名\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"using在C++11开始，可用于别名的声明。用法如下：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        style: {\n          backgroundColor: \"#232136\",\n          color: \"#e0def4\"\n        },\n        tabIndex: \"0\",\n        \"data-language\": \"C++\",\n        \"data-theme\": \"rose-pine-moon\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"C++\",\n          \"data-theme\": \"rose-pine-moon\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"using UPtrMapSS = std::unique_ptr<std::unordered_map<std::string, std::string>>;//普通别名\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"using FP = void (*) (int, const std::string&);//函数指针别名\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"template <typename T>\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"using Vec = MyVector<T, MyAlloc<T>>;//模板别名\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"Vec<int> vec;//模板别名的使用\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"using关键字与typedef关键字定义别名的不同\",\n      children: _jsx(_components.a, {\n        href: \"#using关键字与typedef关键字定义别名的不同\",\n        children: \"using关键字与typedef关键字定义别名的不同\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在STL容器或是其他泛型中若是再接受一个容器类型，类型名称就会写得很长。使用typedef或using定义别名会变得比较方便：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        style: {\n          backgroundColor: \"#232136\",\n          color: \"#e0def4\"\n        },\n        tabIndex: \"0\",\n        \"data-language\": \"C++\",\n        \"data-theme\": \"rose-pine-moon\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"C++\",\n          \"data-theme\": \"rose-pine-moon\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"typedef std::unique_ptr<std::unordered_map<std::string, std::string>> UPtrMapSS;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"using UPtrMapSS = std::unique_ptr<std::unordered_map<std::string, std::string>>;\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"对于函数指针，使用using语句可以把函数原型与别名强制分到左右两边，比使用typedef易读得多：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        style: {\n          backgroundColor: \"#232136\",\n          color: \"#e0def4\"\n        },\n        tabIndex: \"0\",\n        \"data-language\": \"C++\",\n        \"data-theme\": \"rose-pine-moon\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"C++\",\n          \"data-theme\": \"rose-pine-moon\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"typedef void (*FP) (int, const std::string&);\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"using FP = void (*) (int, const std::string&);\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"在C++中，若试图使用typedef定义一个模板：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        style: {\n          backgroundColor: \"#232136\",\n          color: \"#e0def4\"\n        },\n        tabIndex: \"0\",\n        \"data-language\": \"C++\",\n        \"data-theme\": \"rose-pine-moon\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"C++\",\n          \"data-theme\": \"rose-pine-moon\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"template <typename T>\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"typedef MyVector<T, MyAlloc<T>> Vec;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"// usage\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"Vec<int> vec;\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"编译就会报错，提示：\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"error: a typedef cannot be a template\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在一些STL中，通过如下方式包装一层来使用：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        style: {\n          backgroundColor: \"#232136\",\n          color: \"#e0def4\"\n        },\n        tabIndex: \"0\",\n        \"data-language\": \"C++\",\n        \"data-theme\": \"rose-pine-moon\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"C++\",\n          \"data-theme\": \"rose-pine-moon\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"template <typename T>\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"struct Vec\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"{\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"  typedef MyVector<T, MyAlloc<T>> type;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"};\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"// usage\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"Vec<int>::type vec;\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如此显得十分不美观，且要是在模板类中或参数传递时使用typename强制这为类型，而不是其他如静态成员等语法：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        style: {\n          backgroundColor: \"#232136\",\n          color: \"#e0def4\"\n        },\n        tabIndex: \"0\",\n        \"data-language\": \"C++\",\n        \"data-theme\": \"rose-pine-moon\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"C++\",\n          \"data-theme\": \"rose-pine-moon\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"template <typename T>\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"class Widget\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"{\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"  typename Vec<T>::type vec;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"};\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"而using关键字可定义模板别名，则一切都会显得十分自然：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        style: {\n          backgroundColor: \"#232136\",\n          color: \"#e0def4\"\n        },\n        tabIndex: \"0\",\n        \"data-language\": \"C++\",\n        \"data-theme\": \"rose-pine-moon\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"C++\",\n          \"data-theme\": \"rose-pine-moon\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"template <typename T>\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"using Vec = MyVector<T, MyAlloc<T>>;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"// usage\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"Vec<int> vec;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"// in a class template\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"template <typename T>\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"class Widget\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"{\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"  Vec<T> vec;\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"};\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"能做到类似别名功能的，还有宏#define。但#define运行在编译前的宏处理阶段，对代码进行字符串替换。没有类型检查或其他编译、链接阶段才能进行的检查，不具备安全性。在C++11中不提倡使用#define。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"meta":{"content":"\n## using的用法\n#### using与命名空间\n\n1. 引入整个命名空间中的成员\n   \n   不引入命名空间时，使用其中变量需要使用`<命名空间名>::<变量名>`的方式使用。\n   ```C++\n   using namespace foo;\n   ```\n   如此会将命名空间foo下所有的成员名称引入，可在直接以 `<变量名>` 的形式使用。但如此做有可能会使得命名空间foo中部分变量与当前定义的变量名冲突，违反命名空间隔离编译时名称冲突的初衷，因此不建议如此使用。\n\n2. 引入命名空间中的部分成员\n   \n   可通过仅引入命名空间中部分的成员，避免命名冲突。\n   ```C++\n   using foo::bar;\n   ```\n   这种方法仅会引入在语句中明确声明的名称。如using一个枚举类时，不会连其定义的枚举常量也一同引入。\n\n#### using与基类成员\n\n1. 子类中引入基类名称\n   \n   ```C++\n    class Base {\n    public:\n        std::size_t size() const { return n; }\n    protected:\n        std::size_t n;\n    };\n\n    class Derived : private Base {\n    public:\n        using Base::size;\n    protected:\n        using Base::n;\n    // ...\n    };\n    ```\n    例中子类private继承基类，由于private继承使得`Base::size`与`Base::n`可视性变为private。而使用`using Base::size`、`using Base::n`后，可分别使其变为public与protected。\n\n2. 子类成员函数与基类同名时保留基类函数用以重载\n   \n   ```C++\n    class Base\n    {\n    public:\n        int Func(){return 0;}\n    };\n    class Derived : Base\n    {\n    public:\n        using Base::Func;\n        int Func(int);\n    };\n    ```\n    子类中定义的成员函数与基类中重名时，即使函数原型不同，子类函数也会覆盖基类函数。\n    \n    如果基类中定义了一个函数的多个重载，而子类中又重写或重定义了其中某些版本，或是定义了一个新的重载，则基类中该函数的所有重载均被隐藏。\n\n    此时可以在子类中使用`using Base::Func`，令基类中所有重载版本在子类中可见，再重定义需要更改的版本。\n\n又如cppreference中的[例子](https://en.cppreference.com/w/cpp/language/using_declaration#In_class_definition)：\n```C++\n#include <iostream>\nstruct B {\n    virtual void f(int) { std::cout << \"B::f\\n\"; }\n    void g(char)        { std::cout << \"B::g\\n\"; }\n    void h(int)         { std::cout << \"B::h\\n\"; }\nprotected:\n    int m; // B::m is protected\n    typedef int value_type;\n};\n\nstruct D : B {\n    using B::m; // D::m is public\n    using B::value_type; // D::value_type is public\n\n    using B::f;\n    void f(int) { std::cout << \"D::f\\n\"; } // D::f(int) overrides B::f(int)\n    using B::g;\n    void g(int) { std::cout << \"D::g\\n\"; } // both g(int) and g(char) are visible\n                                        // as members of D\n    using B::h;\n    void h(int) { std::cout << \"D::h\\n\"; } // D::h(int) hides B::h(int)\n};\n\nint main()\n{\n    D d;\n    B& b = d;\n\n//    b.m = 2; // error, B::m is protected\n    d.m = 1; // protected B::m is accessible as public D::m\n    b.f(1); // calls derived f()\n    d.f(1); // calls derived f()\n    d.g(1); // calls derived g(int)\n    d.g('a'); // calls base g(char)\n    b.h(1); // calls base h()\n    d.h(1); // calls derived h()\n}\n```\n`using`语句可以改变基类成员的可访问性，也能在子类中重载(Overload)、重写(Override)基类的函数，或是通过重定义隐藏(Hide)对应的基类函数。\n\n\n#### using与别名\n\nusing在C++11开始，可用于别名的声明。用法如下：\n```C++\nusing UPtrMapSS = std::unique_ptr<std::unordered_map<std::string, std::string>>;//普通别名\nusing FP = void (*) (int, const std::string&);//函数指针别名\n\ntemplate <typename T>\nusing Vec = MyVector<T, MyAlloc<T>>;//模板别名\nVec<int> vec;//模板别名的使用\n```\n\n## using关键字与typedef关键字定义别名的不同\n\n在STL容器或是其他泛型中若是再接受一个容器类型，类型名称就会写得很长。使用typedef或using定义别名会变得比较方便：\n```C++\ntypedef std::unique_ptr<std::unordered_map<std::string, std::string>> UPtrMapSS;\n\nusing UPtrMapSS = std::unique_ptr<std::unordered_map<std::string, std::string>>;\n```\n\n对于函数指针，使用using语句可以把函数原型与别名强制分到左右两边，比使用typedef易读得多：\n```C++\ntypedef void (*FP) (int, const std::string&);\n\nusing FP = void (*) (int, const std::string&);\n```\n\n---\n\n在C++中，若试图使用typedef定义一个模板：\n```C++\ntemplate <typename T>\ntypedef MyVector<T, MyAlloc<T>> Vec;\n\n// usage\nVec<int> vec;\n```\n编译就会报错，提示：\n> error: a typedef cannot be a template\n\n在一些STL中，通过如下方式包装一层来使用：\n```C++\ntemplate <typename T>\nstruct Vec\n{\n  typedef MyVector<T, MyAlloc<T>> type;\n};\n\n// usage\nVec<int>::type vec;\n```\n\n如此显得十分不美观，且要是在模板类中或参数传递时使用typename强制这为类型，而不是其他如静态成员等语法：\n```C++\ntemplate <typename T>\nclass Widget\n{\n  typename Vec<T>::type vec;\n};\n```\n\n而using关键字可定义模板别名，则一切都会显得十分自然：\n```C++\ntemplate <typename T>\nusing Vec = MyVector<T, MyAlloc<T>>;\n\n// usage\nVec<int> vec;\n\n// in a class template\ntemplate <typename T>\nclass Widget\n{\n  Vec<T> vec;\n};\n```\n\n---\n\n能做到类似别名功能的，还有宏#define。但#define运行在编译前的宏处理阶段，对代码进行字符串替换。没有类型检查或其他编译、链接阶段才能进行的检查，不具备安全性。在C++11中不提倡使用#define。\n\n\n\n   \n   ","title":"C++中using关键字的使用","abstract":"1. 引入整个命名空间中的成员\n   不引入命名空间时，使用其中变量需要使用`<命名空间名>::<变量名>`的方式使用。\n   ```C++","length":192,"created_at":"2020-01-28T18:00:00.000Z","updated_at":"2022-03-27T13:30:33.000Z","tags":["C++","杂技"],"license":false},"prevNextInfo":{"prevInfo":{"pathMapping":{"filePath":"public/content/articles/2021-01-11-Sort-algorithm.md","pagePath":"/articles/Sort-algorithm","slug":"Sort-algorithm"},"meta":{"content":"\n# 序言\n\n我们知道排序是算法入门基本功，排序算法有多重要想必也不需要我在这里说明了。因此这一篇就按着我的理解，聊一聊排序算法。\n\n当然我不打算随便弄个什么十大排序算法或是经典排序总结之类响当当的名头，各个算法走马看花一样拉出来遛一遍，最后变得跟网上搜索到的其他讲排序的文章一样换汤不换药。你会发现这篇文章的结构跟在网上搜索到的任何讲排序的文章都有所不同：\n\n在这篇文章里，你会发现你找不到冒泡排序——因为我认为冒泡排序只不过是一种低效率的选择排序。\n\n你会发现堆排序被当成是选择排序的一种优化——因为我认为堆排序主要在于使用了堆这种数据结构，而总体思想与选择排序相比没有太大变化。\n\n你还会找到其他与别的文章不一样的地方。因为这篇文章是我按照自己的理解来写的，我脑子里是这样想的，那文章里就是这样写的。我会按照我的理解，从纵向与横向两个维度，来理清楚各个排序算法的特性与异同。\n\n# 整篇文章的要点\n\n整篇文章以纵向——算法分类、以及横向——算法评价两个维度来进行组织。\n\n排序算法可以按照以下方式来进行分类：\n\n- 基于比较的排序算法\n    - 基于分治思想\n        - 快速排序\n        - 归并排序\n    - 基于有序区域扩展\n        - 插入排序\n        - 选择排序\n- 不基于比较的排序算法\n    - 计数排序\n    - 桶排序\n    - 基数排序\n\n文章中还会讲一讲为什么会这么分，每种分类有什么共性，分类之间有什么差异。此外，在最后还会稍微提一提外部排序与适用于并行运算的排序等。\n\n而对于纵向分类中的每一个端点，我们又会从以下五个方面，来对各个算法进行一个总体评价：\n\n- 时间复杂度（最坏，最好，平均※）\n- 空间复杂度\n- 是否原地排序\n- 是否稳定排序\n- 能否用于链表排序\n\n而由于复杂度主要只关注数量级，因此在这篇文章里会在不影响计算结果的前提下对复杂度计算进行适当的近似与简化。\n\n# 快排\n\n## 思想\n\n分治法：先把序列分为小的部分和大的部分，再将两部分分别排序。即：复杂分割，简单合并，主要操作在于分割。\n\n## 要点\n\n### 时间复杂度\n\n推导式：T(n) = T(找) + T(左) + T(右) = O(n) + 两个子问题时间复杂度。\n\n- 最好时间复杂度为每次都正好找到最中间的一个数时时间复杂度为O（nlogn）。证明略。\n- 最坏时间复杂度为每次都正好找到最旁边的数时时间复杂度为O(n^2)。证明略。\n- 平均时间复杂度为O（nlogn），推导式如下：\n\n    快速排序每一步中，将元素分为左右两边需要遍历整个列表，耗时T(n)。假设最后定位的元素为最终第i个元素，则两个子问题复杂度分别为T(i)和T(n-i-1)。\n\n    则有：\n\n    $$\n    \\begin{aligned}\n    T(n) &= n + \\frac{\\sum_{i=0}^{n-1}{T(i)+T(n-i-1)}}{n} \\\\\n    &=n + \\frac{2}{n}\\times\\sum_{i=0}^{n-1}{T(i)} \\\\\n    \\end{aligned}\n    $$\n\n    令 $$\\sum_{i=0}^{n}T(i) = Sum(n)$$ ，即有：\n\n    $$\n    \\begin{aligned}\n    T(n) &= n + \\frac{2}{n} \\times Sum(n-1) \\\\\n    Sum(n) &= \\frac{n+1}{2}T(n+1) - \\frac{n+1}{2}(n+1)\n    \\end{aligned}\n    $$\n\n    错位相减：\n\n    $$\n    \\begin{aligned}\n    Sum(n) - Sum(n-1) &= \\frac{n+1}{2}T(n+1) - \\frac{n+1}{2}(n+1) - \\frac{n}{2}T(n) + \\frac{n}{2}(n) \n    \\\\\n    T(n) &= \\frac{n+1}{2}T(n+1) - \\frac{n}{2}T(n) - \\frac{2n+1}{2} \n    \\\\\n    \\frac{T(n+1)}{n+2} &= \\frac{T(n)}{n+1}+\\frac{2n+1}{(n+1)(n+2)} \n    \\\\\n    &= \\frac{T(n)}{n+1}+\\frac{1}{n}+\\frac{1}{n+1} \n    \\\\\n    &=...\n    \\\\\n    &= \\frac{T(1)}{2}+1+2\\times(\\frac{1}{2}+\\frac{1}{3}+...+\\frac{1}{n})+\\frac{1}{n+1}\n    \\\\\n    \\\\\n    \\frac{T(n)}{n+1}&=\\frac{T(1)}{2}+1+2\\times(\\frac{1}{2}+...+\\frac{1}{n-1})+\\frac{1}{n}\n    \\\\\n    &= O(1)+O(1)+O(logn)+O(\\frac{1}{n})\n    \\\\\n    &= O(logn)\n    \\end{aligned}\n    $$\n\n    其中由于 $$\\frac{1}{x}=\\frac{d(logx)}{dx}$$ ，因此 $$\\frac{1}{2}+...+\\frac{1}{n-1}=O(logn)$$ 。\n\n    则有：\n\n    $$\n    \\begin{aligned}\n    T(n)&=(n+1)\\times O(logn)\\\\\n    &=O(n)\\times O(logn)\\\\\n    &=O(nlogn)\n    \\end{aligned}\n    $$\n\n### 额外空间复杂度\n\n考虑栈深度，额外空间复杂度为O（logn）。由于快速排序主要步骤在于分，因此必须自上而下的进行递归，无法避免栈深度。\n\n### 原地排序\n\n虽然快速排序有额外空间复杂度，但并不妨碍它是一个原地排序。\n\n### 不稳定\n\n堆排序在分操作时将元素左右交换，会破坏稳定性。\n\n### 链表形式特点\n\n- 时间复杂度不变\n- 空间复杂度不变\n- 变为稳定排序※\n\n## 手写时的易错点\n\n- 分成左右子序列时最好完全分开（一边用`<=`一边用`>`），不然容易造成死循环。\n- 分左右子序列时仔细考虑最初下标位置与最终下标位置，以及对应位置的值的大小。\n- 不要忘记递归的结束条件。\n\n# 归并排序\n\n## 思想\n\n分治法：先把两个子序列各自排好序，然后再合并两个子序列。即：简单分割，复杂合并。主要步骤在于合并。\n\n## 要点\n\n- 时间复杂度推导式：T(n) = 2T(n/2) + T(合)\n- 平均、最好、最坏时间复杂度都是O（nlogn），推导过程略。\n- 额外空间复杂度为O（n），合并时必须准备额外空间。但由于主要步骤在于合并，可以自下而上地进行迭代合并，可以不使用栈。\n- 非原地排序\n- 稳定排序\n\n### 链表形式\n\n- 时间复杂度不变\n- 额外空间复杂度变为O(1)※\n- 稳定排序\n- 只能使用迭代形式，不能使用递归形式\n\n## 易错点\n\n- 合并时一边结束时另一边还未结束，需要把那一边也放入合并后序列中\n- 保持稳定排序：合并时左序列等于右序列时也采用左序列\n- 不要忘记递归结束条件\n- 不要忘记循环递进条件\n\n## 进阶\n\n- 原地归并排序：时间复杂度为O（log^2n），牺牲合并的时间复杂度进行原地排序。\n- 多路归并排序：使用竞标树，多路归并，用于磁盘IO。\n\n# 插入排序\n\n## 思想\n\n有序序列不断扩张，每次从无序序列中取出元素加入有序序列，直至长度为N则完成排序。\n\n每次将无序序列当前元素插入有序序列，复杂度取决于有序序列。\n\n## 要点\n\n- 最坏、平均时间复杂度：O（n2）\n- 最好时间复杂度：基本有序情况下，O（n）\n- 额外空间复杂度：O（1）\n- 原地排序\n- 稳定排序\n- 每次插入时都要移动序列，写次数较多\n- 若查找插入位置时使用二分法查找，则可加快时间。（但不足以对时间复杂度造成影响，且最好时间复杂度也会上升为O(nlogn)）\n\n### 链表形式\n\n- 最好，最坏，平均时间复杂度不变\n- 额外空间复杂度不变\n- 稳定排序\n- 插入时不再需要移动序列，但也不能使用二分法查找\n\n## 进阶——希尔排序\n\n- 要点：\n\n    插入排序的优点在于当序列基本有序时，时间复杂度可逼近为O(n)。\n\n    但插入时移动有序序列中元素所耗时间较多，而每次只移动一步。但实际上当序列分布均匀时，有序序列中排靠后的元素在整个序列中也会排靠后。\n\n    可以把序列分为几个大步长序列，在最初的几次插入放开移动步长，让大的元素直接移动到较后位置。再往后慢慢缩小步长，此时序列基本有序，可以利用基本有序时插入排序的优势。\n\n- 时间复杂度\n    1. 当步长为2^i时，不能使时间复杂度缩短为O(nlogn)。因为一个子序列所有元素有可能比另一个子序列最大元素都要大，这时插入排序仍需进行约n^2次操作\n    2. 当步长为2^i时效率较低，因为当步长为4已经有序时，步长为2再比较是无用比较。但由于1.的问题，不能节省比较时间。\n    3. 当步长之间最小公约数较少，甚至互质时，无用比较次数会降低。\n    4. 最坏时间复杂度下限为 $$O(nlog^2n)$$ （当步长采用 $$2^i3^j$$ 时），但一般希尔排序平均时间复杂度都为 $$O(n^{\\frac{3}{2}})$$\n- 额外空间复杂度O(1)\n- 原地排序\n- 不稳定排序：希尔排序步长较大时会发生前后跳转。\n- 不能写为链表形式\n\n# 选择排序\n\n## 思想\n\n有序序列不断扩张，每次从无序序列中取出元素加入有序序列，直至长度为N则完成排序。\n\n每次将选无序序列中最小元素加到有序序列末尾，复杂度取决于无序序列。\n\n## 要点\n\n- 最坏、平均时间复杂度：O（n2）\n- 最好时间复杂度：O（n2），如能保证无序部分的最小元素所在位置一定（堆排序），能降低时间复杂度\n- 额外空间复杂度：O（1）\n- 原地排序\n- 不稳定排序（采用元素交换策略时）\n- 每次找到最小元素后，只需交换一次位置即可，写次数较少。\n- 若找到最小元素后，不直接交换而是进行数组移动，则可进行稳定排序，但写次数变多，与插入排序相比没有优势，也不能使用二分查找进行简化。\n\n### 链表形式\n\n- 最好，最坏，平均时间复杂度不变\n- 额外空间复杂度不变\n- 变为稳定排序※（因为链表不需要数组移动，稳定排序方式的缺点得以消除）\n\n## 进阶——堆排序\n\n- 要点：\n\n    选择排序中耗时最多的是取出无序序列中最小值的时间，需要遍历整个无序序列。\n\n    但实际上我们只关心无序序列中的最小值，而不关心其他值的位置。通过将无序序列建为堆，减少选择时间，降低总的时间复杂度。\n\n- 时间复杂度O（nlogn）\n- 额外空间复杂度O（1）\n- 原地排序\n- 不稳定排序\n- 操作时间复杂度：每次向下比较关注一个节点与其左右子堆顶元素，每次向上比较只关注节点与其父元素（大顶堆，堆大小为n）\n    - 下沉：向下比较，若顶元素不是最大，将顶元素与较大的子堆堆顶元素交换。递归处理该子堆顶元素，直到向下比较顶元素最大。\n\n        最好时间复杂度O（1），最坏时间复杂度为O（h）=O（logn），平均O（logn）\n\n    - 上浮：向上比较，若元素比其上层要大，交换该元素与其上层元素。递归处理其上层元素，直到向上比较不比上层要大。\n\n        最好时间复杂度O（1），最坏时间复杂度O（h）=O（logn），平均O（logn）\n\n    - 入堆：堆扩容一位，将新元素插到尾部，将该元素上浮，最坏、平均时间复杂度O（logn）\n    - 出堆：取出堆顶元素，将尾部放到堆顶，将该元素下沉，最坏、平均时间复杂度O（logn）\n    - 缺点：通常堆尾元素较小，出堆时将堆尾元素放到堆顶再下沉基本要沉到堆底，无用比较较多\n- 建堆时间复杂度O（n）\n    - 策略1：从头开始建堆，逐个元素插入，时间复杂度取决于最后一层，时间复杂度为O（nlogn）\n        - 每次将堆扩容一位，将末尾元素上浮。\n        - 时间复杂度推导：\n\n            每次插入时间：\n\n            $$\n            \\begin{aligned} T(i) &= h\\\\\n            &= logi\n            \\end{aligned}\n            $$\n\n            则有总时间：\n\n            $$\n            \\begin{aligned}\n            T(n) &= \\sum_{i=0}^{n}logi\\\\\n            &= 1\\times1 + 2\\times2+ 3\\times4 + ...+h\\times \\frac{n}{2} \\\\\n            \\\\\n            2T(n) &= 1\\times2 + 2\\times4+ 3\\times8 + ...+h\\times n \\\\\n            \\\\\n            2T(n)-T(n) &= h\\times n - (1+2+4+...+2^{h-1}) \\\\\n            &= h\\times n - O(2^h) \\\\\n            \\\\\n            T(n) &= nlogn - O(2^h) \\\\\n            &= O(nlogn)\n            \\end{aligned}\n            $$\n\n            即时间复杂度为 $$O(nlogn)$$\n\n    - 策略2：从后开始建堆，小堆合并（逐个元素下沉），时间复杂度为O（n）\n        - 每次堆合并时，有三部分：左子堆，右子堆，顶元素。下沉顶元素。\n        - 时间复杂度推导：\n\n            第i个元素合并时，时间为：\n\n            $$\n            \\begin{aligned}\n            T(i) &= h_{子堆}\n            \\end{aligned}\n            $$\n\n            则有总时间：\n\n            $$\n            \\begin{aligned}\n            T(n) &= \\sum_{i=0}^{n} (h_{子堆}) \\\\\n            &= h + (h-1)\\times2 + ... + 2 \\times \\frac{n}{4} + 1 \\times\\frac{n}{2}\\\\\n            \\\\\n            2T(n) &= h \\times 2 + (h-1) \\times 4 + ... + 2 \\times \\frac{n}{2} + n \\\\\n            \\\\\n            2T(n) - T(n) &= n + \\frac{n}{2} + ... + 2 - h \\\\\n            \\\\\n            T(n) &= O(n) - h \\\\ \n            &= O(n)\n            \\end{aligned}\n            $$\n\n            即时间复杂度为 $$O(n)$$ \n\n        - 虽说每步是做一个小堆合并，但实际上从堆尾到堆头遍历，相当于仅关注元素没有稳定，相当于可以直接使用下沉操作。\n\n# 基于比较的排序算法时间复杂度下限：逆序对思想\n\n基于比较的排序算法可以看作序列逆序对的消除。完全随机序列逆序对数量为O(n^2)，若一次元操作只消除一个逆序对，则时间复杂度不会低于O(n^2)。降低时间复杂度关键在于一次消除多个逆序对。\n\n1. 希尔排序通过增大最初的步长来企图一次消除多个逆序对。\n2. 归并排序消除逆序对最主要在于归并步骤。最后几次合并每个子步骤用O(1)时间消除O(n)个逆序对。\n3. 快速排序消除逆序对最主要在于划分步骤。每个划分步骤用O(n)时间消除O(n)+O(左长度×右长度)个逆序对。\n4. 堆排序逆序对消除方式比较Tricky，但可以看出消除逆序对大致在于出堆步骤，通过O(logn)时间复杂度消除O(n)个逆序对。（左小右大排序时需要建立左大右小的大顶堆，建堆时基本没有消除逆序对）\n\n# 最后\n\n这篇文章我们主要关注了排序算法中的大头——基于比较的排序算法。在下篇文章，我们再来看一下不基于比较的排序算法，以及外排序与并行排序。","title":"排序算法","abstract":"我们知道排序是算法入门基本功，排序算法有多重要想必也不需要我在这里说明了。因此这一篇就按着我的理解，聊一聊排序算法。\n当然我不打算随便弄个什么十大排序算法或是经典排序总结之类响当当的名头，各个算法走马看花一样拉出来遛一遍，最后变得跟网上搜索到的其他讲排序的文章一样换汤不换药。你会发现这篇文章的结构跟在网上搜索到的任何讲排序的文章都有所不同：\n在这篇文章里，你会发现你找不到冒泡排序——因为我认为冒泡排序只不过是一种低效率的选择排序。","length":342,"created_at":"2021-01-11T22:57:10.000Z","updated_at":"2024-04-14T13:30:33.000Z","tags":["数据结构","算法","排序"],"license":false}},"nextInfo":{"pathMapping":{"filePath":"public/content/articles/2021-01-11-Sort-algorithm.md","pagePath":"/articles/Sort-algorithm","slug":"Sort-algorithm"},"meta":{"content":"\n# 序言\n\n我们知道排序是算法入门基本功，排序算法有多重要想必也不需要我在这里说明了。因此这一篇就按着我的理解，聊一聊排序算法。\n\n当然我不打算随便弄个什么十大排序算法或是经典排序总结之类响当当的名头，各个算法走马看花一样拉出来遛一遍，最后变得跟网上搜索到的其他讲排序的文章一样换汤不换药。你会发现这篇文章的结构跟在网上搜索到的任何讲排序的文章都有所不同：\n\n在这篇文章里，你会发现你找不到冒泡排序——因为我认为冒泡排序只不过是一种低效率的选择排序。\n\n你会发现堆排序被当成是选择排序的一种优化——因为我认为堆排序主要在于使用了堆这种数据结构，而总体思想与选择排序相比没有太大变化。\n\n你还会找到其他与别的文章不一样的地方。因为这篇文章是我按照自己的理解来写的，我脑子里是这样想的，那文章里就是这样写的。我会按照我的理解，从纵向与横向两个维度，来理清楚各个排序算法的特性与异同。\n\n# 整篇文章的要点\n\n整篇文章以纵向——算法分类、以及横向——算法评价两个维度来进行组织。\n\n排序算法可以按照以下方式来进行分类：\n\n- 基于比较的排序算法\n    - 基于分治思想\n        - 快速排序\n        - 归并排序\n    - 基于有序区域扩展\n        - 插入排序\n        - 选择排序\n- 不基于比较的排序算法\n    - 计数排序\n    - 桶排序\n    - 基数排序\n\n文章中还会讲一讲为什么会这么分，每种分类有什么共性，分类之间有什么差异。此外，在最后还会稍微提一提外部排序与适用于并行运算的排序等。\n\n而对于纵向分类中的每一个端点，我们又会从以下五个方面，来对各个算法进行一个总体评价：\n\n- 时间复杂度（最坏，最好，平均※）\n- 空间复杂度\n- 是否原地排序\n- 是否稳定排序\n- 能否用于链表排序\n\n而由于复杂度主要只关注数量级，因此在这篇文章里会在不影响计算结果的前提下对复杂度计算进行适当的近似与简化。\n\n# 快排\n\n## 思想\n\n分治法：先把序列分为小的部分和大的部分，再将两部分分别排序。即：复杂分割，简单合并，主要操作在于分割。\n\n## 要点\n\n### 时间复杂度\n\n推导式：T(n) = T(找) + T(左) + T(右) = O(n) + 两个子问题时间复杂度。\n\n- 最好时间复杂度为每次都正好找到最中间的一个数时时间复杂度为O（nlogn）。证明略。\n- 最坏时间复杂度为每次都正好找到最旁边的数时时间复杂度为O(n^2)。证明略。\n- 平均时间复杂度为O（nlogn），推导式如下：\n\n    快速排序每一步中，将元素分为左右两边需要遍历整个列表，耗时T(n)。假设最后定位的元素为最终第i个元素，则两个子问题复杂度分别为T(i)和T(n-i-1)。\n\n    则有：\n\n    $$\n    \\begin{aligned}\n    T(n) &= n + \\frac{\\sum_{i=0}^{n-1}{T(i)+T(n-i-1)}}{n} \\\\\n    &=n + \\frac{2}{n}\\times\\sum_{i=0}^{n-1}{T(i)} \\\\\n    \\end{aligned}\n    $$\n\n    令 $$\\sum_{i=0}^{n}T(i) = Sum(n)$$ ，即有：\n\n    $$\n    \\begin{aligned}\n    T(n) &= n + \\frac{2}{n} \\times Sum(n-1) \\\\\n    Sum(n) &= \\frac{n+1}{2}T(n+1) - \\frac{n+1}{2}(n+1)\n    \\end{aligned}\n    $$\n\n    错位相减：\n\n    $$\n    \\begin{aligned}\n    Sum(n) - Sum(n-1) &= \\frac{n+1}{2}T(n+1) - \\frac{n+1}{2}(n+1) - \\frac{n}{2}T(n) + \\frac{n}{2}(n) \n    \\\\\n    T(n) &= \\frac{n+1}{2}T(n+1) - \\frac{n}{2}T(n) - \\frac{2n+1}{2} \n    \\\\\n    \\frac{T(n+1)}{n+2} &= \\frac{T(n)}{n+1}+\\frac{2n+1}{(n+1)(n+2)} \n    \\\\\n    &= \\frac{T(n)}{n+1}+\\frac{1}{n}+\\frac{1}{n+1} \n    \\\\\n    &=...\n    \\\\\n    &= \\frac{T(1)}{2}+1+2\\times(\\frac{1}{2}+\\frac{1}{3}+...+\\frac{1}{n})+\\frac{1}{n+1}\n    \\\\\n    \\\\\n    \\frac{T(n)}{n+1}&=\\frac{T(1)}{2}+1+2\\times(\\frac{1}{2}+...+\\frac{1}{n-1})+\\frac{1}{n}\n    \\\\\n    &= O(1)+O(1)+O(logn)+O(\\frac{1}{n})\n    \\\\\n    &= O(logn)\n    \\end{aligned}\n    $$\n\n    其中由于 $$\\frac{1}{x}=\\frac{d(logx)}{dx}$$ ，因此 $$\\frac{1}{2}+...+\\frac{1}{n-1}=O(logn)$$ 。\n\n    则有：\n\n    $$\n    \\begin{aligned}\n    T(n)&=(n+1)\\times O(logn)\\\\\n    &=O(n)\\times O(logn)\\\\\n    &=O(nlogn)\n    \\end{aligned}\n    $$\n\n### 额外空间复杂度\n\n考虑栈深度，额外空间复杂度为O（logn）。由于快速排序主要步骤在于分，因此必须自上而下的进行递归，无法避免栈深度。\n\n### 原地排序\n\n虽然快速排序有额外空间复杂度，但并不妨碍它是一个原地排序。\n\n### 不稳定\n\n堆排序在分操作时将元素左右交换，会破坏稳定性。\n\n### 链表形式特点\n\n- 时间复杂度不变\n- 空间复杂度不变\n- 变为稳定排序※\n\n## 手写时的易错点\n\n- 分成左右子序列时最好完全分开（一边用`<=`一边用`>`），不然容易造成死循环。\n- 分左右子序列时仔细考虑最初下标位置与最终下标位置，以及对应位置的值的大小。\n- 不要忘记递归的结束条件。\n\n# 归并排序\n\n## 思想\n\n分治法：先把两个子序列各自排好序，然后再合并两个子序列。即：简单分割，复杂合并。主要步骤在于合并。\n\n## 要点\n\n- 时间复杂度推导式：T(n) = 2T(n/2) + T(合)\n- 平均、最好、最坏时间复杂度都是O（nlogn），推导过程略。\n- 额外空间复杂度为O（n），合并时必须准备额外空间。但由于主要步骤在于合并，可以自下而上地进行迭代合并，可以不使用栈。\n- 非原地排序\n- 稳定排序\n\n### 链表形式\n\n- 时间复杂度不变\n- 额外空间复杂度变为O(1)※\n- 稳定排序\n- 只能使用迭代形式，不能使用递归形式\n\n## 易错点\n\n- 合并时一边结束时另一边还未结束，需要把那一边也放入合并后序列中\n- 保持稳定排序：合并时左序列等于右序列时也采用左序列\n- 不要忘记递归结束条件\n- 不要忘记循环递进条件\n\n## 进阶\n\n- 原地归并排序：时间复杂度为O（log^2n），牺牲合并的时间复杂度进行原地排序。\n- 多路归并排序：使用竞标树，多路归并，用于磁盘IO。\n\n# 插入排序\n\n## 思想\n\n有序序列不断扩张，每次从无序序列中取出元素加入有序序列，直至长度为N则完成排序。\n\n每次将无序序列当前元素插入有序序列，复杂度取决于有序序列。\n\n## 要点\n\n- 最坏、平均时间复杂度：O（n2）\n- 最好时间复杂度：基本有序情况下，O（n）\n- 额外空间复杂度：O（1）\n- 原地排序\n- 稳定排序\n- 每次插入时都要移动序列，写次数较多\n- 若查找插入位置时使用二分法查找，则可加快时间。（但不足以对时间复杂度造成影响，且最好时间复杂度也会上升为O(nlogn)）\n\n### 链表形式\n\n- 最好，最坏，平均时间复杂度不变\n- 额外空间复杂度不变\n- 稳定排序\n- 插入时不再需要移动序列，但也不能使用二分法查找\n\n## 进阶——希尔排序\n\n- 要点：\n\n    插入排序的优点在于当序列基本有序时，时间复杂度可逼近为O(n)。\n\n    但插入时移动有序序列中元素所耗时间较多，而每次只移动一步。但实际上当序列分布均匀时，有序序列中排靠后的元素在整个序列中也会排靠后。\n\n    可以把序列分为几个大步长序列，在最初的几次插入放开移动步长，让大的元素直接移动到较后位置。再往后慢慢缩小步长，此时序列基本有序，可以利用基本有序时插入排序的优势。\n\n- 时间复杂度\n    1. 当步长为2^i时，不能使时间复杂度缩短为O(nlogn)。因为一个子序列所有元素有可能比另一个子序列最大元素都要大，这时插入排序仍需进行约n^2次操作\n    2. 当步长为2^i时效率较低，因为当步长为4已经有序时，步长为2再比较是无用比较。但由于1.的问题，不能节省比较时间。\n    3. 当步长之间最小公约数较少，甚至互质时，无用比较次数会降低。\n    4. 最坏时间复杂度下限为 $$O(nlog^2n)$$ （当步长采用 $$2^i3^j$$ 时），但一般希尔排序平均时间复杂度都为 $$O(n^{\\frac{3}{2}})$$\n- 额外空间复杂度O(1)\n- 原地排序\n- 不稳定排序：希尔排序步长较大时会发生前后跳转。\n- 不能写为链表形式\n\n# 选择排序\n\n## 思想\n\n有序序列不断扩张，每次从无序序列中取出元素加入有序序列，直至长度为N则完成排序。\n\n每次将选无序序列中最小元素加到有序序列末尾，复杂度取决于无序序列。\n\n## 要点\n\n- 最坏、平均时间复杂度：O（n2）\n- 最好时间复杂度：O（n2），如能保证无序部分的最小元素所在位置一定（堆排序），能降低时间复杂度\n- 额外空间复杂度：O（1）\n- 原地排序\n- 不稳定排序（采用元素交换策略时）\n- 每次找到最小元素后，只需交换一次位置即可，写次数较少。\n- 若找到最小元素后，不直接交换而是进行数组移动，则可进行稳定排序，但写次数变多，与插入排序相比没有优势，也不能使用二分查找进行简化。\n\n### 链表形式\n\n- 最好，最坏，平均时间复杂度不变\n- 额外空间复杂度不变\n- 变为稳定排序※（因为链表不需要数组移动，稳定排序方式的缺点得以消除）\n\n## 进阶——堆排序\n\n- 要点：\n\n    选择排序中耗时最多的是取出无序序列中最小值的时间，需要遍历整个无序序列。\n\n    但实际上我们只关心无序序列中的最小值，而不关心其他值的位置。通过将无序序列建为堆，减少选择时间，降低总的时间复杂度。\n\n- 时间复杂度O（nlogn）\n- 额外空间复杂度O（1）\n- 原地排序\n- 不稳定排序\n- 操作时间复杂度：每次向下比较关注一个节点与其左右子堆顶元素，每次向上比较只关注节点与其父元素（大顶堆，堆大小为n）\n    - 下沉：向下比较，若顶元素不是最大，将顶元素与较大的子堆堆顶元素交换。递归处理该子堆顶元素，直到向下比较顶元素最大。\n\n        最好时间复杂度O（1），最坏时间复杂度为O（h）=O（logn），平均O（logn）\n\n    - 上浮：向上比较，若元素比其上层要大，交换该元素与其上层元素。递归处理其上层元素，直到向上比较不比上层要大。\n\n        最好时间复杂度O（1），最坏时间复杂度O（h）=O（logn），平均O（logn）\n\n    - 入堆：堆扩容一位，将新元素插到尾部，将该元素上浮，最坏、平均时间复杂度O（logn）\n    - 出堆：取出堆顶元素，将尾部放到堆顶，将该元素下沉，最坏、平均时间复杂度O（logn）\n    - 缺点：通常堆尾元素较小，出堆时将堆尾元素放到堆顶再下沉基本要沉到堆底，无用比较较多\n- 建堆时间复杂度O（n）\n    - 策略1：从头开始建堆，逐个元素插入，时间复杂度取决于最后一层，时间复杂度为O（nlogn）\n        - 每次将堆扩容一位，将末尾元素上浮。\n        - 时间复杂度推导：\n\n            每次插入时间：\n\n            $$\n            \\begin{aligned} T(i) &= h\\\\\n            &= logi\n            \\end{aligned}\n            $$\n\n            则有总时间：\n\n            $$\n            \\begin{aligned}\n            T(n) &= \\sum_{i=0}^{n}logi\\\\\n            &= 1\\times1 + 2\\times2+ 3\\times4 + ...+h\\times \\frac{n}{2} \\\\\n            \\\\\n            2T(n) &= 1\\times2 + 2\\times4+ 3\\times8 + ...+h\\times n \\\\\n            \\\\\n            2T(n)-T(n) &= h\\times n - (1+2+4+...+2^{h-1}) \\\\\n            &= h\\times n - O(2^h) \\\\\n            \\\\\n            T(n) &= nlogn - O(2^h) \\\\\n            &= O(nlogn)\n            \\end{aligned}\n            $$\n\n            即时间复杂度为 $$O(nlogn)$$\n\n    - 策略2：从后开始建堆，小堆合并（逐个元素下沉），时间复杂度为O（n）\n        - 每次堆合并时，有三部分：左子堆，右子堆，顶元素。下沉顶元素。\n        - 时间复杂度推导：\n\n            第i个元素合并时，时间为：\n\n            $$\n            \\begin{aligned}\n            T(i) &= h_{子堆}\n            \\end{aligned}\n            $$\n\n            则有总时间：\n\n            $$\n            \\begin{aligned}\n            T(n) &= \\sum_{i=0}^{n} (h_{子堆}) \\\\\n            &= h + (h-1)\\times2 + ... + 2 \\times \\frac{n}{4} + 1 \\times\\frac{n}{2}\\\\\n            \\\\\n            2T(n) &= h \\times 2 + (h-1) \\times 4 + ... + 2 \\times \\frac{n}{2} + n \\\\\n            \\\\\n            2T(n) - T(n) &= n + \\frac{n}{2} + ... + 2 - h \\\\\n            \\\\\n            T(n) &= O(n) - h \\\\ \n            &= O(n)\n            \\end{aligned}\n            $$\n\n            即时间复杂度为 $$O(n)$$ \n\n        - 虽说每步是做一个小堆合并，但实际上从堆尾到堆头遍历，相当于仅关注元素没有稳定，相当于可以直接使用下沉操作。\n\n# 基于比较的排序算法时间复杂度下限：逆序对思想\n\n基于比较的排序算法可以看作序列逆序对的消除。完全随机序列逆序对数量为O(n^2)，若一次元操作只消除一个逆序对，则时间复杂度不会低于O(n^2)。降低时间复杂度关键在于一次消除多个逆序对。\n\n1. 希尔排序通过增大最初的步长来企图一次消除多个逆序对。\n2. 归并排序消除逆序对最主要在于归并步骤。最后几次合并每个子步骤用O(1)时间消除O(n)个逆序对。\n3. 快速排序消除逆序对最主要在于划分步骤。每个划分步骤用O(n)时间消除O(n)+O(左长度×右长度)个逆序对。\n4. 堆排序逆序对消除方式比较Tricky，但可以看出消除逆序对大致在于出堆步骤，通过O(logn)时间复杂度消除O(n)个逆序对。（左小右大排序时需要建立左大右小的大顶堆，建堆时基本没有消除逆序对）\n\n# 最后\n\n这篇文章我们主要关注了排序算法中的大头——基于比较的排序算法。在下篇文章，我们再来看一下不基于比较的排序算法，以及外排序与并行排序。","title":"排序算法","abstract":"我们知道排序是算法入门基本功，排序算法有多重要想必也不需要我在这里说明了。因此这一篇就按着我的理解，聊一聊排序算法。\n当然我不打算随便弄个什么十大排序算法或是经典排序总结之类响当当的名头，各个算法走马看花一样拉出来遛一遍，最后变得跟网上搜索到的其他讲排序的文章一样换汤不换药。你会发现这篇文章的结构跟在网上搜索到的任何讲排序的文章都有所不同：\n在这篇文章里，你会发现你找不到冒泡排序——因为我认为冒泡排序只不过是一种低效率的选择排序。","length":342,"created_at":"2021-01-11T22:57:10.000Z","updated_at":"2024-04-14T13:30:33.000Z","tags":["数据结构","算法","排序"],"license":false}}}},"__N_SSG":true}