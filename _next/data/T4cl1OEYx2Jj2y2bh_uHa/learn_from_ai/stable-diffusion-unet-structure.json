{"pageProps":{"slug":"stable-diffusion-unet-structure","tags":[{"tag":"深度学习","slug":"深度学习","path":"/tags/深度学习","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"Stable Diffusion","slug":"stable-diffusion","path":"/tags/stable-diffusion","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"LoRA","slug":"lora","path":"/tags/lora","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"参数高效微调","slug":"参数高效微调","path":"/tags/参数高效微调","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"模型训练","slug":"模型训练","path":"/tags/模型训练","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"学习笔记","slug":"学习笔记","path":"/tags/学习笔记","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/opencv-coordinate-system-conventions"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    em: \"em\",\n    figure: \"figure\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    hr: \"hr\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    strong: \"strong\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {CodeBlockMermaid, ObsidianCallout} = _components;\n  if (!CodeBlockMermaid) _missingMdxReference(\"CodeBlockMermaid\", true);\n  if (!ObsidianCallout) _missingMdxReference(\"ObsidianCallout\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(ObsidianCallout, {\n      type: \"summary\",\n      title: \"\",\n      children: _jsx(_components.p, {\n        children: \"以下内容为 Cursor 中拥有 codebase 上下文的情况下与 claude-3.7-sonnet 的对话记录\"\n      })\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-train_text_to_image_lorapy-这段代码中如何体现-lora-使用两个低秩矩阵进行微调-的步骤\",\n      children: _jsx(_components.a, {\n        href: \"#q-train_text_to_image_lorapy-这段代码中如何体现-lora-使用两个低秩矩阵进行微调-的步骤\",\n        children: \"Q: @train_text_to_image_lora.py 这段代码中如何体现 LoRA “使用两个低秩矩阵进行微调” 的步骤？\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"train_text_to_image_lora.py\"\n            })\n          })\n        })\n      }), \" 脚本中，LoRA（Low-Rank Adaptation）通过在模型的特定层中插入低秩矩阵来实现微调。这种方法通过添加两个低秩矩阵来调整模型的权重，而不改变原始权重，从而实现参数高效的微调。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下是脚本中如何体现 LoRA 使用两个低秩矩阵进行微调的步骤：\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"1-lora-配置\",\n      children: _jsx(_components.a, {\n        href: \"#1-lora-配置\",\n        children: \"1. LoRA 配置\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在脚本中，LoRA 的配置通常通过 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"LoraConfig\"\n            })\n          })\n        })\n      }), \" 类来定义。这个配置包括低秩矩阵的秩（\", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"rank\"\n            })\n          })\n        })\n      }), \"）和其他参数：\"]\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"unet_lora_config \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" LoraConfig(\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    r\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"args.rank,  \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 低秩矩阵的秩\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    lora_alpha\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"args.rank,  \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# LoRA 的缩放因子\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    init_lora_weights\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"gaussian\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",  \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 初始化权重的方法\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    target_modules\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"to_k\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"to_q\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"to_v\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"to_out.0\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"],  \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 目标模块\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"2-添加-lora-层\",\n      children: _jsx(_components.a, {\n        href: \"#2-添加-lora-层\",\n        children: \"2. 添加 LoRA 层\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在模型中插入 LoRA 层是通过调用 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"add_adapter\"\n            })\n          })\n        })\n      }), \" 方法实现的：\"]\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"unet.add_adapter(unet_lora_config)\"\n            })\n          })\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这个方法会在指定的目标模块中插入两个低秩矩阵 (A) 和 (B)，用于调整模型的权重。具体来说，LoRA 在模型的注意力层中插入这些矩阵，以便在不改变原始权重的情况下进行微调。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"3-训练过程中的权重更新\",\n      children: _jsx(_components.a, {\n        href: \"#3-训练过程中的权重更新\",\n        children: \"3. 训练过程中的权重更新\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在训练过程中，只有 LoRA 插入的低秩矩阵的参数是可训练的。原始模型的权重保持冻结状态。这是通过以下代码实现的：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# freeze parameters of models to save more memory\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"unet.requires_grad_(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"False\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"vae.requires_grad_(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"False\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"text_encoder.requires_grad_(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"False\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"通过这种方式，训练过程只会更新 LoRA 层的参数，而不会影响原始模型的权重。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"4-参数更新\",\n      children: _jsx(_components.a, {\n        href: \"#4-参数更新\",\n        children: \"4. 参数更新\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在训练循环中，反向传播和参数更新步骤只会影响 LoRA 层的参数：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# Backpropagate\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"accelerator.backward(loss)\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"if\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" accelerator.sync_gradients:\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    params_to_clip \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" lora_layers\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    accelerator.clip_grad_norm_(params_to_clip, args.max_grad_norm)\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"optimizer.step()\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"lr_scheduler.step()\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"optimizer.zero_grad()\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"这里的 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"lora_layers\"\n            })\n          })\n        })\n      }), \" 是一个过滤器，只包含 LoRA 层的可训练参数。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"总结\",\n      children: _jsx(_components.a, {\n        href: \"#总结\",\n        children: \"总结\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"通过在模型的特定层中插入两个低秩矩阵，LoRA 实现了参数高效的微调。这种方法允许在不改变原始模型权重的情况下，通过调整低秩矩阵来适应新的数据分布，从而实现高效的模型微调。\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-unet-是个什么样的结构\",\n      children: _jsx(_components.a, {\n        href: \"#q-unet-是个什么样的结构\",\n        children: \"Q: unet 是个什么样的结构？\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"UNet 是一种常用于图像生成和分割任务的神经网络架构。它最初是在医学图像分割领域中引入的，但由于其强大的特性和灵活性，UNet 也被广泛应用于其他计算机视觉任务，包括图像生成、去噪和超分辨率等。\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"unet-的基本结构\",\n      children: _jsx(_components.a, {\n        href: \"#unet-的基本结构\",\n        children: \"UNet 的基本结构\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"UNet 的结构可以分为两个主要部分：编码器（下采样路径）和解码器（上采样路径），中间通过跳跃连接（skip connections）相连。\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"编码器（下采样路径）\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"由一系列卷积层和池化层组成。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"每个卷积层通常后接一个激活函数（如 ReLU）。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"池化层用于逐步减少特征图的空间维度，同时增加特征的抽象程度。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"解码器（上采样路径）\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"由一系列上采样层（如反卷积或上采样）和卷积层组成。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"逐步恢复特征图的空间维度。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"使用跳跃连接将编码器中相应层的特征图与解码器中的特征图连接，以保留细节信息。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"跳跃连接（Skip Connections）\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"将编码器中的特征图直接连接到解码器中相应层的特征图。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"这种连接方式有助于保留输入图像的细节信息，改善生成结果的质量。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"unet-在-stable-diffusion-中的应用\",\n      children: _jsx(_components.a, {\n        href: \"#unet-在-stable-diffusion-中的应用\",\n        children: \"UNet 在 Stable Diffusion 中的应用\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在 Stable Diffusion 模型中，UNet 作为核心组件用于处理图像的潜在表示。具体来说，UNet 在扩散模型中用于预测噪声残差，从而逐步生成高质量的图像。\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"输入\"\n        }), \"：UNet 接收一个带有噪声的潜在表示（通常是一个低维的特征图）。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"输出\"\n        }), \"：UNet 输出一个与输入相同大小的特征图，表示对噪声的预测。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"训练目标\"\n        }), \"：通过最小化预测噪声与真实噪声之间的差异，UNet 学会如何去除噪声，从而生成清晰的图像。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"unet-的优势\",\n      children: _jsx(_components.a, {\n        href: \"#unet-的优势\",\n        children: \"UNet 的优势\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"高效的特征提取\"\n        }), \"：通过编码器提取多尺度特征。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"细节保留\"\n        }), \"：通过跳跃连接保留输入图像的细节信息。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"灵活性\"\n        }), \"：可以适应不同的输入尺寸和任务需求。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"UNet 的这种结构使其在图像生成任务中表现出色，特别是在需要高分辨率输出和细节保留的场景中。\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-为什么这里-unet-vae--tokenizer-等几个模型都是从同一个路径加载的\",\n      children: _jsx(_components.a, {\n        href: \"#q-为什么这里-unet-vae--tokenizer-等几个模型都是从同一个路径加载的\",\n        children: \"Q: 为什么这里 unet、 vae 、 tokenizer 等几个模型都是从同一个路径加载的？\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在这个代码片段中，\", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"unet\"\n            })\n          })\n        })\n      }), \"、\", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"vae\"\n            })\n          })\n        })\n      }), \"、\", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"tokenizer\"\n            })\n          })\n        })\n      }), \" 和其他组件都是从同一个路径加载的，这是因为它们都是 Stable Diffusion 模型的一部分。Stable Diffusion 是一个复杂的生成模型，通常由多个子模块组成，每个子模块负责不同的任务。以下是这些组件的作用和为什么它们从同一路径加载的原因：\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"1-统一的模型路径\",\n      children: _jsx(_components.a, {\n        href: \"#1-统一的模型路径\",\n        children: \"1. 统一的模型路径\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"路径一致性\"\n        }), \"：所有这些组件都从同一个路径加载，因为它们通常被打包在一个预训练模型中。这个路径通常指向一个包含所有必要文件的目录或一个 Hugging Face Hub 上的模型仓库。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"版本控制\"\n        }), \"：通过从同一个路径加载，确保所有组件使用的是同一个版本的模型，避免版本不匹配导致的兼容性问题。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"2-各个组件的作用\",\n      children: _jsx(_components.a, {\n        href: \"#2-各个组件的作用\",\n        children: \"2. 各个组件的作用\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsxs(_components.strong, {\n            children: [\"UNet (\", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"unet\"\n                  })\n                })\n              })\n            }), \")\"]\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"负责处理图像的潜在表示，预测噪声残差。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"在扩散模型中用于逐步生成高质量的图像。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsxs(_components.strong, {\n            children: [\"VAE (\", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"vae\"\n                  })\n                })\n              })\n            }), \")\"]\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"自动编码器，用于将图像编码为潜在空间表示，并从潜在空间解码回图像。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"在 Stable Diffusion 中，VAE 用于将输入图像转换为潜在表示，供 UNet 处理。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsxs(_components.strong, {\n            children: [\"Tokenizer (\", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"tokenizer\"\n                  })\n                })\n              })\n            }), \")\"]\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"用于将文本输入（如生成图像的描述）转换为模型可理解的标记。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"在文本到图像生成任务中，tokenizer 将文本描述转换为输入 ID，供文本编码器使用。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsxs(_components.strong, {\n            children: [\"Text Encoder (\", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"text_encoder\"\n                  })\n                })\n              })\n            }), \")\"]\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"将文本输入编码为特征向量，供 UNet 使用。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"在生成过程中，文本编码器提供条件信息，指导图像生成。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsxs(_components.strong, {\n            children: [\"Noise Scheduler (\", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"noise_scheduler\"\n                  })\n                })\n              })\n            }), \")\"]\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"控制扩散过程中的噪声添加和去除。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"在训练和推理过程中，调度器决定在每个时间步添加多少噪声。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"3-统一加载的好处\",\n      children: _jsx(_components.a, {\n        href: \"#3-统一加载的好处\",\n        children: \"3. 统一加载的好处\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"简化管理\"\n        }), \"：从同一位置加载所有组件简化了模型管理和部署。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"一致性\"\n        }), \"：确保所有组件在同一训练配置下工作，避免不兼容问题。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"便捷性\"\n        }), \"：用户只需指定一个路径或模型标识符，即可加载整个模型的所有必要部分。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"通过这种方式，用户可以方便地使用预训练的 Stable Diffusion 模型进行微调或推理，而不必单独管理每个组件的版本和路径。\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-这些是-stable-diffusion-的内部设计对吧这些都在哪篇论文里提出的-web\",\n      children: _jsx(_components.a, {\n        href: \"#q-这些是-stable-diffusion-的内部设计对吧这些都在哪篇论文里提出的-web\",\n        children: \"Q: 这些是 Stable Diffusion 的内部设计对吧？这些都在哪篇论文里提出的？ @Web\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Stable Diffusion 是一种基于扩散模型的图像生成技术，其核心组件和设计在多篇论文中得到了详细描述。以下是与 Stable Diffusion 相关的关键论文：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"扩散模型的基础\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"论文\"\n            }), \"：\", _jsx(_components.em, {\n              children: \"Denoising Diffusion Probabilistic Models\"\n            }), \" by Jonathan Ho, Ajay Jain, Pieter Abbeel (2020)\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"链接\"\n            }), \"：\", _jsx(_components.a, {\n              href: \"https://arxiv.org/abs/2006.11239\",\n              children: \"arXiv:2006.11239\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"内容\"\n            }), \"：这篇论文介绍了扩散模型的基本原理和去噪过程，是 Stable Diffusion 的理论基础。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Stable Diffusion 的具体实现\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"论文\"\n            }), \"：\", _jsx(_components.em, {\n              children: \"High-Resolution Image Synthesis with Latent Diffusion Models\"\n            }), \" by Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Björn Ommer (2021)\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"链接\"\n            }), \"：\", _jsx(_components.a, {\n              href: \"https://arxiv.org/abs/2112.10752\",\n              children: \"arXiv:2112.10752\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"内容\"\n            }), \"：这篇论文详细描述了 Stable Diffusion 的架构，包括使用潜在空间的扩散模型、VAE 的应用以及如何在高分辨率图像生成中实现高效计算。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"CLIP 模型的使用\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"论文\"\n            }), \"：\", _jsx(_components.em, {\n              children: \"Learning Transferable Visual Models From Natural Language Supervision\"\n            }), \" by Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, Gretchen Krueger, Ilya Sutskever (2021)\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"链接\"\n            }), \"：\", _jsx(_components.a, {\n              href: \"https://arxiv.org/abs/2103.00020\",\n              children: \"arXiv:2103.00020\"\n            })]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.strong, {\n              children: \"内容\"\n            }), \"：CLIP 模型用于将文本和图像结合在一起进行训练，Stable Diffusion 使用 CLIP 作为文本编码器来处理文本输入。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这些论文共同构成了 Stable Diffusion 的理论和技术基础，描述了其内部设计和实现细节。通过结合扩散模型、VAE 和 CLIP，Stable Diffusion 实现了高效的文本到图像生成。\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-解释-stablediffusionpipeline-的结构-pipeline_stable_diffusionpy\",\n      children: _jsx(_components.a, {\n        href: \"#q-解释-stablediffusionpipeline-的结构-pipeline_stable_diffusionpy\",\n        children: \"Q: 解释 StableDiffusionPipeline 的结构 @pipeline_stable_diffusion.py\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"StableDiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 是一个用于实现 Stable Diffusion 模型的核心类，负责将多个组件组合在一起以实现文本到图像的生成。以下是对 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"StableDiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 结构的详细解释：\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"继承关系\",\n      children: _jsx(_components.a, {\n        href: \"#继承关系\",\n        children: \"继承关系\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"StableDiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 继承了多个类，这些类为其提供了不同的功能：\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"DiffusionPipeline\"\n        }), \": 提供了基本的扩散模型功能。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"StableDiffusionMixin\"\n        }), \": 包含与 Stable Diffusion 相关的特定功能。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"TextualInversionLoaderMixin\"\n        }), \": 支持文本反转加载功能。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"StableDiffusionLoraLoaderMixin\"\n        }), \": 支持 LoRA（低秩适应）加载功能。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"IPAdapterMixin\"\n        }), \": 提供 IP 适配器功能。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"FromSingleFileMixin\"\n        }), \": 支持从单个文件加载模型。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"初始化方法\",\n      children: _jsx(_components.a, {\n        href: \"#初始化方法\",\n        children: \"初始化方法\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"__init__\"\n            })\n          })\n        })\n      }), \" 方法用于初始化 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"StableDiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 的各个组件：\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsxs(_components.strong, {\n          children: [\"VAE (\", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"vae\"\n                })\n              })\n            })\n          }), \")\"]\n        }), \": 自动编码器，用于将图像编码为潜在空间表示，并从潜在空间解码回图像。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsxs(_components.strong, {\n          children: [\"Text Encoder (\", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"text_encoder\"\n                })\n              })\n            })\n          }), \")\"]\n        }), \": 使用 CLIP 模型将文本输入编码为特征向量。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsxs(_components.strong, {\n          children: [\"Tokenizer (\", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"tokenizer\"\n                })\n              })\n            })\n          }), \")\"]\n        }), \": 将文本输入转换为模型可理解的标记。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsxs(_components.strong, {\n          children: [\"UNet (\", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"unet\"\n                })\n              })\n            })\n          }), \")\"]\n        }), \": 负责处理图像的潜在表示，预测噪声残差。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsxs(_components.strong, {\n          children: [\"Scheduler (\", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"scheduler\"\n                })\n              })\n            })\n          }), \")\"]\n        }), \": 控制扩散过程中的噪声添加和去除。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsxs(_components.strong, {\n          children: [\"Safety Checker (\", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"safety_checker\"\n                })\n              })\n            })\n          }), \")\"]\n        }), \": 用于检查生成图像的安全性。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsxs(_components.strong, {\n          children: [\"Feature Extractor (\", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"feature_extractor\"\n                })\n              })\n            })\n          }), \")\"]\n        }), \": 用于从图像中提取特征。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsxs(_components.strong, {\n          children: [\"Image Encoder (\", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"image_encoder\"\n                })\n              })\n            })\n          }), \")\"]\n        }), \": 可选组件，用于图像编码。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"功能和方法\",\n      children: _jsx(_components.a, {\n        href: \"#功能和方法\",\n        children: \"功能和方法\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Deprecation Warnings\"\n        }), \": 在初始化过程中，检查 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"scheduler\"\n              })\n            })\n          })\n        }), \" 和 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"unet\"\n              })\n            })\n          })\n        }), \" 的配置是否过时，并提供相应的弃用警告。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Module Registration\"\n        }), \": 使用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"register_modules\"\n              })\n            })\n          })\n        }), \" 方法将各个组件注册到管道中，便于统一管理。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Safety Checks\"\n        }), \": 提供安全检查功能，确保生成的图像符合安全标准。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Guidance Scale\"\n        }), \": 提供指导比例的计算和应用，用于控制生成图像的风格和内容。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Image Processing\"\n        }), \": 包含图像处理方法，如 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"decode_latents\"\n              })\n            })\n          })\n        }), \"，用于将潜在表示转换为图像。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"属性\",\n      children: _jsx(_components.a, {\n        href: \"#属性\",\n        children: \"属性\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Guidance Scale\"\n        }), \": 控制生成图像的风格和内容。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Cross Attention\"\n        }), \": 提供交叉注意力机制的参数。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Timesteps\"\n        }), \": 控制扩散过程的时间步数。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"设计目的\",\n      children: _jsx(_components.a, {\n        href: \"#设计目的\",\n        children: \"设计目的\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"StableDiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 的设计目的是将 Stable Diffusion 模型的各个组件整合在一起，提供一个统一的接口来进行文本到图像的生成。通过继承和组合多个功能模块，\", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"StableDiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 能够灵活地支持不同的生成任务和配置需求。\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-pipeline_utilspy-解释-diffusionpipeline-的结构以及-from_pretrained-在做什么\",\n      children: _jsx(_components.a, {\n        href: \"#q-pipeline_utilspy-解释-diffusionpipeline-的结构以及-from_pretrained-在做什么\",\n        children: \"Q: @pipeline_utils.py 解释 DiffusionPipeline 的结构，以及 from_pretrained 在做什么\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"DiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 是一个用于管理和执行扩散模型的核心类，提供了加载、配置和运行模型的基本功能。以下是对 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"DiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 结构和 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"from_pretrained\"\n            })\n          })\n        })\n      }), \" 方法的详细解释：\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"diffusionpipeline-的结构\",\n      children: _jsx(_components.a, {\n        href: \"#diffusionpipeline-的结构\",\n        children: \"DiffusionPipeline 的结构\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"DiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 是一个抽象基类，定义了扩散模型的基本接口和功能。其主要结构包括：\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"模块注册\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"register_modules\"\n                  })\n                })\n              })\n            }), \" 方法用于注册模型的各个组件（如 VAE、UNet、调度器等），便于统一管理和调用。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"模型加载\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"提供从预训练模型加载各个组件的功能，通常通过 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"from_pretrained\"\n                  })\n                })\n              })\n            }), \" 方法实现。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"推理接口\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"定义了模型推理的基本接口，用户可以通过调用这些接口生成图像或其他输出。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"配置管理\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"提供配置加载和保存功能，便于模型的复用和共享。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"实用工具\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"包含一些实用工具方法，如检查版本、处理设备映射等。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"from_pretrained-方法\",\n      children: _jsx(_components.a, {\n        href: \"#from_pretrained-方法\",\n        children: \"from_pretrained 方法\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"from_pretrained\"\n            })\n          })\n        })\n      }), \" 是 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"DiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 中的一个关键方法，用于从预训练模型加载管道的各个组件。其主要功能包括：\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"模型路径解析\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"接受一个模型标识符（如 Hugging Face Hub 上的模型 ID）或本地路径，解析并定位模型文件。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"组件加载\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"从指定路径加载模型的各个组件（如 VAE、UNet、调度器等），并将它们注册到管道中。\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"支持加载不同版本和变体的模型组件。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"配置加载\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"加载模型的配置文件，设置模型的超参数和其他配置选项。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"设备映射\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"根据用户指定的设备映射策略，将模型组件分配到合适的计算设备（如 CPU、GPU）。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"安全检查\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"在加载过程中，检查模型的安全性和兼容性，确保加载的模型符合预期。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"返回实例\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"完成加载后，返回一个配置好的 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"DiffusionPipeline\"\n                  })\n                })\n              })\n            }), \" 实例，用户可以直接使用该实例进行推理。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"设计目的-1\",\n      children: _jsx(_components.a, {\n        href: \"#设计目的-1\",\n        children: \"设计目的\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"DiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 的设计目的是提供一个统一的接口来管理和执行扩散模型。通过 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"from_pretrained\"\n            })\n          })\n        })\n      }), \" 方法，用户可以方便地加载和配置预训练模型，快速进行推理和生成任务。这种设计使得扩散模型的使用更加简便和高效，适合各种应用场景。\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-train_text_to_image_lorapy-里从-diffusionpipelinefrom_pretrained-加载到了-pipeline_stable_diffusionpy-中-stablediffusionpipeline-类的实例我理解的对吗\",\n      children: _jsx(_components.a, {\n        href: \"#q-train_text_to_image_lorapy-里从-diffusionpipelinefrom_pretrained-加载到了-pipeline_stable_diffusionpy-中-stablediffusionpipeline-类的实例我理解的对吗\",\n        children: \"Q: @train_text_to_image_lora.py 里，从 DiffusionPipeline.from_pretrained 加载到了 @pipeline_stable_diffusion.py 中 StableDiffusionPipeline 类的实例，我理解的对吗？\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"是的，你的理解是正确的。在 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"train_text_to_image_lora.py\"\n            })\n          })\n        })\n      }), \" 中，\", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"DiffusionPipeline.from_pretrained\"\n            })\n          })\n        })\n      }), \" 方法用于加载预训练的模型管道实例。在这个过程中，它会根据指定的模型路径和配置，实例化一个 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"StableDiffusionPipeline\"\n            })\n          })\n        })\n      }), \" 类的对象。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"具体过程如下\",\n      children: _jsx(_components.a, {\n        href: \"#具体过程如下\",\n        children: \"具体过程如下：\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsxs(_components.strong, {\n            children: [\"调用 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"from_pretrained\"\n                  })\n                })\n              })\n            }), \" 方法\"]\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"在 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"train_text_to_image_lora.py\"\n                  })\n                })\n              })\n            }), \" 中，\", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"DiffusionPipeline.from_pretrained\"\n                  })\n                })\n              })\n            }), \" 被调用来加载预训练的模型。\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"这个方法会根据提供的路径或模型标识符，从 Hugging Face Hub 或本地文件系统加载模型的权重和配置。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsxs(_components.strong, {\n            children: [\"实例化 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"StableDiffusionPipeline\"\n                  })\n                })\n              })\n            })]\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"from_pretrained\"\n                  })\n                })\n              })\n            }), \" 方法会识别模型的类型，并根据配置文件中的信息选择合适的管道类进行实例化。\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"在这个例子中，由于加载的是 Stable Diffusion 模型，因此会实例化 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"StableDiffusionPipeline\"\n                  })\n                })\n              })\n            }), \" 类。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"加载组件\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"StableDiffusionPipeline\"\n                  })\n                })\n              })\n            }), \" 的 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"__init__\"\n                  })\n                })\n              })\n            }), \" 方法会被调用，加载模型的各个组件（如 VAE、UNet、调度器等）。\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"这些组件会根据预训练的权重进行初始化，并注册到管道中。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"返回实例\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"完成加载后，\", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"from_pretrained\"\n                  })\n                })\n              })\n            }), \" 方法返回一个配置好的 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"StableDiffusionPipeline\"\n                  })\n                })\n              })\n            }), \" 实例。\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"这个实例可以用于进一步的推理或微调任务。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"通过这种方式，\", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"train_text_to_image_lora.py\"\n            })\n          })\n        })\n      }), \" 脚本能够方便地加载和使用预训练的 Stable Diffusion 模型进行微调和生成任务。\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-解读-pipeline_utilspy-中-from_pretrained-代码详细说明如何识别模型类型选择管道类-codebase\",\n      children: _jsx(_components.a, {\n        href: \"#q-解读-pipeline_utilspy-中-from_pretrained-代码详细说明如何识别模型类型选择管道类-codebase\",\n        children: \"Q: 解读 @pipeline_utils.py 中 from_pretrained 代码，详细说明如何识别模型类型选择管道类。 @Codebase\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"pipeline_utils.py\"\n            })\n          })\n        })\n      }), \" 中，\", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"from_pretrained\"\n            })\n          })\n        })\n      }), \" 方法负责从预训练模型加载管道实例。以下是该方法如何识别模型类型并选择合适的管道类的详细说明：\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"识别模型类型并选择管道类的步骤\",\n      children: _jsx(_components.a, {\n        href: \"#识别模型类型并选择管道类的步骤\",\n        children: \"识别模型类型并选择管道类的步骤\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"下载和缓存模型文件\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"首先，\", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"from_pretrained\"\n                  })\n                })\n              })\n            }), \" 方法会检查 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"pretrained_model_name_or_path\"\n                  })\n                })\n              })\n            }), \" 是否是一个本地路径。如果不是，它会调用 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"cls.download\"\n                  })\n                })\n              })\n            }), \" 方法从 Hugging Face Hub 下载模型文件，并将其缓存到本地。\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"相关代码行：\", \"\\n\", _jsx(_components.figure, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.pre, {\n                tabIndex: \"0\",\n                \"data-language\": \"python\",\n                \"data-theme\": \"plastic\",\n                children: _jsxs(_components.code, {\n                  \"data-language\": \"python\",\n                  \"data-theme\": \"plastic\",\n                  style: {\n                    display: \"grid\"\n                  },\n                  children: [_jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"startLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"763\"\n                    })]\n                  }), \"\\n\", _jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"endLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"788\"\n                    })]\n                  })]\n                })\n              })\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"加载配置文件\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"使用 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"cls.load_config\"\n                  })\n                })\n              })\n            }), \" 方法加载模型的配置文件，该文件包含模型的超参数和其他配置信息。\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"相关代码行：\", \"\\n\", _jsx(_components.figure, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.pre, {\n                tabIndex: \"0\",\n                \"data-language\": \"python\",\n                \"data-theme\": \"plastic\",\n                children: _jsxs(_components.code, {\n                  \"data-language\": \"python\",\n                  \"data-theme\": \"plastic\",\n                  style: {\n                    display: \"grid\"\n                  },\n                  children: [_jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"startLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"812\"\n                    })]\n                  }), \"\\n\", _jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"endLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"818\"\n                    })]\n                  })]\n                })\n              })\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"识别模型变体\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"通过 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"_identify_model_variants\"\n                  })\n                })\n              })\n            }), \" 方法识别模型的变体（如 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"fp16\"\n                  })\n                })\n              })\n            }), \"、\", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"ema\"\n                  })\n                })\n              })\n            }), \" 等），以便加载正确的模型文件。\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"相关代码行：\", \"\\n\", _jsx(_components.figure, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.pre, {\n                tabIndex: \"0\",\n                \"data-language\": \"python\",\n                \"data-theme\": \"plastic\",\n                children: _jsxs(_components.code, {\n                  \"data-language\": \"python\",\n                  \"data-theme\": \"plastic\",\n                  style: {\n                    display: \"grid\"\n                  },\n                  children: [_jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"startLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"820\"\n                    })]\n                  }), \"\\n\", _jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"endLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"827\"\n                    })]\n                  })]\n                })\n              })\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"解析自定义管道和类\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"使用 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"_resolve_custom_pipeline_and_cls\"\n                  })\n                })\n              })\n            }), \" 方法解析自定义管道和类名。如果用户指定了自定义管道，则从 Hub 加载相应的模块。\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"相关代码行：\", \"\\n\", _jsx(_components.figure, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.pre, {\n                tabIndex: \"0\",\n                \"data-language\": \"python\",\n                \"data-theme\": \"plastic\",\n                children: _jsxs(_components.code, {\n                  \"data-language\": \"python\",\n                  \"data-theme\": \"plastic\",\n                  style: {\n                    display: \"grid\"\n                  },\n                  children: [_jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"startLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"831\"\n                    })]\n                  }), \"\\n\", _jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"endLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"833\"\n                    })]\n                  })]\n                })\n              })\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"获取管道类\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"调用 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"_get_pipeline_class\"\n                  })\n                })\n              })\n            }), \" 方法，根据配置文件和用户指定的选项，确定要实例化的管道类。\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"相关代码行：\", \"\\n\", _jsx(_components.figure, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.pre, {\n                tabIndex: \"0\",\n                \"data-language\": \"python\",\n                \"data-theme\": \"plastic\",\n                children: _jsxs(_components.code, {\n                  \"data-language\": \"python\",\n                  \"data-theme\": \"plastic\",\n                  style: {\n                    display: \"grid\"\n                  },\n                  children: [_jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"startLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"834\"\n                    })]\n                  }), \"\\n\", _jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"endLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"842\"\n                    })]\n                  })]\n                })\n              })\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"加载管道组件\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"根据管道类的签名，加载并实例化各个组件（如 VAE、UNet、调度器等），并将它们注册到管道中。\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"相关代码行：\", \"\\n\", _jsx(_components.figure, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.pre, {\n                tabIndex: \"0\",\n                \"data-language\": \"python\",\n                \"data-theme\": \"plastic\",\n                children: _jsxs(_components.code, {\n                  \"data-language\": \"python\",\n                  \"data-theme\": \"plastic\",\n                  style: {\n                    display: \"grid\"\n                  },\n                  children: [_jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"startLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"857\"\n                    })]\n                  }), \"\\n\", _jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"endLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"980\"\n                    })]\n                  })]\n                })\n              })\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"实例化管道\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"使用加载的组件和配置，实例化最终的管道对象。\"\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"相关代码行：\", \"\\n\", _jsx(_components.figure, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.pre, {\n                tabIndex: \"0\",\n                \"data-language\": \"python\",\n                \"data-theme\": \"plastic\",\n                children: _jsxs(_components.code, {\n                  \"data-language\": \"python\",\n                  \"data-theme\": \"plastic\",\n                  style: {\n                    display: \"grid\"\n                  },\n                  children: [_jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"startLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"1021\"\n                    })]\n                  }), \"\\n\", _jsxs(_components.span, {\n                    \"data-line\": \"\",\n                    children: [_jsx(_components.span, {\n                      style: {\n                        color: \"#A9B2C3\"\n                      },\n                      children: \"endLine: \"\n                    }), _jsx(_components.span, {\n                      style: {\n                        color: \"#56B6C2\"\n                      },\n                      children: \"1028\"\n                    })]\n                  })]\n                })\n              })\n            }), \"\\n\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"通过这些步骤，\", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"from_pretrained\"\n            })\n          })\n        })\n      }), \" 方法能够识别模型类型并选择合适的管道类，确保加载的模型能够正确地进行推理和生成任务。\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-如果我只有一个-sd_xl_base_10safetensors-文件是否无法使用-from_pretrained-方法得到具体的-pipeline-实例\",\n      children: _jsx(_components.a, {\n        href: \"#q-如果我只有一个-sd_xl_base_10safetensors-文件是否无法使用-from_pretrained-方法得到具体的-pipeline-实例\",\n        children: \"Q: 如果我只有一个 sd_xl_base_1.0.safetensors 文件，是否无法使用 from_pretrained 方法得到具体的 Pipeline 实例？\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"如果你只有一个 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"sd_xl_base_1.0.safetensors\"\n            })\n          })\n        })\n      }), \" 文件，直接使用 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"from_pretrained\"\n            })\n          })\n        })\n      }), \" 方法可能会遇到一些困难，因为 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"from_pretrained\"\n            })\n          })\n        })\n      }), \" 通常期望从一个包含完整模型配置和权重的目录或 Hugging Face Hub 仓库中加载模型。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"解决方案\",\n      children: _jsx(_components.a, {\n        href: \"#解决方案\",\n        children: \"解决方案\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"手动加载权重\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"你可以手动加载 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"safetensors\"\n                  })\n                })\n              })\n            }), \" 文件中的权重，并将它们分配给相应的模型组件（如 UNet、VAE 等）。\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"这需要你对模型的架构有深入的了解，以便正确地将权重映射到模型的各个部分。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"创建配置文件\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"from_pretrained\"\n                  })\n                })\n              })\n            }), \" 方法依赖于配置文件来确定如何构建模型管道。你可以尝试创建一个与模型匹配的配置文件，通常是一个 JSON 文件，描述模型的架构和超参数。\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"这个配置文件需要放在与 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"safetensors\"\n                  })\n                })\n              })\n            }), \" 文件相同的目录中。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"使用自定义加载逻辑\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"如果你熟悉模型的架构，可以编写自定义的加载逻辑，将 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"safetensors\"\n                  })\n                })\n              })\n            }), \" 文件中的权重加载到模型中。\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [\"这可能涉及使用 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"safetensors\"\n                  })\n                })\n              })\n            }), \" 库来读取权重，并手动将它们分配给模型的各个层。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"检查社区资源\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"有时，社区会提供工具或脚本来帮助加载特定格式的模型文件。你可以在相关的 GitHub 仓库或论坛中查找是否有适合的工具。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"总结-1\",\n      children: _jsx(_components.a, {\n        href: \"#总结-1\",\n        children: \"总结\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"虽然 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"from_pretrained\"\n            })\n          })\n        })\n      }), \" 方法提供了便捷的加载方式，但它通常需要完整的模型目录或 Hub 仓库。如果只有一个 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"safetensors\"\n            })\n          })\n        })\n      }), \" 文件，你可能需要手动处理权重加载和配置，以便正确地构建和使用模型管道。\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-如果我只需要进行推理是否仍需配置文件\",\n      children: _jsx(_components.a, {\n        href: \"#q-如果我只需要进行推理是否仍需配置文件\",\n        children: \"Q: 如果我只需要进行推理，是否仍需配置文件？\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在进行推理时，配置文件仍然是非常有用的，尽管在某些情况下你可能能够在没有完整配置文件的情况下进行推理。以下是一些考虑因素：\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"为什么需要配置文件\",\n      children: _jsx(_components.a, {\n        href: \"#为什么需要配置文件\",\n        children: \"为什么需要配置文件\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"模型架构信息\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"配置文件通常包含模型的架构信息，如层数、隐藏单元数、激活函数等。这些信息对于正确构建模型至关重要。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"超参数设置\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"配置文件中可能包含一些超参数设置，如学习率、优化器设置等，虽然这些在推理时不直接使用，但了解这些信息有助于理解模型的行为。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"组件初始化\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"在复杂模型（如 Stable Diffusion）中，配置文件用于初始化各个组件（如 VAE、UNet、调度器等）。这些组件需要正确的参数来进行推理。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"没有配置文件时的推理\",\n      children: _jsx(_components.a, {\n        href: \"#没有配置文件时的推理\",\n        children: \"没有配置文件时的推理\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果你没有配置文件，但仍希望进行推理，可以考虑以下方法：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"手动构建模型\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"如果你对模型的架构有深入了解，可以手动构建模型，并使用 \", _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"safetensors\"\n                  })\n                })\n              })\n            }), \" 文件中的权重进行初始化。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"使用默认设置\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"在某些情况下，你可以使用一些默认的设置来初始化模型组件，但这可能会导致性能不佳或结果不准确。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"社区支持\"\n          }), \"：\"]\n        }), \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"查找社区提供的工具或脚本，这些工具可能已经解决了如何在没有完整配置文件的情况下进行推理的问题。\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"总结-2\",\n      children: _jsx(_components.a, {\n        href: \"#总结-2\",\n        children: \"总结\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"虽然在某些情况下可以在没有配置文件的情况下进行推理，但拥有配置文件通常会使过程更简单、更可靠。如果可能，尝试获取或创建一个与模型匹配的配置文件，以确保推理的准确性和效率。\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-以你上面举的例子为例pipeline_loading_utilspy-load_sub_model-中实例化的是-unet_2d_conditionpy-中的-unet2dconditionmodel-类吗-load_sub_model-是怎么找到这个类并实例化的\",\n      children: _jsx(_components.a, {\n        href: \"#q-以你上面举的例子为例pipeline_loading_utilspy-load_sub_model-中实例化的是-unet_2d_conditionpy-中的-unet2dconditionmodel-类吗-load_sub_model-是怎么找到这个类并实例化的\",\n        children: \"Q: 以你上面举的例子为例，@pipeline_loading_utils.py load_sub_model 中，实例化的是 @unet_2d_condition.py 中的 UNet2DConditionModel 类吗？ load_sub_model 是怎么找到这个类并实例化的？\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Deepseek R-1:\"\n    }), \"\\n\", _jsxs(\"think\", {\n      children: [_jsxs(_components.p, {\n        children: [\"好的，我需要仔细分析用户的问题。用户问的是在\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"pipeline_loading_utils.py\"\n              })\n            })\n          })\n        }), \"中的\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"load_sub_model\"\n              })\n            })\n          })\n        }), \"函数是否实例化了\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"unet_2d_condition.py\"\n              })\n            })\n          })\n        }), \"中的\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \"类，以及这个过程是如何找到并实例化该类的。\"]\n      }), _jsxs(_components.p, {\n        children: [\"首先，我需要回忆\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"load_sub_model\"\n              })\n            })\n          })\n        }), \"函数的作用。根据之前的讨论，这个函数负责动态加载模型的各个子组件，比如 UNet、VAE 等。用户提供的代码片段显示，\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"load_sub_model\"\n              })\n            })\n          })\n        }), \"通过\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"class_obj\"\n              })\n            })\n          })\n        }), \"来实例化具体的类，而\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"class_obj\"\n              })\n            })\n          })\n        }), \"是通过\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"get_class_obj_and_candidates\"\n              })\n            })\n          })\n        }), \"函数获取的。\"]\n      }), _jsxs(_components.p, {\n        children: [\"接下来，我需要查看\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"get_class_obj_and_candidates\"\n              })\n            })\n          })\n        }), \"函数的逻辑。这个函数会根据\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"library_name\"\n              })\n            })\n          })\n        }), \"和\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"class_name\"\n              })\n            })\n          })\n        }), \"来查找对应的类。例如，当\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"library_name\"\n              })\n            })\n          })\n        }), \"是\\\"diffusers\\\"，\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"class_name\"\n              })\n            })\n          })\n        }), \"是\\\"UNet2DConditionModel\\\"时，应该会导入\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"diffusers.models.unets.unet_2d_condition\"\n              })\n            })\n          })\n        }), \"模块中的\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \"类。\"]\n      }), _jsxs(_components.p, {\n        children: [\"然后，我需要确认\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"unet_2d_condition.py\"\n              })\n            })\n          })\n        }), \"中的\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \"类是否被正确注册到\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ALL_IMPORTABLE_CLASSES\"\n              })\n            })\n          })\n        }), \"中。在 Diffusers 库中，通常会有全局的类注册机制，确保各个组件可以被动态发现和加载。\"]\n      }), _jsxs(_components.p, {\n        children: [\"此外，\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"load_sub_model\"\n              })\n            })\n          })\n        }), \"函数中的\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"load_method\"\n              })\n            })\n          })\n        }), \"是通过\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"_get_load_method\"\n              })\n            })\n          })\n        }), \"获取的，这可能涉及到从预训练权重加载模型的方法，比如\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"from_pretrained\"\n              })\n            })\n          })\n        }), \"。需要检查\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \"类是否实现了相应的类方法，以支持从配置文件或预训练文件加载。\"]\n      }), _jsxs(_components.p, {\n        children: [\"最后，需要验证实例化的过程是否正确，包括参数传递和配置的应用。例如，\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \"的\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"__init__\"\n              })\n            })\n          })\n        }), \"方法需要接收正确的参数来构建模型结构，而这些参数可能来自配置文件或默认值。\"]\n      }), _jsxs(_components.p, {\n        children: [\"总结来说，\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"load_sub_model\"\n              })\n            })\n          })\n        }), \"通过类名和库名找到对应的类，利用其加载方法（如\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"from_pretrained\"\n              })\n            })\n          })\n        }), \"）实例化对象，而\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \"作为可导入的类被正确注册和引用，从而完成实例化。\"]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"是的，\", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"pipeline_loading_utils.py\"\n            })\n          })\n        })\n      }), \" 中的 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"load_sub_model\"\n            })\n          })\n        })\n      }), \" 函数最终会实例化 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"unet_2d_condition.py\"\n            })\n          })\n        })\n      }), \" 中的 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 类。以下是完整的加载逻辑解析：\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"核心加载流程\",\n      children: _jsx(_components.a, {\n        href: \"#核心加载流程\",\n        children: _jsx(_components.strong, {\n          children: \"核心加载流程\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# pipeline_loading_utils.py 中的关键代码段\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" load_sub_model\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(...):\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 1. 获取类对象和候选类\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    class_obj, class_candidates \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" get_class_obj_and_candidates(\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        library_name,\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        class_name,\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        importable_classes,\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        pipelines,\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        is_pipeline_module,\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        component_name\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"name,\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        cache_dir\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"cached_folder,\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    )\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 2. 确定加载方法（如 from_pretrained）\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    load_method_name \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \" None\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"    for\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" candidate_name, candidate_class \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"in\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" class_candidates.items():\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        if\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" issubclass\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(class_obj, candidate_class):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"            load_method_name \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" importable_classes[candidate_name][\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"]  \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 通常是 \\\"from_pretrained\\\"\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 3. 获取具体的加载方法\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    load_method \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" _get_load_method(class_obj, load_method_name, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"is_dduf\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"dduf_entries \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"is\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" not\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \" None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 4. 执行加载\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    loaded_sub_model \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" load_method(cached_folder, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"**\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"loading_kwargs)\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"具体步骤解析\",\n      children: _jsx(_components.a, {\n        href: \"#具体步骤解析\",\n        children: _jsx(_components.strong, {\n          children: \"具体步骤解析\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"1-类对象获取-get_class_obj_and_candidates\",\n      children: _jsx(_components.a, {\n        href: \"#1-类对象获取-get_class_obj_and_candidates\",\n        children: _jsx(_components.strong, {\n          children: \"1. 类对象获取 (get_class_obj_and_candidates)\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"作用\"\n        }), \"：根据 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"library_name\"\n              })\n            })\n          })\n        }), \" 和 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"class_name\"\n              })\n            })\n          })\n        }), \" 动态导入对应的 Python 类。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"实现\"\n        }), \"：\", \"\\n\", _jsx(_components.figure, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.pre, {\n            tabIndex: \"0\",\n            \"data-language\": \"python\",\n            \"data-theme\": \"plastic\",\n            children: _jsxs(_components.code, {\n              \"data-language\": \"python\",\n              \"data-theme\": \"plastic\",\n              style: {\n                display: \"grid\"\n              },\n              children: [_jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  style: {\n                    color: \"#5F6672\",\n                    fontStyle: \"italic\"\n                  },\n                  children: \"# 通过 library_name 定位模块路径\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  style: {\n                    color: \"#5F6672\",\n                    fontStyle: \"italic\"\n                  },\n                  children: \"# 例如 library_name=\\\"diffusers\\\", class_name=\\\"UNet2DConditionModel\\\"\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  style: {\n                    color: \"#5F6672\",\n                    fontStyle: \"italic\"\n                  },\n                  children: \"# 会导入 diffusers.models.unets.unet_2d_condition 模块\"\n                })\n              }), \"\\n\", _jsxs(_components.span, {\n                \"data-line\": \"\",\n                children: [_jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"module \"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \" importlib.import_module(library_name)\"\n                })]\n              }), \"\\n\", _jsxs(_components.span, {\n                \"data-line\": \"\",\n                children: [_jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"class_obj \"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#B57EDC\"\n                  },\n                  children: \" getattr\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"(module, class_name)  \"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#5F6672\",\n                    fontStyle: \"italic\"\n                  },\n                  children: \"# 获取 UNet2DConditionModel 类\"\n                })]\n              })]\n            })\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"2-加载方法匹配\",\n      children: _jsx(_components.a, {\n        href: \"#2-加载方法匹配\",\n        children: _jsx(_components.strong, {\n          children: \"2. 加载方法匹配\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"候选类\"\n        }), \"：\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"class_candidates\"\n              })\n            })\n          })\n        }), \" 来自 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ALL_IMPORTABLE_CLASSES\"\n              })\n            })\n          })\n        }), \"，包含所有可加载的基类（如 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ModelMixin\"\n              })\n            })\n          })\n        }), \"）。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"方法选择\"\n        }), \"：通过 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"issubclass\"\n              })\n            })\n          })\n        }), \" 检查 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"class_obj\"\n              })\n            })\n          })\n        }), \" 是否继承自候选类，从而确定使用哪个基类的加载方法（如 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ModelMixin.from_pretrained\"\n              })\n            })\n          })\n        }), \"）。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"3-加载方法绑定\",\n      children: _jsx(_components.a, {\n        href: \"#3-加载方法绑定\",\n        children: _jsx(_components.strong, {\n          children: \"3. 加载方法绑定\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"动态绑定\"\n        }), \"：\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"_get_load_method\"\n              })\n            })\n          })\n        }), \" 会将 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"class_obj.from_pretrained\"\n              })\n            })\n          })\n        }), \" 方法绑定为实际加载函数。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"特殊处理\"\n        }), \"：如果是 DDUF 格式（HuggingFace 的分布式格式），会使用特定的加载逻辑。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"4-实例化-unet\",\n      children: _jsx(_components.a, {\n        href: \"#4-实例化-unet\",\n        children: _jsx(_components.strong, {\n          children: \"4. 实例化 UNet\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"参数传递\"\n        }), \"：\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"loading_kwargs\"\n              })\n            })\n          })\n        }), \" 包含模型路径、设备映射、精度设置等。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"最终调用\"\n        }), \"：\", \"\\n\", _jsx(_components.figure, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.pre, {\n            tabIndex: \"0\",\n            \"data-language\": \"python\",\n            \"data-theme\": \"plastic\",\n            children: _jsxs(_components.code, {\n              \"data-language\": \"python\",\n              \"data-theme\": \"plastic\",\n              style: {\n                display: \"grid\"\n              },\n              children: [_jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  style: {\n                    color: \"#5F6672\",\n                    fontStyle: \"italic\"\n                  },\n                  children: \"# 等效于执行：\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"UNet2DConditionModel.from_pretrained(\"\n                })\n              }), \"\\n\", _jsxs(_components.span, {\n                \"data-line\": \"\",\n                children: [_jsx(_components.span, {\n                  style: {\n                    color: \"#C6CCD7\"\n                  },\n                  children: \"    pretrained_model_name_or_path\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"cached_folder,\"\n                })]\n              }), \"\\n\", _jsxs(_components.span, {\n                \"data-line\": \"\",\n                children: [_jsx(_components.span, {\n                  style: {\n                    color: \"#C6CCD7\"\n                  },\n                  children: \"    subfolder\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"name,  \"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#5F6672\",\n                    fontStyle: \"italic\"\n                  },\n                  children: \"# 如 \\\"unet\\\"\"\n                })]\n              }), \"\\n\", _jsxs(_components.span, {\n                \"data-line\": \"\",\n                children: [_jsx(_components.span, {\n                  style: {\n                    color: \"#C6CCD7\"\n                  },\n                  children: \"    torch_dtype\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"torch_dtype,\"\n                })]\n              }), \"\\n\", _jsxs(_components.span, {\n                \"data-line\": \"\",\n                children: [_jsx(_components.span, {\n                  style: {\n                    color: \"#C6CCD7\"\n                  },\n                  children: \"    device_map\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"device_map,\"\n                })]\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  style: {\n                    color: \"#56B6C2\"\n                  },\n                  children: \"    ...\"\n                })\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \")\"\n                })\n              })]\n            })\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"unet2dconditionmodel-的注册机制\",\n      children: _jsx(_components.a, {\n        href: \"#unet2dconditionmodel-的注册机制\",\n        children: _jsx(_components.strong, {\n          children: \"UNet2DConditionModel 的注册机制\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"diffusers\"\n            })\n          })\n        })\n      }), \" 的全局注册表 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"ALL_IMPORTABLE_CLASSES\"\n            })\n          })\n        })\n      }), \" 中，\", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 被注册为可导入类：\"]\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 在某个初始化模块中（如 src/diffusers/__init__.py）\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"ALL_IMPORTABLE_CLASSES\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" =\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" {\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    \\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"UNet2DConditionModel\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \": (\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"diffusers.models.unets.unet_2d_condition\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"UNet2DConditionModel\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"),\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"    ...\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"}\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"这使得 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"get_class_obj_and_candidates\"\n            })\n          })\n        })\n      }), \" 能通过名称匹配找到该类。\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"架构参数如何生效\",\n      children: _jsx(_components.a, {\n        href: \"#架构参数如何生效\",\n        children: _jsx(_components.strong, {\n          children: \"架构参数如何生效\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"当调用 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"from_pretrained\"\n            })\n          })\n        })\n      }), \" 时：\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"配置加载\"\n        }), \"：从 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"config.json\"\n              })\n            })\n          })\n        }), \" 中读取 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"down_block_types\"\n              })\n            })\n          })\n        }), \"、\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"up_block_types\"\n              })\n            })\n          })\n        }), \" 等参数。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"动态构建\"\n        }), \"：\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel.__init__\"\n              })\n            })\n          })\n        }), \" 根据这些参数，通过 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"get_down_block\"\n              })\n            })\n          })\n        }), \" 和 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"get_up_block\"\n              })\n            })\n          })\n        }), \" 动态构建网络层。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"例如：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 根据 config.json 中的 down_block_types 创建下采样块\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"down_block_type \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" \\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"CrossAttnDownBlock2D\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"down_block \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" get_down_block(\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    down_block_type,\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    num_layers\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"layers_per_block[i],\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"input_channel,\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"output_channel,\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"    ...\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"总结流程图\",\n      children: _jsx(_components.a, {\n        href: \"#总结流程图\",\n        children: _jsx(_components.strong, {\n          children: \"总结流程图\"\n        })\n      })\n    }), \"\\n\", _jsx(CodeBlockMermaid, {\n      lang: \"mermaid\",\n      value: \"graph TD\\n    A[load_sub_model] --> B[get_class_obj_and_candidates]\\n    B --> C{找到 UNet2DConditionModel 类}\\n    C --> D[确定加载方法 from_pretrained]\\n    D --> E[调用 UNet2DConditionModel.from_pretrained]\\n    E --> F[加载 config.json]\\n    F --> G[根据配置动态构建网络层]\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"通过这种动态加载机制，Diffusers 库实现了高度模块化的模型管理，能够灵活支持不同结构的 UNet 变体。\"\n    }), \"\\n\", _jsxs(ObsidianCallout, {\n      type: \"info-太史公曰\",\n      title: \"\",\n      children: [_jsxs(_components.p, {\n        children: [\"应当不是。正确来说，是上层（ \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"DiffusionPipeline.from_pretained\"\n              })\n            })\n          })\n        }), \" ）从 importable_classes 参数中传入 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ALL_IMPORTABLE_CLASSES\"\n              })\n            })\n          })\n        }), \" ， \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"get_class_obj_and_candidates\"\n              })\n            })\n          })\n        }), \" 中从 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"diffuser\"\n              })\n            })\n          })\n        }), \" 中加载到 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ModelMixin\"\n              })\n            })\n          })\n        }), \" ，调用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ModelMixin.from_pretrained\"\n              })\n            })\n          })\n        }), \" 才实例化 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \" 类。\"]\n      }), _jsxs(_components.p, {\n        children: [\"因此估计往 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"load_sub_model\"\n              })\n            })\n          })\n        }), \" 中传入的是 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"diffuser\"\n              })\n            })\n          })\n        }), \" 与 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ModelMixin\"\n              })\n            })\n          })\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-解析代码详解modeling_utilspy-的-from_pretrained-如何实例化-unet_2d_conditionpy-中的-unet2dconditionmodel-\",\n      children: _jsxs(_components.a, {\n        href: \"#q-解析代码详解modeling_utilspy-的-from_pretrained-如何实例化-unet_2d_conditionpy-中的-unet2dconditionmodel-\",\n        children: [\"Q: 解析代码，详解@modeling_utils.py 的 from_pretrained 如何实例化 @unet_2d_condition.py 中的 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \" ？\"]\n      })\n    }), \"\\n\", _jsxs(\"think\", {\n      children: [_jsxs(_components.p, {\n        children: [\"我需要详细解析 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"modeling_utils.py\"\n              })\n            })\n          })\n        }), \" 中的 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"from_pretrained\"\n              })\n            })\n          })\n        }), \" 方法如何实例化 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \"。根据提供的代码，我可以看到整个加载流程。\"]\n      }), _jsxs(_components.p, {\n        children: [\"首先，\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"from_pretrained\"\n              })\n            })\n          })\n        }), \" 是 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ModelMixin\"\n              })\n            })\n          })\n        }), \" 类的一个类方法，而 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \" 继承自 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ModelMixin\"\n              })\n            })\n          })\n        }), \"，所以它继承了这个方法。\"]\n      }), _jsx(_components.p, {\n        children: \"加载流程大致如下：\"\n      }), _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"首先获取配置文件和模型文件路径\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"加载配置文件\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"使用配置创建模型实例\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"加载权重到模型中\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"处理设备映射等高级功能\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"返回加载好的模型\"\n        }), \"\\n\"]\n      }), _jsxs(_components.p, {\n        children: [\"具体来看，\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"from_pretrained\"\n              })\n            })\n          })\n        }), \" 方法首先会确定模型文件的位置，然后加载配置文件。接着，它会使用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"cls.from_config(config, **unused_kwargs)\"\n              })\n            })\n          })\n        }), \" 创建一个模型实例。这里的 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"cls\"\n              })\n            })\n          })\n        }), \" 就是 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \"，所以实际上是调用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel.from_config\"\n              })\n            })\n          })\n        }), \" 来创建模型实例。\"]\n      }), _jsxs(_components.p, {\n        children: [\"然后，它会加载权重文件，并将权重加载到模型中。这个过程通过 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"_load_pretrained_model\"\n              })\n            })\n          })\n        }), \" 方法完成。最后，它会处理设备映射等高级功能，并返回加载好的模型。\"]\n      }), _jsx(_components.p, {\n        children: \"我需要详细解释这个过程，特别是如何从配置创建模型实例，以及如何加载权重到模型中。\"\n      })]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"from_pretrained-如何实例化-unet2dconditionmodel-的详细流程\",\n      children: _jsxs(_components.a, {\n        href: \"#from_pretrained-如何实例化-unet2dconditionmodel-的详细流程\",\n        children: [_jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"from_pretrained\"\n              })\n            })\n          })\n        }), \" 如何实例化 UNet2DConditionModel 的详细流程\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"modeling_utils.py\"\n            })\n          })\n        })\n      }), \" 中的 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"from_pretrained\"\n            })\n          })\n        })\n      }), \" 方法负责实例化 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \"，整个过程可分为以下关键步骤：\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"1-加载配置文件\",\n      children: _jsx(_components.a, {\n        href: \"#1-加载配置文件\",\n        children: \"1. 加载配置文件\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 确定模型路径并加载配置\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"config_dict \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" cls\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".load_config(\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    pretrained_model_name_or_path,\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    cache_dir\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"cache_dir,\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    force_download\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"force_download,\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 其他参数...\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"这一步从模型目录或 Hub 加载 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"config.json\"\n            })\n          })\n        })\n      }), \"，包含了 UNet 的所有配置参数（如通道数、注意力头数等）。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"2-创建空模型实例\",\n      children: _jsx(_components.a, {\n        href: \"#2-创建空模型实例\",\n        children: \"2. 创建空模型实例\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 使用上下文管理器创建空模型\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"with\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" ContextManagers(init_contexts):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    model \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" cls\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".from_config(config, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"**\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"unused_kwargs)\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"这里的关键是 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"cls.from_config\"\n            })\n          })\n        })\n      }), \"，它调用 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel.from_config\"\n            })\n          })\n        })\n      }), \" 方法，该方法由 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"ConfigMixin\"\n            })\n          })\n        })\n      }), \" 提供。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"from_config\"\n            })\n          })\n        })\n      }), \" 会：\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"解析配置参数\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"调用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel.__init__\"\n              })\n            })\n          })\n        }), \" 构造函数\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"创建所有子模块（如下采样块、上采样块、注意力层等）\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"3-加载权重文件\",\n      children: _jsx(_components.a, {\n        href: \"#3-加载权重文件\",\n        children: \"3. 加载权重文件\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 加载权重文件\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"state_dict \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" load_state_dict(resolved_model_file[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"0\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"], \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"disable_mmap\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"disable_mmap, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"dduf_entries\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"dduf_entries)\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"这一步加载预训练权重文件（如 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"diffusion_pytorch_model.bin\"\n            })\n          })\n        })\n      }), \" 或 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \".safetensors\"\n            })\n          })\n        })\n      }), \"）。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"4-将权重加载到模型中\",\n      children: _jsx(_components.a, {\n        href: \"#4-将权重加载到模型中\",\n        children: \"4. 将权重加载到模型中\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"model, missing_keys, unexpected_keys, mismatched_keys, offload_index, error_msgs \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" cls\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"._load_pretrained_model(\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    model,\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    state_dict,\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 其他参数...\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"_load_pretrained_model\"\n            })\n          })\n        })\n      }), \" 方法负责：\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"将权重映射到模型参数\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"处理可能的形状不匹配\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"支持低内存加载\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"处理量化和设备映射\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"5-设备分配和后处理\",\n      children: _jsx(_components.a, {\n        href: \"#5-设备分配和后处理\",\n        children: \"5. 设备分配和后处理\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 如果指定了设备映射，将模型分配到不同设备\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"if\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" device_map \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"is\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" not\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \" None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \":\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    dispatch_model(model, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"**\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"device_map_kwargs)\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这一步处理模型在多 GPU 或 CPU/GPU 混合环境下的分配。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"6-返回实例化的模型\",\n      children: _jsx(_components.a, {\n        href: \"#6-返回实例化的模型\",\n        children: \"6. 返回实例化的模型\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"model.eval()  \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 设置为评估模式\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" model\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"最终返回完全加载好的 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 实例。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"关键实现细节\",\n      children: _jsx(_components.a, {\n        href: \"#关键实现细节\",\n        children: \"关键实现细节\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"动态类型处理\"\n          }), \"：\"]\n        }), \"\\n\", _jsx(_components.figure, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.pre, {\n            tabIndex: \"0\",\n            \"data-language\": \"python\",\n            \"data-theme\": \"plastic\",\n            children: _jsxs(_components.code, {\n              \"data-language\": \"python\",\n              \"data-theme\": \"plastic\",\n              style: {\n                display: \"grid\"\n              },\n              children: [_jsxs(_components.span, {\n                \"data-line\": \"\",\n                children: [_jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \"if\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \" torch_dtype \"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \"is\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \" not\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#56B6C2\"\n                  },\n                  children: \" None\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \":\"\n                })]\n              }), \"\\n\", _jsxs(_components.span, {\n                \"data-line\": \"\",\n                children: [_jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"    dtype_orig \"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \" cls\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"._set_default_torch_dtype(torch_dtype)\"\n                })]\n              })]\n            })\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"支持不同精度（如 fp16、bf16）的模型加载\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"低内存加载\"\n          }), \"：\"]\n        }), \"\\n\", _jsx(_components.figure, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.pre, {\n            tabIndex: \"0\",\n            \"data-language\": \"python\",\n            \"data-theme\": \"plastic\",\n            children: _jsxs(_components.code, {\n              \"data-language\": \"python\",\n              \"data-theme\": \"plastic\",\n              style: {\n                display: \"grid\"\n              },\n              children: [_jsxs(_components.span, {\n                \"data-line\": \"\",\n                children: [_jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \"if\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \" low_cpu_mem_usage:\"\n                })]\n              }), \"\\n\", _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"    init_contexts.append(accelerate.init_empty_weights())\"\n                })\n              })]\n            })\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"通过 accelerate 库实现大模型的高效加载\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"权重修复\"\n          }), \"：\"]\n        }), \"\\n\", _jsx(_components.figure, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.pre, {\n            tabIndex: \"0\",\n            \"data-language\": \"python\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"python\",\n              \"data-theme\": \"plastic\",\n              style: {\n                display: \"grid\"\n              },\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"model._fix_state_dict_keys_on_load(state_dict)\"\n                })\n              })\n            })\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"处理不同版本模型间的键名差异\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"设备映射\"\n          }), \"：\"]\n        }), \"\\n\", _jsx(_components.figure, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.pre, {\n            tabIndex: \"0\",\n            \"data-language\": \"python\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"python\",\n              \"data-theme\": \"plastic\",\n              style: {\n                display: \"grid\"\n              },\n              children: _jsxs(_components.span, {\n                \"data-line\": \"\",\n                children: [_jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \"device_map \"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#E06C75\"\n                  },\n                  children: \"=\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \" _determine_device_map(model, device_map, max_memory, \"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#56B6C2\"\n                  },\n                  children: \"...\"\n                }), _jsx(_components.span, {\n                  style: {\n                    color: \"#A9B2C3\"\n                  },\n                  children: \")\"\n                })]\n              })\n            })\n          })\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"智能分配模型层到不同设备\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"整个过程实现了从预训练权重到可用模型实例的无缝转换，同时处理了各种高级功能如设备管理、精度控制和内存优化。\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-详细解释-unet_2d_conditionpy-中-unet2dconditionmodel-的结构\",\n      children: _jsx(_components.a, {\n        href: \"#q-详细解释-unet_2d_conditionpy-中-unet2dconditionmodel-的结构\",\n        children: \"Q: 详细解释 @unet_2d_condition.py 中 UNet2DConditionModel 的结构\"\n      })\n    }), \"\\n\", _jsxs(\"think\", {\n      children: [_jsxs(_components.p, {\n        children: [\"嗯，用户想让我详细解释 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"unet_2d_condition.py\"\n              })\n            })\n          })\n        }), \" 中的 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \" 结构。首先，我需要回忆一下 UNet 的基本结构，特别是 Stable Diffusion 中的 UNet。Stable Diffusion 的 UNet 是一个条件模型，结合了文本嵌入作为输入，所以这个 UNet2DConditionModel 应该是在传统 UNet 的基础上增加了对条件输入的处理，比如文本嵌入或时间步信息。\"]\n      }), _jsx(_components.p, {\n        children: \"接下来，我需要考虑用户可能的背景。用户可能在使用或修改 Diffusers 库，或者在尝试理解 Stable Diffusion 的工作原理。他们可能遇到了问题，比如模型加载错误，或者想自定义 UNet 的结构，因此需要了解其内部组件。用户可能已经看过代码，但需要更清晰的解释，特别是各个模块的作用和连接方式。\"\n      }), _jsxs(_components.p, {\n        children: [\"我需要检查用户提供的代码片段，特别是\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"UNet2DConditionModel\"\n              })\n            })\n          })\n        }), \"的\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"__init__\"\n              })\n            })\n          })\n        }), \"方法，看看有哪些组件被初始化。比如，\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"conv_in\"\n              })\n            })\n          })\n        }), \"、\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"time_embedding\"\n              })\n            })\n          })\n        }), \"、\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"down_blocks\"\n              })\n            })\n          })\n        }), \"、\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"mid_block\"\n              })\n            })\n          })\n        }), \"、\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"up_blocks\"\n              })\n            })\n          })\n        }), \"、\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"conv_out\"\n              })\n            })\n          })\n        }), \"等。这些部分对应了 UNet 的不同阶段，下采样、中间层、上采样等。\"]\n      }), _jsx(_components.p, {\n        children: \"然后，我需要考虑如何将这些组件组织成一个连贯的结构解释。可能需要分块讲解，比如输入处理、时间嵌入、下采样块、中间块、上采样块、输出处理等。同时，条件输入（如文本嵌入）是如何被整合到模型中的，比如通过交叉注意力机制。\"\n      }), _jsxs(_components.p, {\n        children: [\"另外，用户可能对某些参数或配置选项感兴趣，比如\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"attention_head_dim\"\n              })\n            })\n          })\n        }), \"、\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"cross_attention_dim\"\n              })\n            })\n          })\n        }), \"等，这些参数如何影响模型结构。需要解释这些参数的作用，以及它们在模型中的具体应用位置。\"]\n      }), _jsxs(_components.p, {\n        children: [\"还要注意代码中的一些特定处理，比如\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"class_embeddings_concat\"\n              })\n            })\n          })\n        }), \"如何处理类别嵌入，\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"resnet_time_scale_shift\"\n              })\n            })\n          })\n        }), \"的不同模式对残差块的影响，以及\", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"attention_type\"\n              })\n            })\n          })\n        }), \"的选择（如默认的交叉注意力或其他类型）。\"]\n      }), _jsx(_components.p, {\n        children: \"最后，可能需要提供一个结构图或流程图，帮助用户更直观地理解数据在模型中的流动路径，特别是条件信息如何在不同层中被整合。如果用户需要进一步的代码示例或调试帮助，也需要在解释中提及可能的常见问题或配置错误。\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"以下是 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 的详细结构解析，该模型是 Stable Diffusion 的核心组件，负责噪声预测和条件控制：\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"整体架构\",\n      children: _jsx(_components.a, {\n        href: \"#整体架构\",\n        children: _jsx(_components.strong, {\n          children: \"整体架构\"\n        })\n      })\n    }), \"\\n\", _jsx(CodeBlockMermaid, {\n      lang: \"mermaid\",\n      value: \"graph TD\\n    A[输入] --> B[Conv2D_3x3]\\n    B --> C[时间嵌入]\\n    C --> D[下采样块 x4]\\n    D --> E[中间块]\\n    E --> F[上采样块 x4]\\n    F --> G[Conv2D_3x3]\\n    G --> H[输出]\\n    D -->|跳跃连接| F\\n    C -->|条件注入| D\\n    C -->|条件注入| E\\n    C -->|条件注入| F\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"核心组件\",\n      children: _jsx(_components.a, {\n        href: \"#核心组件\",\n        children: _jsx(_components.strong, {\n          children: \"核心组件\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"1-输入处理\",\n      children: _jsx(_components.a, {\n        href: \"#1-输入处理\",\n        children: \"1. 输入处理\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_in \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Conv2d(\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    in_channels,\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    block_out_channels[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"0\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"],\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    kernel_size\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"作用：将输入图像（latent space）映射到初始特征空间\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"参数：\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"in_channels\"\n                  })\n                })\n              })\n            }), \"：输入通道数（通常为 4）\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            children: [_jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"block_out_channels[0]\"\n                  })\n                })\n              })\n            }), \"：首层输出通道数（通常为 320）\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"2-时间嵌入系统\",\n      children: _jsx(_components.a, {\n        href: \"#2-时间嵌入系统\",\n        children: \"2. 时间嵌入系统\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".time_embedding \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" TimestepEmbedding(\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    timestep_input_dim,  \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 时间步编码维度\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    time_embed_dim,       \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 嵌入维度（通常1280）\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"act_fn         \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 激活函数（如silu）\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"功能：将时间步信息编码为条件向量\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"流程：\", \"\\n\", _jsxs(_components.ol, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"通过正弦位置编码生成时间特征\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"经过全连接层和非线性激活\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"与文本嵌入等条件信息融合\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"3-下采样模块\",\n      children: _jsx(_components.a, {\n        href: \"#3-下采样模块\",\n        children: \"3. 下采样模块\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".down_blocks \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.ModuleList([\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    DownBlock2D(\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"320\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"320\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        temb_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1280\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        num_layers\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"2\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        resnet_eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1e-5\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        resnet_act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"silu\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        cross_attention_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"768\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"  # 文本嵌入维度\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    ),\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 其他下采样块...\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"])\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"结构特点：\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsxs(_components.li, {\n            children: [\"每个下采样块包含：\", \"\\n\", _jsxs(_components.ul, {\n              children: [\"\\n\", _jsx(_components.li, {\n                children: \"多个残差块（ResNet）\"\n              }), \"\\n\", _jsx(_components.li, {\n                children: \"交叉注意力层（处理文本条件）\"\n              }), \"\\n\", _jsx(_components.li, {\n                children: \"可能的降采样卷积\"\n              }), \"\\n\"]\n            }), \"\\n\"]\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"典型配置：4 个下采样块，通道数逐级增加（320→640→1280→1280）\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"4-中间模块\",\n      children: _jsx(_components.a, {\n        href: \"#4-中间模块\",\n        children: \"4. 中间模块\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".mid_block \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" UNetMidBlock2DCrossAttn(\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1280\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    temb_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1280\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    resnet_eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1e-5\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    resnet_act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"silu\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"    attn_num_head_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"8\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"核心组成：\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"残差块\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"自注意力机制\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"交叉注意力机制\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"作用：在最低分辨率层进行全局特征整合\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"5-上采样模块\",\n      children: _jsx(_components.a, {\n        href: \"#5-上采样模块\",\n        children: \"5. 上采样模块\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".up_blocks \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.ModuleList([\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    UpBlock2D(\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1280\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        prev_output_channel\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1280\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1280\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        temb_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1280\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        num_layers\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        resnet_eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1e-5\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"        resnet_act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"silu\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"\\\"\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    ),\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 其他上采样块...\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"])\"\n            })\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"关键特性：\", \"\\n\", _jsxs(_components.ul, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"包含残差块和交叉注意力层\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"通过跳跃连接融合下采样特征\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"使用转置卷积或插值进行上采样\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"6-输出处理\",\n      children: _jsx(_components.a, {\n        href: \"#6-输出处理\",\n        children: \"6. 输出处理\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_norm_out \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.GroupNorm(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"32\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"320\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_act \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.SiLU()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_out \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Conv2d(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"320\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"4\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"流程：\", \"\\n\", _jsxs(_components.ol, {\n          children: [\"\\n\", _jsx(_components.li, {\n            children: \"归一化处理\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"激活函数\"\n          }), \"\\n\", _jsx(_components.li, {\n            children: \"最终卷积将特征映射到输出空间（4 通道）\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"条件控制机制\",\n      children: _jsx(_components.a, {\n        href: \"#条件控制机制\",\n        children: _jsx(_components.strong, {\n          children: \"条件控制机制\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"交叉注意力层\",\n      children: _jsx(_components.a, {\n        href: \"#交叉注意力层\",\n        children: \"交叉注意力层\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" CrossAttention\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"query_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"context_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"heads\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"8\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_q \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(query_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_k \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(context_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_v \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(context_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"context\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        q \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_q(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        k \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_k(context)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        v \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_v(context)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 计算注意力权重...\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" output\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"作用：将文本嵌入（context）注入到图像特征中\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"位置：每个下采样和上采样块中都包含该层\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"关键参数说明\",\n      children: _jsx(_components.a, {\n        href: \"#关键参数说明\",\n        children: _jsx(_components.strong, {\n          children: \"关键参数说明\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"参数\"\n          }), _jsx(_components.th, {\n            children: \"典型值\"\n          }), _jsx(_components.th, {\n            children: \"作用\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"cross_attention_dim\"\n                  })\n                })\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"768\"\n          }), _jsx(_components.td, {\n            children: \"文本嵌入的维度（CLIP 文本编码器输出维度）\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"attention_head_dim\"\n                  })\n                })\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"8/16\"\n          }), _jsx(_components.td, {\n            children: \"注意力头的维度\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"layers_per_block\"\n                  })\n                })\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"2\"\n          }), _jsx(_components.td, {\n            children: \"每个块中的残差层数\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"num_attention_heads\"\n                  })\n                })\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"8\"\n          }), _jsx(_components.td, {\n            children: \"注意力头数量\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.span, {\n              \"data-rehype-pretty-code-figure\": \"\",\n              children: _jsx(_components.code, {\n                \"data-language\": \"plaintext\",\n                \"data-theme\": \"plastic\",\n                children: _jsx(_components.span, {\n                  \"data-line\": \"\",\n                  children: _jsx(_components.span, {\n                    children: \"resnet_time_scale_shift\"\n                  })\n                })\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"\\\"default\\\"\"\n          }), _jsx(_components.td, {\n            children: \"时间条件注入方式（add/scale）\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"数据流动示例\",\n      children: _jsx(_components.a, {\n        href: \"#数据流动示例\",\n        children: _jsx(_components.strong, {\n          children: \"数据流动示例\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"timestep\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"encoder_hidden_states\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 1. 输入处理\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_in(x)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 2. 时间嵌入\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    t_emb \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".time_embedding(timestep)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 3. 下采样\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    down_samples \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" []\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"    for\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" down_block \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"in\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".down_blocks:\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" down_block(x, t_emb, encoder_hidden_states)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        down_samples.append(x)\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 4. 中间处理\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".mid_block(x, t_emb, encoder_hidden_states)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 5. 上采样\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"    for\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" up_block \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"in\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".up_blocks:\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" up_block(x, down_samples.pop(), t_emb, encoder_hidden_states)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"    # 6. 输出\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_norm_out(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_act(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"    return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_out(x)\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如果需要更详细的某个组件解析（如下采样块的具体实现），可以进一步展开说明。\"\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-详细解释下采样快的细节\",\n      children: _jsx(_components.a, {\n        href: \"#q-详细解释下采样快的细节\",\n        children: \"Q: 详细解释下采样快的细节\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"好的，下面是 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 中下采样块的详细结构和实现细节：\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"下采样块概述\",\n      children: _jsx(_components.a, {\n        href: \"#下采样块概述\",\n        children: _jsx(_components.strong, {\n          children: \"下采样块概述\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"下采样块的主要功能是逐步降低特征图的空间分辨率，同时增加通道数，以便在更低的分辨率上进行更复杂的特征提取。每个下采样块通常包含多个残差块和一个降采样操作。\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"下采样块的结构\",\n      children: _jsx(_components.a, {\n        href: \"#下采样块的结构\",\n        children: _jsx(_components.strong, {\n          children: \"下采样块的结构\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"1-残差块resnet-block\",\n      children: _jsx(_components.a, {\n        href: \"#1-残差块resnet-block\",\n        children: \"1. 残差块（ResNet Block）\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"每个下采样块包含多个残差块，负责特征提取和非线性变换。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" ResNetBlock\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.GroupNorm(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"32\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", in_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"resnet_eps)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" getattr\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(nn, resnet_act_fn)()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Conv2d(in_channels, out_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"kernel_size\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm2 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.GroupNorm(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"32\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", out_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"resnet_eps)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act2 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" getattr\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(nn, resnet_act_fn)()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv2 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Conv2d(out_channels, out_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"kernel_size\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".temb_proj \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(temb_channels, out_channels)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm1(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act1(h)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv1(h)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm2(h)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act2(h)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv2(h)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 时间嵌入注入\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"+=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".temb_proj(temb)[:, :, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"]\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"+\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" x  \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 残差连接\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"特征归一化\"\n        }), \"：使用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"GroupNorm\"\n              })\n            })\n          })\n        }), \" 进行归一化，稳定训练过程。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"激活函数\"\n        }), \"：通常使用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"SiLU\"\n              })\n            })\n          })\n        }), \" 或 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ReLU\"\n              })\n            })\n          })\n        }), \"。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"卷积层\"\n        }), \"：两个 3x3 卷积层，保持特征图大小不变。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"时间嵌入\"\n        }), \"：通过全连接层将时间嵌入注入到特征图中。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"2-交叉注意力层\",\n      children: _jsx(_components.a, {\n        href: \"#2-交叉注意力层\",\n        children: \"2. 交叉注意力层\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在处理条件输入（如文本嵌入）时，交叉注意力层用于将条件信息注入到特征图中。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" CrossAttention\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"query_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"context_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"heads\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"8\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_q \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(query_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_k \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(context_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_v \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(context_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".scale \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" query_dim \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"**\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" -\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"0.5\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"context\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        q \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_q(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        k \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_k(context)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        v \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_v(context)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        attn_weights \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" torch.einsum(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"bqd,bkd->bqk\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", q, k) \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"*\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".scale\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        attn_weights \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" attn_weights.softmax(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=-\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        out \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" torch.einsum(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"bqk,bvd->bqd\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", attn_weights, v)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" out\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"查询、键、值\"\n        }), \"：通过线性变换生成查询、键和值向量。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"注意力计算\"\n        }), \"：使用缩放点积注意力机制。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"条件注入\"\n        }), \"：将文本嵌入等条件信息注入到特征图中。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"3-降采样操作\",\n      children: _jsx(_components.a, {\n        href: \"#3-降采样操作\",\n        children: \"3. 降采样操作\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"通常使用卷积或池化操作来降低特征图的空间分辨率。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" Downsample\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Conv2d(in_channels, out_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"kernel_size\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"stride\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"2\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv(x)\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"卷积降采样\"\n        }), \"：通过步长为 2 的卷积实现降采样，减少特征图的宽高。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"通道数增加\"\n        }), \"：通常在降采样时增加通道数，以便在更低的分辨率上进行更复杂的特征提取。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"下采样块的完整实现\",\n      children: _jsx(_components.a, {\n        href: \"#下采样块的完整实现\",\n        children: _jsx(_components.strong, {\n          children: \"下采样块的完整实现\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" DownBlock2D\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"num_layers\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"cross_attention_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".resnets \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.ModuleList([\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"            ResNetBlock(in_channels \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"if\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" i \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"==\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \" 0\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" else\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" out_channels, out_channels, temb_channels, resnet_eps, resnet_act_fn)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"            for\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" i \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"in\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" range\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(num_layers)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        ])\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".attention \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" CrossAttention(out_channels, cross_attention_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".downsample \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" Downsample(out_channels, out_channels)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"context\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        for\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" resnet \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"in\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".resnets:\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"            x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" resnet(x, temb)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".attention(x, context)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".downsample(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" x\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"残差块\"\n        }), \"：多个残差块串联，进行特征提取。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"交叉注意力\"\n        }), \"：在特征提取后注入条件信息。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"降采样\"\n        }), \"：降低特征图的空间分辨率。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"总结-3\",\n      children: _jsx(_components.a, {\n        href: \"#总结-3\",\n        children: _jsx(_components.strong, {\n          children: \"总结\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"下采样块在 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 中起到了关键作用，通过多层次的特征提取和条件注入，逐步将输入图像的特征压缩到更低的分辨率，为后续的中间块和上采样块提供丰富的特征信息。\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-详细讲解上采样块的细节\",\n      children: _jsx(_components.a, {\n        href: \"#q-详细讲解上采样块的细节\",\n        children: \"Q: 详细讲解上采样块的细节\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"好的，下面是 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 中上采样块的详细结构和实现细节：\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"上采样块概述\",\n      children: _jsx(_components.a, {\n        href: \"#上采样块概述\",\n        children: _jsx(_components.strong, {\n          children: \"上采样块概述\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"上采样块的主要功能是逐步恢复特征图的空间分辨率，同时结合下采样块的特征，通过跳跃连接（skip connections）实现特征的融合。每个上采样块通常包含多个残差块和一个上采样操作。\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"上采样块的结构\",\n      children: _jsx(_components.a, {\n        href: \"#上采样块的结构\",\n        children: _jsx(_components.strong, {\n          children: \"上采样块的结构\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"1-残差块resnet-block-1\",\n      children: _jsx(_components.a, {\n        href: \"#1-残差块resnet-block-1\",\n        children: \"1. 残差块（ResNet Block）\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"每个上采样块包含多个残差块，负责特征提取和非线性变换。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" ResNetBlock\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.GroupNorm(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"32\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", in_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"resnet_eps)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" getattr\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(nn, resnet_act_fn)()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Conv2d(in_channels, out_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"kernel_size\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm2 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.GroupNorm(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"32\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", out_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"resnet_eps)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act2 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" getattr\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(nn, resnet_act_fn)()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv2 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Conv2d(out_channels, out_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"kernel_size\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".temb_proj \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(temb_channels, out_channels)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm1(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act1(h)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv1(h)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm2(h)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act2(h)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv2(h)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 时间嵌入注入\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"+=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".temb_proj(temb)[:, :, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"]\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"+\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" x  \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 残差连接\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"特征归一化\"\n        }), \"：使用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"GroupNorm\"\n              })\n            })\n          })\n        }), \" 进行归一化，稳定训练过程。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"激活函数\"\n        }), \"：通常使用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"SiLU\"\n              })\n            })\n          })\n        }), \" 或 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ReLU\"\n              })\n            })\n          })\n        }), \"。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"卷积层\"\n        }), \"：两个 3x3 卷积层，保持特征图大小不变。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"时间嵌入\"\n        }), \"：通过全连接层将时间嵌入注入到特征图中。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"2-交叉注意力层-1\",\n      children: _jsx(_components.a, {\n        href: \"#2-交叉注意力层-1\",\n        children: \"2. 交叉注意力层\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在处理条件输入（如文本嵌入）时，交叉注意力层用于将条件信息注入到特征图中。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" CrossAttention\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"query_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"context_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"heads\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"8\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_q \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(query_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_k \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(context_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_v \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(context_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".scale \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" query_dim \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"**\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" -\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"0.5\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"context\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        q \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_q(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        k \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_k(context)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        v \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_v(context)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        attn_weights \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" torch.einsum(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"bqd,bkd->bqk\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", q, k) \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"*\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".scale\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        attn_weights \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" attn_weights.softmax(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=-\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        out \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" torch.einsum(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"bqk,bvd->bqd\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", attn_weights, v)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" out\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"查询、键、值\"\n        }), \"：通过线性变换生成查询、键和值向量。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"注意力计算\"\n        }), \"：使用缩放点积注意力机制。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"条件注入\"\n        }), \"：将文本嵌入等条件信息注入到特征图中。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"3-上采样操作\",\n      children: _jsx(_components.a, {\n        href: \"#3-上采样操作\",\n        children: \"3. 上采样操作\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"通常使用转置卷积或插值操作来增加特征图的空间分辨率。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" Upsample\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.ConvTranspose2d(in_channels, out_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"kernel_size\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"stride\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"2\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"output_padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv(x)\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"转置卷积上采样\"\n        }), \"：通过转置卷积实现上采样，增加特征图的宽高。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"通道数减少\"\n        }), \"：通常在上采样时减少通道数，以便恢复到输入图像的通道数。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"上采样块的完整实现\",\n      children: _jsx(_components.a, {\n        href: \"#上采样块的完整实现\",\n        children: _jsx(_components.strong, {\n          children: \"上采样块的完整实现\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" UpBlock2D\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"prev_output_channel\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"num_layers\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"cross_attention_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".resnets \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.ModuleList([\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"            ResNetBlock(in_channels \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"if\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" i \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"==\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \" 0\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" else\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" out_channels, out_channels, temb_channels, resnet_eps, resnet_act_fn)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"            for\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" i \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"in\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" range\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(num_layers)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        ])\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".attention \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" CrossAttention(out_channels, cross_attention_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".upsample \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" Upsample(out_channels, out_channels)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"res_samples\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"context\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        for\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" resnet \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"in\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".resnets:\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"            x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" resnet(x, temb)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".attention(x, context)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".upsample(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" x\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"残差块\"\n        }), \"：多个残差块串联，进行特征提取。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"交叉注意力\"\n        }), \"：在特征提取后注入条件信息。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"上采样\"\n        }), \"：增加特征图的空间分辨率。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"总结-4\",\n      children: _jsx(_components.a, {\n        href: \"#总结-4\",\n        children: _jsx(_components.strong, {\n          children: \"总结\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"上采样块在 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 中起到了关键作用，通过多层次的特征提取和条件注入，逐步将特征图的分辨率恢复到输入图像的大小，并结合下采样块的特征实现特征的融合。\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-详细讲解中间模块细节\",\n      children: _jsx(_components.a, {\n        href: \"#q-详细讲解中间模块细节\",\n        children: \"Q: 详细讲解中间模块细节\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"好的，下面是 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 中中间模块（Mid Block）的详细结构和实现细节：\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"中间模块概述\",\n      children: _jsx(_components.a, {\n        href: \"#中间模块概述\",\n        children: _jsx(_components.strong, {\n          children: \"中间模块概述\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"中间模块位于下采样和上采样块之间，负责在最低分辨率的特征图上进行全局特征整合。它通常包含残差块和注意力机制，以便在特征图的最小空间维度上进行复杂的特征交互。\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"中间模块的结构\",\n      children: _jsx(_components.a, {\n        href: \"#中间模块的结构\",\n        children: _jsx(_components.strong, {\n          children: \"中间模块的结构\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"1-残差块resnet-block-2\",\n      children: _jsx(_components.a, {\n        href: \"#1-残差块resnet-block-2\",\n        children: \"1. 残差块（ResNet Block）\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"中间模块通常包含一个或多个残差块，用于特征提取和非线性变换。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" ResNetBlock\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.GroupNorm(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"32\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", in_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"resnet_eps)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" getattr\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(nn, resnet_act_fn)()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Conv2d(in_channels, out_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"kernel_size\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm2 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.GroupNorm(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"32\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", out_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"resnet_eps)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act2 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" getattr\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(nn, resnet_act_fn)()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv2 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Conv2d(out_channels, out_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"kernel_size\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".temb_proj \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(temb_channels, out_channels)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm1(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act1(h)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv1(h)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".norm2(h)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act2(h)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv2(h)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 时间嵌入注入\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"+=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".temb_proj(temb)[:, :, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"]\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"+\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" x  \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"# 残差连接\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"特征归一化\"\n        }), \"：使用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"GroupNorm\"\n              })\n            })\n          })\n        }), \" 进行归一化，稳定训练过程。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"激活函数\"\n        }), \"：通常使用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"SiLU\"\n              })\n            })\n          })\n        }), \" 或 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ReLU\"\n              })\n            })\n          })\n        }), \"。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"卷积层\"\n        }), \"：两个 3x3 卷积层，保持特征图大小不变。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"时间嵌入\"\n        }), \"：通过全连接层将时间嵌入注入到特征图中。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"2-自注意力层\",\n      children: _jsx(_components.a, {\n        href: \"#2-自注意力层\",\n        children: \"2. 自注意力层\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"自注意力层用于在特征图的最小空间维度上进行全局特征交互。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" SelfAttention\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"heads\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"8\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_qkv \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(dim, dim \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"*\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \" 3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"bias\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"False\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_out \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(dim, dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".scale \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" dim \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"**\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" -\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"0.5\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        b, n, _, h \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" *\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"x.shape, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".heads\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        qkv \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_qkv(x).chunk(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=-\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        q, k, v \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" map\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"lambda\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \" t\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \": t.reshape(b, n, h, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"-\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \").transpose(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"2\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"), qkv)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        dots \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" torch.einsum(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"bhid,bhjd->bhij\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", q, k) \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"*\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".scale\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        attn \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" dots.softmax(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=-\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        out \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" torch.einsum(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"bhij,bhjd->bhid\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", attn, v)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        out \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" out.transpose(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"2\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \").reshape(b, n, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"-\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_out(out)\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"查询、键、值\"\n        }), \"：通过线性变换生成查询、键和值向量。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"注意力计算\"\n        }), \"：使用缩放点积注意力机制。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"全局特征交互\"\n        }), \"：在特征图的最小空间维度上进行全局特征交互。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"3-交叉注意力层\",\n      children: _jsx(_components.a, {\n        href: \"#3-交叉注意力层\",\n        children: \"3. 交叉注意力层\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在处理条件输入（如文本嵌入）时，交叉注意力层用于将条件信息注入到特征图中。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" CrossAttention\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"query_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"context_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"heads\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"8\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_q \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(query_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_k \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(context_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_v \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(context_dim, query_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".scale \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" query_dim \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"**\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" -\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"0.5\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"context\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        q \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_q(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        k \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_k(context)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        v \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".to_v(context)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        attn_weights \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" torch.einsum(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"bqd,bkd->bqk\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", q, k) \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"*\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".scale\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        attn_weights \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" attn_weights.softmax(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=-\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        out \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" torch.einsum(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"bqk,bvd->bqd\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"'\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", attn_weights, v)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" out\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"查询、键、值\"\n        }), \"：通过线性变换生成查询、键和值向量。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"注意力计算\"\n        }), \"：使用缩放点积注意力机制。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"条件注入\"\n        }), \"：将文本嵌入等条件信息注入到特征图中。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"中间模块的完整实现\",\n      children: _jsx(_components.a, {\n        href: \"#中间模块的完整实现\",\n        children: _jsx(_components.strong, {\n          children: \"中间模块的完整实现\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" UNetMidBlock2DCrossAttn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_eps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"resnet_act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"attn_num_head_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".resnet1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" ResNetBlock(in_channels, in_channels, temb_channels, resnet_eps, resnet_act_fn)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".attn1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" SelfAttention(in_channels, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"heads\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"attn_num_head_channels)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".cross_attn \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" CrossAttention(in_channels, in_channels)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".resnet2 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" ResNetBlock(in_channels, in_channels, temb_channels, resnet_eps, resnet_act_fn)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"temb\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"encoder_hidden_states\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"attention_mask\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"cross_attention_kwargs\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".resnet1(x, temb)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".attn1(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".cross_attn(x, encoder_hidden_states)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".resnet2(x, temb)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" x\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"残差块\"\n        }), \"：两个残差块串联，进行特征提取。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"自注意力\"\n        }), \"：在特征图的最小空间维度上进行全局特征交互。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"交叉注意力\"\n        }), \"：在特征提取后注入条件信息。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"总结-5\",\n      children: _jsx(_components.a, {\n        href: \"#总结-5\",\n        children: _jsx(_components.strong, {\n          children: \"总结\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"中间模块在 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 中起到了关键作用，通过多层次的特征提取和注意力机制，在最低分辨率的特征图上进行全局特征整合，为上采样块提供丰富的特征信息。\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-详细讲解输入处理与输出处理模块细节\",\n      children: _jsx(_components.a, {\n        href: \"#q-详细讲解输入处理与输出处理模块细节\",\n        children: \"Q: 详细讲解输入处理与输出处理模块细节\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"好的，下面是 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 中输入处理和输出处理模块的详细结构和实现细节：\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"输入处理模块\",\n      children: _jsx(_components.a, {\n        href: \"#输入处理模块\",\n        children: _jsx(_components.strong, {\n          children: \"输入处理模块\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"输入处理模块的主要功能是将输入的图像特征（通常是潜在空间表示）映射到模型的初始特征空间。\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"1-输入卷积层\",\n      children: _jsx(_components.a, {\n        href: \"#1-输入卷积层\",\n        children: \"1. 输入卷积层\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" InputProcessing\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_in \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Conv2d(\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"            in_channels,\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"            out_channels,\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"            kernel_size\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"            padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        )\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_in(x)\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"卷积层\"\n        }), \"：使用一个 3x3 的卷积层，将输入的通道数映射到模型的初始通道数。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"作用\"\n        }), \"：将输入图像的特征映射到更高维度的特征空间，以便后续的特征提取。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"输出处理模块\",\n      children: _jsx(_components.a, {\n        href: \"#输出处理模块\",\n        children: _jsx(_components.strong, {\n          children: \"输出处理模块\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"输出处理模块的主要功能是将模型的最终特征图映射回输入的通道数，通常是生成图像的潜在空间表示。\"\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"1-输出卷积层\",\n      children: _jsx(_components.a, {\n        href: \"#1-输出卷积层\",\n        children: \"1. 输出卷积层\"\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" OutputProcessing\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_norm_out \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.GroupNorm(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"32\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", in_channels)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_act \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.SiLU()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_out \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Conv2d(\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"            in_channels,\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"            out_channels,\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"            kernel_size\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"3\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \",\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"            padding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        )\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_norm_out(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_act(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".conv_out(x)\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"归一化层\"\n        }), \"：使用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"GroupNorm\"\n              })\n            })\n          })\n        }), \" 对特征图进行归一化，稳定输出。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"激活函数\"\n        }), \"：使用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"SiLU\"\n              })\n            })\n          })\n        }), \" 激活函数，增加非线性。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"卷积层\"\n        }), \"：使用一个 3x3 的卷积层，将特征图映射回输入的通道数。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"输入与输出处理的完整实现\",\n      children: _jsx(_components.a, {\n        href: \"#输入与输出处理的完整实现\",\n        children: _jsx(_components.strong, {\n          children: \"输入与输出处理的完整实现\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" UNet2DConditionModel\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"in_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"block_out_channels\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 输入处理\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".input_processing \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" InputProcessing(in_channels, block_out_channels[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"0\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"])\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 其他模块（下采样、中间、上采样）\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 输出处理\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".output_processing \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" OutputProcessing(block_out_channels[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"-\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"], out_channels)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 输入处理\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".input_processing(x)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 其他模块处理\"\n            })\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 输出处理\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        x \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".output_processing(x)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" x\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"输入处理\"\n        }), \"：将输入图像的特征映射到模型的初始特征空间。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"输出处理\"\n        }), \"：将模型的最终特征图映射回输入的通道数。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"总结-6\",\n      children: _jsx(_components.a, {\n        href: \"#总结-6\",\n        children: _jsx(_components.strong, {\n          children: \"总结\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"输入处理和输出处理模块在 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 中起到了关键作用，分别负责将输入图像的特征映射到模型的初始特征空间，以及将模型的最终特征图映射回输入的通道数。这两个模块通过简单的卷积操作实现了特征的维度变换，为模型的特征提取和生成提供了基础。\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"q-详细讲解时间嵌入系统的细节\",\n      children: _jsx(_components.a, {\n        href: \"#q-详细讲解时间嵌入系统的细节\",\n        children: \"Q: 详细讲解时间嵌入系统的细节\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"时间嵌入系统在 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 中起到了关键作用，它将时间步信息编码为条件向量，以便在模型的各个阶段中注入时间信息。下面是时间嵌入系统的详细结构和实现细节：\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"时间嵌入系统概述\",\n      children: _jsx(_components.a, {\n        href: \"#时间嵌入系统概述\",\n        children: _jsx(_components.strong, {\n          children: \"时间嵌入系统概述\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"时间嵌入系统的主要功能是将时间步（timestep）信息转换为高维向量，这些向量在模型的残差块中被用作条件信息，以指导模型在不同时间步的特征提取和生成过程。\"\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"时间嵌入系统的结构\",\n      children: _jsx(_components.a, {\n        href: \"#时间嵌入系统的结构\",\n        children: _jsx(_components.strong, {\n          children: \"时间嵌入系统的结构\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"1-正弦位置编码\",\n      children: _jsx(_components.a, {\n        href: \"#1-正弦位置编码\",\n        children: \"1. 正弦位置编码\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"时间嵌入系统通常使用正弦位置编码来生成初始时间特征。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" get_timestep_embedding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"timesteps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"embedding_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    half_dim \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" embedding_dim \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"//\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \" 2\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    emb \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" math.log(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"10000\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \") \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"/\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" (half_dim \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"-\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \" 1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    emb \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" torch.exp(torch.arange(half_dim, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"dtype\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"torch.float32) \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"*\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" -\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"emb)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    emb \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" timesteps[:, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"] \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"*\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" emb[\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"None\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", :]\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"    emb \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" torch.cat([torch.sin(emb), torch.cos(emb)], \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=-\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#56B6C2\"\n              },\n              children: \"1\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"    return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" emb\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"正弦和余弦函数\"\n        }), \"：使用正弦和余弦函数生成时间步的周期性表示。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"维度扩展\"\n        }), \"：将时间步扩展为高维向量，维度为 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"embedding_dim\"\n              })\n            })\n          })\n        }), \"。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h4, {\n      id: \"2-时间嵌入层\",\n      children: _jsx(_components.a, {\n        href: \"#2-时间嵌入层\",\n        children: \"2. 时间嵌入层\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"时间嵌入层将正弦位置编码的输出进一步转换为模型所需的高维条件向量。\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" TimestepEmbedding\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"timestep_input_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"time_embed_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".linear1 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(timestep_input_dim, time_embed_dim)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" getattr\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(nn, act_fn)()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".linear2 \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" nn.Linear(time_embed_dim, time_embed_dim)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"timesteps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        emb \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" get_timestep_embedding(timesteps, \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".linear1.in_features)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        emb \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".linear1(emb)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        emb \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".act(emb)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        emb \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".linear2(emb)\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" emb\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"线性变换\"\n        }), \"：使用两个线性层将时间步嵌入转换为高维条件向量。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"激活函数\"\n        }), \"：通常使用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"SiLU\"\n              })\n            })\n          })\n        }), \" 或 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ReLU\"\n              })\n            })\n          })\n        }), \" 激活函数，增加非线性。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"时间嵌入系统的完整实现\",\n      children: _jsx(_components.a, {\n        href: \"#时间嵌入系统的完整实现\",\n        children: _jsx(_components.strong, {\n          children: \"时间嵌入系统的完整实现\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"python\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"python\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"class\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \" UNet2DConditionModel\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"nn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#D19A66\"\n              },\n              children: \"Module\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" __init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"timestep_input_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"time_embed_dim\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"act_fn\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"        super\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"().\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \"__init__\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"()\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".time_embedding \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" TimestepEmbedding(timestep_input_dim, time_embed_dim, act_fn)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"    def\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" forward\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"x\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"timesteps\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"):\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 时间嵌入\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"        t_emb \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"=\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \" self\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \".time_embedding(timesteps)\"\n            })]\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: \" \"\n          }), \"\\n\", _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              style: {\n                color: \"#5F6672\",\n                fontStyle: \"italic\"\n              },\n              children: \"        # 其他模块处理\"\n            })\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"        return\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" x\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"时间嵌入\"\n        }), \"：将时间步信息转换为高维条件向量。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"注入到模型\"\n        }), \"：时间嵌入被注入到模型的各个阶段，指导特征提取和生成。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.h3, {\n      id: \"总结-7\",\n      children: _jsx(_components.a, {\n        href: \"#总结-7\",\n        children: _jsx(_components.strong, {\n          children: \"总结\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"时间嵌入系统在 \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"UNet2DConditionModel\"\n            })\n          })\n        })\n      }), \" 中起到了关键作用，通过将时间步信息编码为高维条件向量，指导模型在不同时间步的特征提取和生成过程。这一系统通过正弦位置编码和线性变换实现了时间信息的高效编码，为模型的时间条件注入提供了基础。\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"capturedResult":{"trees":[{"key":"q-train_text_to_image_lorapy-这段代码中如何体现-lora-使用两个低秩矩阵进行微调-的步骤","href":"#q-train_text_to_image_lorapy-这段代码中如何体现-lora-使用两个低秩矩阵进行微调-的步骤","heading":1,"title":"Q: @train_text_to_image_lora.py 这段代码中如何体现 LoRA “使用两个低秩矩阵进行微调” 的步骤？","children":[{"key":"1-lora-配置","href":"#1-lora-配置","heading":3,"title":"1. LoRA 配置","children":[],"id":"1-lora-配置"},{"key":"2-添加-lora-层","href":"#2-添加-lora-层","heading":3,"title":"2. 添加 LoRA 层","children":[],"id":"2-添加-lora-层"},{"key":"3-训练过程中的权重更新","href":"#3-训练过程中的权重更新","heading":3,"title":"3. 训练过程中的权重更新","children":[],"id":"3-训练过程中的权重更新"},{"key":"4-参数更新","href":"#4-参数更新","heading":3,"title":"4. 参数更新","children":[],"id":"4-参数更新"},{"key":"总结","href":"#总结","heading":3,"title":"总结","children":[],"id":"总结"}],"id":"q-train_text_to_image_lorapy-这段代码中如何体现-lora-使用两个低秩矩阵进行微调-的步骤"},{"key":"q-unet-是个什么样的结构","href":"#q-unet-是个什么样的结构","heading":1,"title":"Q: unet 是个什么样的结构？","children":[{"key":"unet-的基本结构","href":"#unet-的基本结构","heading":3,"title":"UNet 的基本结构","children":[],"id":"unet-的基本结构"},{"key":"unet-在-stable-diffusion-中的应用","href":"#unet-在-stable-diffusion-中的应用","heading":3,"title":"UNet 在 Stable Diffusion 中的应用","children":[],"id":"unet-在-stable-diffusion-中的应用"},{"key":"unet-的优势","href":"#unet-的优势","heading":3,"title":"UNet 的优势","children":[],"id":"unet-的优势"}],"id":"q-unet-是个什么样的结构"},{"key":"q-为什么这里-unet-vae--tokenizer-等几个模型都是从同一个路径加载的","href":"#q-为什么这里-unet-vae--tokenizer-等几个模型都是从同一个路径加载的","heading":1,"title":"Q: 为什么这里 unet、 vae 、 tokenizer 等几个模型都是从同一个路径加载的？","children":[{"key":"1-统一的模型路径","href":"#1-统一的模型路径","heading":3,"title":"1. 统一的模型路径","children":[],"id":"1-统一的模型路径"},{"key":"2-各个组件的作用","href":"#2-各个组件的作用","heading":3,"title":"2. 各个组件的作用","children":[],"id":"2-各个组件的作用"},{"key":"3-统一加载的好处","href":"#3-统一加载的好处","heading":3,"title":"3. 统一加载的好处","children":[],"id":"3-统一加载的好处"}],"id":"q-为什么这里-unet-vae--tokenizer-等几个模型都是从同一个路径加载的"},{"key":"q-这些是-stable-diffusion-的内部设计对吧这些都在哪篇论文里提出的-web","href":"#q-这些是-stable-diffusion-的内部设计对吧这些都在哪篇论文里提出的-web","heading":1,"title":"Q: 这些是 Stable Diffusion 的内部设计对吧？这些都在哪篇论文里提出的？ @Web","children":[],"id":"q-这些是-stable-diffusion-的内部设计对吧这些都在哪篇论文里提出的-web"},{"key":"q-解释-stablediffusionpipeline-的结构-pipeline_stable_diffusionpy","href":"#q-解释-stablediffusionpipeline-的结构-pipeline_stable_diffusionpy","heading":1,"title":"Q: 解释 StableDiffusionPipeline 的结构 @pipeline_stable_diffusion.py","children":[{"key":"继承关系","href":"#继承关系","heading":3,"title":"继承关系","children":[],"id":"继承关系"},{"key":"初始化方法","href":"#初始化方法","heading":3,"title":"初始化方法","children":[],"id":"初始化方法"},{"key":"功能和方法","href":"#功能和方法","heading":3,"title":"功能和方法","children":[],"id":"功能和方法"},{"key":"属性","href":"#属性","heading":3,"title":"属性","children":[],"id":"属性"},{"key":"设计目的","href":"#设计目的","heading":3,"title":"设计目的","children":[],"id":"设计目的"}],"id":"q-解释-stablediffusionpipeline-的结构-pipeline_stable_diffusionpy"},{"key":"q-pipeline_utilspy-解释-diffusionpipeline-的结构以及-from_pretrained-在做什么","href":"#q-pipeline_utilspy-解释-diffusionpipeline-的结构以及-from_pretrained-在做什么","heading":1,"title":"Q: @pipeline_utils.py 解释 DiffusionPipeline 的结构，以及 from_pretrained 在做什么","children":[{"key":"diffusionpipeline-的结构","href":"#diffusionpipeline-的结构","heading":3,"title":"DiffusionPipeline 的结构","children":[],"id":"diffusionpipeline-的结构"},{"key":"from_pretrained-方法","href":"#from_pretrained-方法","heading":3,"title":"from_pretrained 方法","children":[],"id":"from_pretrained-方法"},{"key":"设计目的-1","href":"#设计目的-1","heading":3,"title":"设计目的","children":[],"id":"设计目的-1"}],"id":"q-pipeline_utilspy-解释-diffusionpipeline-的结构以及-from_pretrained-在做什么"},{"key":"q-train_text_to_image_lorapy-里从-diffusionpipelinefrom_pretrained-加载到了-pipeline_stable_diffusionpy-中-stablediffusionpipeline-类的实例我理解的对吗","href":"#q-train_text_to_image_lorapy-里从-diffusionpipelinefrom_pretrained-加载到了-pipeline_stable_diffusionpy-中-stablediffusionpipeline-类的实例我理解的对吗","heading":1,"title":"Q: @train_text_to_image_lora.py 里，从 DiffusionPipeline.from_pretrained 加载到了 @pipeline_stable_diffusion.py 中 StableDiffusionPipeline 类的实例，我理解的对吗？","children":[{"key":"具体过程如下","href":"#具体过程如下","heading":3,"title":"具体过程如下：","children":[],"id":"具体过程如下"}],"id":"q-train_text_to_image_lorapy-里从-diffusionpipelinefrom_pretrained-加载到了-pipeline_stable_diffusionpy-中-stablediffusionpipeline-类的实例我理解的对吗"},{"key":"q-解读-pipeline_utilspy-中-from_pretrained-代码详细说明如何识别模型类型选择管道类-codebase","href":"#q-解读-pipeline_utilspy-中-from_pretrained-代码详细说明如何识别模型类型选择管道类-codebase","heading":1,"title":"Q: 解读 @pipeline_utils.py 中 from_pretrained 代码，详细说明如何识别模型类型选择管道类。 @Codebase","children":[{"key":"识别模型类型并选择管道类的步骤","href":"#识别模型类型并选择管道类的步骤","heading":3,"title":"识别模型类型并选择管道类的步骤","children":[],"id":"识别模型类型并选择管道类的步骤"}],"id":"q-解读-pipeline_utilspy-中-from_pretrained-代码详细说明如何识别模型类型选择管道类-codebase"},{"key":"q-如果我只有一个-sd_xl_base_10safetensors-文件是否无法使用-from_pretrained-方法得到具体的-pipeline-实例","href":"#q-如果我只有一个-sd_xl_base_10safetensors-文件是否无法使用-from_pretrained-方法得到具体的-pipeline-实例","heading":1,"title":"Q: 如果我只有一个 sd_xl_base_1.0.safetensors 文件，是否无法使用 from_pretrained 方法得到具体的 Pipeline 实例？","children":[{"key":"解决方案","href":"#解决方案","heading":3,"title":"解决方案","children":[],"id":"解决方案"},{"key":"总结-1","href":"#总结-1","heading":3,"title":"总结","children":[],"id":"总结-1"}],"id":"q-如果我只有一个-sd_xl_base_10safetensors-文件是否无法使用-from_pretrained-方法得到具体的-pipeline-实例"},{"key":"q-如果我只需要进行推理是否仍需配置文件","href":"#q-如果我只需要进行推理是否仍需配置文件","heading":1,"title":"Q: 如果我只需要进行推理，是否仍需配置文件？","children":[{"key":"为什么需要配置文件","href":"#为什么需要配置文件","heading":3,"title":"为什么需要配置文件","children":[],"id":"为什么需要配置文件"},{"key":"没有配置文件时的推理","href":"#没有配置文件时的推理","heading":3,"title":"没有配置文件时的推理","children":[],"id":"没有配置文件时的推理"},{"key":"总结-2","href":"#总结-2","heading":3,"title":"总结","children":[],"id":"总结-2"}],"id":"q-如果我只需要进行推理是否仍需配置文件"},{"key":"q-以你上面举的例子为例pipeline_loading_utilspy-load_sub_model-中实例化的是-unet_2d_conditionpy-中的-unet2dconditionmodel-类吗-load_sub_model-是怎么找到这个类并实例化的","href":"#q-以你上面举的例子为例pipeline_loading_utilspy-load_sub_model-中实例化的是-unet_2d_conditionpy-中的-unet2dconditionmodel-类吗-load_sub_model-是怎么找到这个类并实例化的","heading":1,"title":"Q: 以你上面举的例子为例，@pipeline_loading_utils.py load_sub_model 中，实例化的是 @unet_2d_condition.py 中的 UNet2DConditionModel 类吗？ load_sub_model 是怎么找到这个类并实例化的？","children":[{"key":"核心加载流程","href":"#核心加载流程","heading":3,"title":"核心加载流程","children":[],"id":"核心加载流程"},{"key":"具体步骤解析","href":"#具体步骤解析","heading":3,"title":"具体步骤解析","children":[{"key":"1-类对象获取-get_class_obj_and_candidates","href":"#1-类对象获取-get_class_obj_and_candidates","heading":4,"title":"1. 类对象获取 (get_class_obj_and_candidates)","children":[],"id":"1-类对象获取-get_class_obj_and_candidates"},{"key":"2-加载方法匹配","href":"#2-加载方法匹配","heading":4,"title":"2. 加载方法匹配","children":[],"id":"2-加载方法匹配"},{"key":"3-加载方法绑定","href":"#3-加载方法绑定","heading":4,"title":"3. 加载方法绑定","children":[],"id":"3-加载方法绑定"},{"key":"4-实例化-unet","href":"#4-实例化-unet","heading":4,"title":"4. 实例化 UNet","children":[],"id":"4-实例化-unet"}],"id":"具体步骤解析"},{"key":"unet2dconditionmodel-的注册机制","href":"#unet2dconditionmodel-的注册机制","heading":3,"title":"UNet2DConditionModel 的注册机制","children":[],"id":"unet2dconditionmodel-的注册机制"},{"key":"架构参数如何生效","href":"#架构参数如何生效","heading":3,"title":"架构参数如何生效","children":[],"id":"架构参数如何生效"},{"key":"总结流程图","href":"#总结流程图","heading":3,"title":"总结流程图","children":[],"id":"总结流程图"}],"id":"q-以你上面举的例子为例pipeline_loading_utilspy-load_sub_model-中实例化的是-unet_2d_conditionpy-中的-unet2dconditionmodel-类吗-load_sub_model-是怎么找到这个类并实例化的"},{"key":"q-解析代码详解modeling_utilspy-的-from_pretrained-如何实例化-unet_2d_conditionpy-中的-unet2dconditionmodel-","href":"#q-解析代码详解modeling_utilspy-的-from_pretrained-如何实例化-unet_2d_conditionpy-中的-unet2dconditionmodel-","heading":1,"title":"Q: 解析代码，详解@modeling_utils.py 的 from_pretrained 如何实例化 @unet_2d_condition.py 中的 UNet2DConditionModel ？","children":[],"id":"q-解析代码详解modeling_utilspy-的-from_pretrained-如何实例化-unet_2d_conditionpy-中的-unet2dconditionmodel-"},{"key":"from_pretrained-如何实例化-unet2dconditionmodel-的详细流程","href":"#from_pretrained-如何实例化-unet2dconditionmodel-的详细流程","heading":1,"title":"from_pretrained 如何实例化 UNet2DConditionModel 的详细流程","children":[{"key":"1-加载配置文件","href":"#1-加载配置文件","heading":2,"title":"1. 加载配置文件","children":[],"id":"1-加载配置文件"},{"key":"2-创建空模型实例","href":"#2-创建空模型实例","heading":2,"title":"2. 创建空模型实例","children":[],"id":"2-创建空模型实例"},{"key":"3-加载权重文件","href":"#3-加载权重文件","heading":2,"title":"3. 加载权重文件","children":[],"id":"3-加载权重文件"},{"key":"4-将权重加载到模型中","href":"#4-将权重加载到模型中","heading":2,"title":"4. 将权重加载到模型中","children":[],"id":"4-将权重加载到模型中"},{"key":"5-设备分配和后处理","href":"#5-设备分配和后处理","heading":2,"title":"5. 设备分配和后处理","children":[],"id":"5-设备分配和后处理"},{"key":"6-返回实例化的模型","href":"#6-返回实例化的模型","heading":2,"title":"6. 返回实例化的模型","children":[],"id":"6-返回实例化的模型"},{"key":"关键实现细节","href":"#关键实现细节","heading":2,"title":"关键实现细节","children":[],"id":"关键实现细节"}],"id":"from_pretrained-如何实例化-unet2dconditionmodel-的详细流程"},{"key":"q-详细解释-unet_2d_conditionpy-中-unet2dconditionmodel-的结构","href":"#q-详细解释-unet_2d_conditionpy-中-unet2dconditionmodel-的结构","heading":1,"title":"Q: 详细解释 @unet_2d_condition.py 中 UNet2DConditionModel 的结构","children":[{"key":"整体架构","href":"#整体架构","heading":3,"title":"整体架构","children":[],"id":"整体架构"},{"key":"核心组件","href":"#核心组件","heading":3,"title":"核心组件","children":[{"key":"1-输入处理","href":"#1-输入处理","heading":4,"title":"1. 输入处理","children":[],"id":"1-输入处理"},{"key":"2-时间嵌入系统","href":"#2-时间嵌入系统","heading":4,"title":"2. 时间嵌入系统","children":[],"id":"2-时间嵌入系统"},{"key":"3-下采样模块","href":"#3-下采样模块","heading":4,"title":"3. 下采样模块","children":[],"id":"3-下采样模块"},{"key":"4-中间模块","href":"#4-中间模块","heading":4,"title":"4. 中间模块","children":[],"id":"4-中间模块"},{"key":"5-上采样模块","href":"#5-上采样模块","heading":4,"title":"5. 上采样模块","children":[],"id":"5-上采样模块"},{"key":"6-输出处理","href":"#6-输出处理","heading":4,"title":"6. 输出处理","children":[],"id":"6-输出处理"}],"id":"核心组件"},{"key":"条件控制机制","href":"#条件控制机制","heading":3,"title":"条件控制机制","children":[{"key":"交叉注意力层","href":"#交叉注意力层","heading":4,"title":"交叉注意力层","children":[],"id":"交叉注意力层"}],"id":"条件控制机制"},{"key":"关键参数说明","href":"#关键参数说明","heading":3,"title":"关键参数说明","children":[],"id":"关键参数说明"},{"key":"数据流动示例","href":"#数据流动示例","heading":3,"title":"数据流动示例","children":[],"id":"数据流动示例"}],"id":"q-详细解释-unet_2d_conditionpy-中-unet2dconditionmodel-的结构"},{"key":"q-详细解释下采样快的细节","href":"#q-详细解释下采样快的细节","heading":1,"title":"Q: 详细解释下采样快的细节","children":[{"key":"下采样块概述","href":"#下采样块概述","heading":3,"title":"下采样块概述","children":[],"id":"下采样块概述"},{"key":"下采样块的结构","href":"#下采样块的结构","heading":3,"title":"下采样块的结构","children":[{"key":"1-残差块resnet-block","href":"#1-残差块resnet-block","heading":4,"title":"1. 残差块（ResNet Block）","children":[],"id":"1-残差块resnet-block"},{"key":"2-交叉注意力层","href":"#2-交叉注意力层","heading":4,"title":"2. 交叉注意力层","children":[],"id":"2-交叉注意力层"},{"key":"3-降采样操作","href":"#3-降采样操作","heading":4,"title":"3. 降采样操作","children":[],"id":"3-降采样操作"}],"id":"下采样块的结构"},{"key":"下采样块的完整实现","href":"#下采样块的完整实现","heading":3,"title":"下采样块的完整实现","children":[],"id":"下采样块的完整实现"},{"key":"总结-3","href":"#总结-3","heading":3,"title":"总结","children":[],"id":"总结-3"}],"id":"q-详细解释下采样快的细节"},{"key":"q-详细讲解上采样块的细节","href":"#q-详细讲解上采样块的细节","heading":1,"title":"Q: 详细讲解上采样块的细节","children":[{"key":"上采样块概述","href":"#上采样块概述","heading":3,"title":"上采样块概述","children":[],"id":"上采样块概述"},{"key":"上采样块的结构","href":"#上采样块的结构","heading":3,"title":"上采样块的结构","children":[{"key":"1-残差块resnet-block-1","href":"#1-残差块resnet-block-1","heading":4,"title":"1. 残差块（ResNet Block）","children":[],"id":"1-残差块resnet-block-1"},{"key":"2-交叉注意力层-1","href":"#2-交叉注意力层-1","heading":4,"title":"2. 交叉注意力层","children":[],"id":"2-交叉注意力层-1"},{"key":"3-上采样操作","href":"#3-上采样操作","heading":4,"title":"3. 上采样操作","children":[],"id":"3-上采样操作"}],"id":"上采样块的结构"},{"key":"上采样块的完整实现","href":"#上采样块的完整实现","heading":3,"title":"上采样块的完整实现","children":[],"id":"上采样块的完整实现"},{"key":"总结-4","href":"#总结-4","heading":3,"title":"总结","children":[],"id":"总结-4"}],"id":"q-详细讲解上采样块的细节"},{"key":"q-详细讲解中间模块细节","href":"#q-详细讲解中间模块细节","heading":1,"title":"Q: 详细讲解中间模块细节","children":[{"key":"中间模块概述","href":"#中间模块概述","heading":3,"title":"中间模块概述","children":[],"id":"中间模块概述"},{"key":"中间模块的结构","href":"#中间模块的结构","heading":3,"title":"中间模块的结构","children":[{"key":"1-残差块resnet-block-2","href":"#1-残差块resnet-block-2","heading":4,"title":"1. 残差块（ResNet Block）","children":[],"id":"1-残差块resnet-block-2"},{"key":"2-自注意力层","href":"#2-自注意力层","heading":4,"title":"2. 自注意力层","children":[],"id":"2-自注意力层"},{"key":"3-交叉注意力层","href":"#3-交叉注意力层","heading":4,"title":"3. 交叉注意力层","children":[],"id":"3-交叉注意力层"}],"id":"中间模块的结构"},{"key":"中间模块的完整实现","href":"#中间模块的完整实现","heading":3,"title":"中间模块的完整实现","children":[],"id":"中间模块的完整实现"},{"key":"总结-5","href":"#总结-5","heading":3,"title":"总结","children":[],"id":"总结-5"}],"id":"q-详细讲解中间模块细节"},{"key":"q-详细讲解输入处理与输出处理模块细节","href":"#q-详细讲解输入处理与输出处理模块细节","heading":1,"title":"Q: 详细讲解输入处理与输出处理模块细节","children":[{"key":"输入处理模块","href":"#输入处理模块","heading":3,"title":"输入处理模块","children":[{"key":"1-输入卷积层","href":"#1-输入卷积层","heading":4,"title":"1. 输入卷积层","children":[],"id":"1-输入卷积层"}],"id":"输入处理模块"},{"key":"输出处理模块","href":"#输出处理模块","heading":3,"title":"输出处理模块","children":[{"key":"1-输出卷积层","href":"#1-输出卷积层","heading":4,"title":"1. 输出卷积层","children":[],"id":"1-输出卷积层"}],"id":"输出处理模块"},{"key":"输入与输出处理的完整实现","href":"#输入与输出处理的完整实现","heading":3,"title":"输入与输出处理的完整实现","children":[],"id":"输入与输出处理的完整实现"},{"key":"总结-6","href":"#总结-6","heading":3,"title":"总结","children":[],"id":"总结-6"}],"id":"q-详细讲解输入处理与输出处理模块细节"},{"key":"q-详细讲解时间嵌入系统的细节","href":"#q-详细讲解时间嵌入系统的细节","heading":1,"title":"Q: 详细讲解时间嵌入系统的细节","children":[{"key":"时间嵌入系统概述","href":"#时间嵌入系统概述","heading":3,"title":"时间嵌入系统概述","children":[],"id":"时间嵌入系统概述"},{"key":"时间嵌入系统的结构","href":"#时间嵌入系统的结构","heading":3,"title":"时间嵌入系统的结构","children":[{"key":"1-正弦位置编码","href":"#1-正弦位置编码","heading":4,"title":"1. 正弦位置编码","children":[],"id":"1-正弦位置编码"},{"key":"2-时间嵌入层","href":"#2-时间嵌入层","heading":4,"title":"2. 时间嵌入层","children":[],"id":"2-时间嵌入层"}],"id":"时间嵌入系统的结构"},{"key":"时间嵌入系统的完整实现","href":"#时间嵌入系统的完整实现","heading":3,"title":"时间嵌入系统的完整实现","children":[],"id":"时间嵌入系统的完整实现"},{"key":"总结-7","href":"#总结-7","heading":3,"title":"总结","children":[],"id":"总结-7"}],"id":"q-详细讲解时间嵌入系统的细节"}]},"meta":{"content":"\n> [!summary]\n> 以下内容为 Cursor 中拥有 codebase 上下文的情况下与 claude-3.7-sonnet 的对话记录\n\n# Q: @train_text_to_image_lora.py 这段代码中如何体现 LoRA “使用两个低秩矩阵进行微调” 的步骤？\n\n在 `train_text_to_image_lora.py` 脚本中，LoRA（Low-Rank Adaptation）通过在模型的特定层中插入低秩矩阵来实现微调。这种方法通过添加两个低秩矩阵来调整模型的权重，而不改变原始权重，从而实现参数高效的微调。\n\n以下是脚本中如何体现 LoRA 使用两个低秩矩阵进行微调的步骤：\n\n### 1. LoRA 配置\n\n在脚本中，LoRA 的配置通常通过 `LoraConfig` 类来定义。这个配置包括低秩矩阵的秩（`rank`）和其他参数：\n\n```python\nunet_lora_config = LoraConfig(\n    r=args.rank,  # 低秩矩阵的秩\n    lora_alpha=args.rank,  # LoRA 的缩放因子\n    init_lora_weights=\"gaussian\",  # 初始化权重的方法\n    target_modules=[\"to_k\", \"to_q\", \"to_v\", \"to_out.0\"],  # 目标模块\n)\n```\n\n### 2. 添加 LoRA 层\n\n在模型中插入 LoRA 层是通过调用 `add_adapter` 方法实现的：\n\n```python\nunet.add_adapter(unet_lora_config)\n```\n\n这个方法会在指定的目标模块中插入两个低秩矩阵 \\(A\\) 和 \\(B\\)，用于调整模型的权重。具体来说，LoRA 在模型的注意力层中插入这些矩阵，以便在不改变原始权重的情况下进行微调。\n\n### 3. 训练过程中的权重更新\n\n在训练过程中，只有 LoRA 插入的低秩矩阵的参数是可训练的。原始模型的权重保持冻结状态。这是通过以下代码实现的：\n\n```python\n# freeze parameters of models to save more memory\nunet.requires_grad_(False)\nvae.requires_grad_(False)\ntext_encoder.requires_grad_(False)\n```\n\n通过这种方式，训练过程只会更新 LoRA 层的参数，而不会影响原始模型的权重。\n\n### 4. 参数更新\n\n在训练循环中，反向传播和参数更新步骤只会影响 LoRA 层的参数：\n\n```python\n# Backpropagate\naccelerator.backward(loss)\nif accelerator.sync_gradients:\n    params_to_clip = lora_layers\n    accelerator.clip_grad_norm_(params_to_clip, args.max_grad_norm)\noptimizer.step()\nlr_scheduler.step()\noptimizer.zero_grad()\n```\n\n这里的 `lora_layers` 是一个过滤器，只包含 LoRA 层的可训练参数。\n\n### 总结\n\n通过在模型的特定层中插入两个低秩矩阵，LoRA 实现了参数高效的微调。这种方法允许在不改变原始模型权重的情况下，通过调整低秩矩阵来适应新的数据分布，从而实现高效的模型微调。\n\n# Q: unet 是个什么样的结构？\n\nUNet 是一种常用于图像生成和分割任务的神经网络架构。它最初是在医学图像分割领域中引入的，但由于其强大的特性和灵活性，UNet 也被广泛应用于其他计算机视觉任务，包括图像生成、去噪和超分辨率等。\n\n### UNet 的基本结构\n\nUNet 的结构可以分为两个主要部分：编码器（下采样路径）和解码器（上采样路径），中间通过跳跃连接（skip connections）相连。\n\n1. **编码器（下采样路径）**：\n\n   - 由一系列卷积层和池化层组成。\n   - 每个卷积层通常后接一个激活函数（如 ReLU）。\n   - 池化层用于逐步减少特征图的空间维度，同时增加特征的抽象程度。\n\n2. **解码器（上采样路径）**：\n\n   - 由一系列上采样层（如反卷积或上采样）和卷积层组成。\n   - 逐步恢复特征图的空间维度。\n   - 使用跳跃连接将编码器中相应层的特征图与解码器中的特征图连接，以保留细节信息。\n\n3. **跳跃连接（Skip Connections）**：\n   - 将编码器中的特征图直接连接到解码器中相应层的特征图。\n   - 这种连接方式有助于保留输入图像的细节信息，改善生成结果的质量。\n\n### UNet 在 Stable Diffusion 中的应用\n\n在 Stable Diffusion 模型中，UNet 作为核心组件用于处理图像的潜在表示。具体来说，UNet 在扩散模型中用于预测噪声残差，从而逐步生成高质量的图像。\n\n- **输入**：UNet 接收一个带有噪声的潜在表示（通常是一个低维的特征图）。\n- **输出**：UNet 输出一个与输入相同大小的特征图，表示对噪声的预测。\n- **训练目标**：通过最小化预测噪声与真实噪声之间的差异，UNet 学会如何去除噪声，从而生成清晰的图像。\n\n### UNet 的优势\n\n- **高效的特征提取**：通过编码器提取多尺度特征。\n- **细节保留**：通过跳跃连接保留输入图像的细节信息。\n- **灵活性**：可以适应不同的输入尺寸和任务需求。\n\nUNet 的这种结构使其在图像生成任务中表现出色，特别是在需要高分辨率输出和细节保留的场景中。\n\n# Q: 为什么这里 unet、 vae 、 tokenizer 等几个模型都是从同一个路径加载的？\n\n在这个代码片段中，`unet`、`vae`、`tokenizer` 和其他组件都是从同一个路径加载的，这是因为它们都是 Stable Diffusion 模型的一部分。Stable Diffusion 是一个复杂的生成模型，通常由多个子模块组成，每个子模块负责不同的任务。以下是这些组件的作用和为什么它们从同一路径加载的原因：\n\n### 1. 统一的模型路径\n\n- **路径一致性**：所有这些组件都从同一个路径加载，因为它们通常被打包在一个预训练模型中。这个路径通常指向一个包含所有必要文件的目录或一个 Hugging Face Hub 上的模型仓库。\n- **版本控制**：通过从同一个路径加载，确保所有组件使用的是同一个版本的模型，避免版本不匹配导致的兼容性问题。\n\n### 2. 各个组件的作用\n\n- **UNet (`unet`)**：\n\n  - 负责处理图像的潜在表示，预测噪声残差。\n  - 在扩散模型中用于逐步生成高质量的图像。\n\n- **VAE (`vae`)**：\n\n  - 自动编码器，用于将图像编码为潜在空间表示，并从潜在空间解码回图像。\n  - 在 Stable Diffusion 中，VAE 用于将输入图像转换为潜在表示，供 UNet 处理。\n\n- **Tokenizer (`tokenizer`)**：\n\n  - 用于将文本输入（如生成图像的描述）转换为模型可理解的标记。\n  - 在文本到图像生成任务中，tokenizer 将文本描述转换为输入 ID，供文本编码器使用。\n\n- **Text Encoder (`text_encoder`)**：\n\n  - 将文本输入编码为特征向量，供 UNet 使用。\n  - 在生成过程中，文本编码器提供条件信息，指导图像生成。\n\n- **Noise Scheduler (`noise_scheduler`)**：\n  - 控制扩散过程中的噪声添加和去除。\n  - 在训练和推理过程中，调度器决定在每个时间步添加多少噪声。\n\n### 3. 统一加载的好处\n\n- **简化管理**：从同一位置加载所有组件简化了模型管理和部署。\n- **一致性**：确保所有组件在同一训练配置下工作，避免不兼容问题。\n- **便捷性**：用户只需指定一个路径或模型标识符，即可加载整个模型的所有必要部分。\n\n通过这种方式，用户可以方便地使用预训练的 Stable Diffusion 模型进行微调或推理，而不必单独管理每个组件的版本和路径。\n\n# Q: 这些是 Stable Diffusion 的内部设计对吧？这些都在哪篇论文里提出的？ @Web\n\nStable Diffusion 是一种基于扩散模型的图像生成技术，其核心组件和设计在多篇论文中得到了详细描述。以下是与 Stable Diffusion 相关的关键论文：\n\n1. **扩散模型的基础**：\n\n   - **论文**：_Denoising Diffusion Probabilistic Models_ by Jonathan Ho, Ajay Jain, Pieter Abbeel (2020)\n   - **链接**：[arXiv:2006.11239](https://arxiv.org/abs/2006.11239)\n   - **内容**：这篇论文介绍了扩散模型的基本原理和去噪过程，是 Stable Diffusion 的理论基础。\n\n2. **Stable Diffusion 的具体实现**：\n\n   - **论文**：_High-Resolution Image Synthesis with Latent Diffusion Models_ by Robin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, Björn Ommer (2021)\n   - **链接**：[arXiv:2112.10752](https://arxiv.org/abs/2112.10752)\n   - **内容**：这篇论文详细描述了 Stable Diffusion 的架构，包括使用潜在空间的扩散模型、VAE 的应用以及如何在高分辨率图像生成中实现高效计算。\n\n3. **CLIP 模型的使用**：\n   - **论文**：_Learning Transferable Visual Models From Natural Language Supervision_ by Alec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, Gretchen Krueger, Ilya Sutskever (2021)\n   - **链接**：[arXiv:2103.00020](https://arxiv.org/abs/2103.00020)\n   - **内容**：CLIP 模型用于将文本和图像结合在一起进行训练，Stable Diffusion 使用 CLIP 作为文本编码器来处理文本输入。\n\n这些论文共同构成了 Stable Diffusion 的理论和技术基础，描述了其内部设计和实现细节。通过结合扩散模型、VAE 和 CLIP，Stable Diffusion 实现了高效的文本到图像生成。\n\n# Q: 解释 StableDiffusionPipeline 的结构 @pipeline_stable_diffusion.py\n\n`StableDiffusionPipeline` 是一个用于实现 Stable Diffusion 模型的核心类，负责将多个组件组合在一起以实现文本到图像的生成。以下是对 `StableDiffusionPipeline` 结构的详细解释：\n\n### 继承关系\n\n`StableDiffusionPipeline` 继承了多个类，这些类为其提供了不同的功能：\n\n- **DiffusionPipeline**: 提供了基本的扩散模型功能。\n- **StableDiffusionMixin**: 包含与 Stable Diffusion 相关的特定功能。\n- **TextualInversionLoaderMixin**: 支持文本反转加载功能。\n- **StableDiffusionLoraLoaderMixin**: 支持 LoRA（低秩适应）加载功能。\n- **IPAdapterMixin**: 提供 IP 适配器功能。\n- **FromSingleFileMixin**: 支持从单个文件加载模型。\n\n### 初始化方法\n\n`__init__` 方法用于初始化 `StableDiffusionPipeline` 的各个组件：\n\n- **VAE (`vae`)**: 自动编码器，用于将图像编码为潜在空间表示，并从潜在空间解码回图像。\n- **Text Encoder (`text_encoder`)**: 使用 CLIP 模型将文本输入编码为特征向量。\n- **Tokenizer (`tokenizer`)**: 将文本输入转换为模型可理解的标记。\n- **UNet (`unet`)**: 负责处理图像的潜在表示，预测噪声残差。\n- **Scheduler (`scheduler`)**: 控制扩散过程中的噪声添加和去除。\n- **Safety Checker (`safety_checker`)**: 用于检查生成图像的安全性。\n- **Feature Extractor (`feature_extractor`)**: 用于从图像中提取特征。\n- **Image Encoder (`image_encoder`)**: 可选组件，用于图像编码。\n\n### 功能和方法\n\n- **Deprecation Warnings**: 在初始化过程中，检查 `scheduler` 和 `unet` 的配置是否过时，并提供相应的弃用警告。\n- **Module Registration**: 使用 `register_modules` 方法将各个组件注册到管道中，便于统一管理。\n- **Safety Checks**: 提供安全检查功能，确保生成的图像符合安全标准。\n- **Guidance Scale**: 提供指导比例的计算和应用，用于控制生成图像的风格和内容。\n- **Image Processing**: 包含图像处理方法，如 `decode_latents`，用于将潜在表示转换为图像。\n\n### 属性\n\n- **Guidance Scale**: 控制生成图像的风格和内容。\n- **Cross Attention**: 提供交叉注意力机制的参数。\n- **Timesteps**: 控制扩散过程的时间步数。\n\n### 设计目的\n\n`StableDiffusionPipeline` 的设计目的是将 Stable Diffusion 模型的各个组件整合在一起，提供一个统一的接口来进行文本到图像的生成。通过继承和组合多个功能模块，`StableDiffusionPipeline` 能够灵活地支持不同的生成任务和配置需求。\n\n# Q: @pipeline_utils.py 解释 DiffusionPipeline 的结构，以及 from_pretrained 在做什么\n\n`DiffusionPipeline` 是一个用于管理和执行扩散模型的核心类，提供了加载、配置和运行模型的基本功能。以下是对 `DiffusionPipeline` 结构和 `from_pretrained` 方法的详细解释：\n\n### DiffusionPipeline 的结构\n\n`DiffusionPipeline` 是一个抽象基类，定义了扩散模型的基本接口和功能。其主要结构包括：\n\n1. **模块注册**：\n\n   - `register_modules` 方法用于注册模型的各个组件（如 VAE、UNet、调度器等），便于统一管理和调用。\n\n2. **模型加载**：\n\n   - 提供从预训练模型加载各个组件的功能，通常通过 `from_pretrained` 方法实现。\n\n3. **推理接口**：\n\n   - 定义了模型推理的基本接口，用户可以通过调用这些接口生成图像或其他输出。\n\n4. **配置管理**：\n\n   - 提供配置加载和保存功能，便于模型的复用和共享。\n\n5. **实用工具**：\n   - 包含一些实用工具方法，如检查版本、处理设备映射等。\n\n### from_pretrained 方法\n\n`from_pretrained` 是 `DiffusionPipeline` 中的一个关键方法，用于从预训练模型加载管道的各个组件。其主要功能包括：\n\n1. **模型路径解析**：\n\n   - 接受一个模型标识符（如 Hugging Face Hub 上的模型 ID）或本地路径，解析并定位模型文件。\n\n2. **组件加载**：\n\n   - 从指定路径加载模型的各个组件（如 VAE、UNet、调度器等），并将它们注册到管道中。\n   - 支持加载不同版本和变体的模型组件。\n\n3. **配置加载**：\n\n   - 加载模型的配置文件，设置模型的超参数和其他配置选项。\n\n4. **设备映射**：\n\n   - 根据用户指定的设备映射策略，将模型组件分配到合适的计算设备（如 CPU、GPU）。\n\n5. **安全检查**：\n\n   - 在加载过程中，检查模型的安全性和兼容性，确保加载的模型符合预期。\n\n6. **返回实例**：\n   - 完成加载后，返回一个配置好的 `DiffusionPipeline` 实例，用户可以直接使用该实例进行推理。\n\n### 设计目的\n\n`DiffusionPipeline` 的设计目的是提供一个统一的接口来管理和执行扩散模型。通过 `from_pretrained` 方法，用户可以方便地加载和配置预训练模型，快速进行推理和生成任务。这种设计使得扩散模型的使用更加简便和高效，适合各种应用场景。\n\n# Q: @train_text_to_image_lora.py 里，从 DiffusionPipeline.from_pretrained 加载到了 @pipeline_stable_diffusion.py 中 StableDiffusionPipeline 类的实例，我理解的对吗？\n\n是的，你的理解是正确的。在 `train_text_to_image_lora.py` 中，`DiffusionPipeline.from_pretrained` 方法用于加载预训练的模型管道实例。在这个过程中，它会根据指定的模型路径和配置，实例化一个 `StableDiffusionPipeline` 类的对象。\n\n### 具体过程如下：\n\n1. **调用 `from_pretrained` 方法**：\n\n   - 在 `train_text_to_image_lora.py` 中，`DiffusionPipeline.from_pretrained` 被调用来加载预训练的模型。\n   - 这个方法会根据提供的路径或模型标识符，从 Hugging Face Hub 或本地文件系统加载模型的权重和配置。\n\n2. **实例化 `StableDiffusionPipeline`**：\n\n   - `from_pretrained` 方法会识别模型的类型，并根据配置文件中的信息选择合适的管道类进行实例化。\n   - 在这个例子中，由于加载的是 Stable Diffusion 模型，因此会实例化 `StableDiffusionPipeline` 类。\n\n3. **加载组件**：\n\n   - `StableDiffusionPipeline` 的 `__init__` 方法会被调用，加载模型的各个组件（如 VAE、UNet、调度器等）。\n   - 这些组件会根据预训练的权重进行初始化，并注册到管道中。\n\n4. **返回实例**：\n   - 完成加载后，`from_pretrained` 方法返回一个配置好的 `StableDiffusionPipeline` 实例。\n   - 这个实例可以用于进一步的推理或微调任务。\n\n通过这种方式，`train_text_to_image_lora.py` 脚本能够方便地加载和使用预训练的 Stable Diffusion 模型进行微调和生成任务。\n\n# Q: 解读 @pipeline_utils.py 中 from_pretrained 代码，详细说明如何识别模型类型选择管道类。 @Codebase\n\n在 `pipeline_utils.py` 中，`from_pretrained` 方法负责从预训练模型加载管道实例。以下是该方法如何识别模型类型并选择合适的管道类的详细说明：\n\n### 识别模型类型并选择管道类的步骤\n\n1. **下载和缓存模型文件**：\n\n   - 首先，`from_pretrained` 方法会检查 `pretrained_model_name_or_path` 是否是一个本地路径。如果不是，它会调用 `cls.download` 方法从 Hugging Face Hub 下载模型文件，并将其缓存到本地。\n   - 相关代码行：\n     ```python\n     startLine: 763\n     endLine: 788\n     ```\n\n2. **加载配置文件**：\n\n   - 使用 `cls.load_config` 方法加载模型的配置文件，该文件包含模型的超参数和其他配置信息。\n   - 相关代码行：\n     ```python\n     startLine: 812\n     endLine: 818\n     ```\n\n3. **识别模型变体**：\n\n   - 通过 `_identify_model_variants` 方法识别模型的变体（如 `fp16`、`ema` 等），以便加载正确的模型文件。\n   - 相关代码行：\n     ```python\n     startLine: 820\n     endLine: 827\n     ```\n\n4. **解析自定义管道和类**：\n\n   - 使用 `_resolve_custom_pipeline_and_cls` 方法解析自定义管道和类名。如果用户指定了自定义管道，则从 Hub 加载相应的模块。\n   - 相关代码行：\n     ```python\n     startLine: 831\n     endLine: 833\n     ```\n\n5. **获取管道类**：\n\n   - 调用 `_get_pipeline_class` 方法，根据配置文件和用户指定的选项，确定要实例化的管道类。\n   - 相关代码行：\n     ```python\n     startLine: 834\n     endLine: 842\n     ```\n\n6. **加载管道组件**：\n\n   - 根据管道类的签名，加载并实例化各个组件（如 VAE、UNet、调度器等），并将它们注册到管道中。\n   - 相关代码行：\n     ```python\n     startLine: 857\n     endLine: 980\n     ```\n\n7. **实例化管道**：\n   - 使用加载的组件和配置，实例化最终的管道对象。\n   - 相关代码行：\n     ```python\n     startLine: 1021\n     endLine: 1028\n     ```\n\n通过这些步骤，`from_pretrained` 方法能够识别模型类型并选择合适的管道类，确保加载的模型能够正确地进行推理和生成任务。\n\n# Q: 如果我只有一个 sd_xl_base_1.0.safetensors 文件，是否无法使用 from_pretrained 方法得到具体的 Pipeline 实例？\n\n如果你只有一个 `sd_xl_base_1.0.safetensors` 文件，直接使用 `from_pretrained` 方法可能会遇到一些困难，因为 `from_pretrained` 通常期望从一个包含完整模型配置和权重的目录或 Hugging Face Hub 仓库中加载模型。\n\n### 解决方案\n\n1. **手动加载权重**：\n\n   - 你可以手动加载 `safetensors` 文件中的权重，并将它们分配给相应的模型组件（如 UNet、VAE 等）。\n   - 这需要你对模型的架构有深入的了解，以便正确地将权重映射到模型的各个部分。\n\n2. **创建配置文件**：\n\n   - `from_pretrained` 方法依赖于配置文件来确定如何构建模型管道。你可以尝试创建一个与模型匹配的配置文件，通常是一个 JSON 文件，描述模型的架构和超参数。\n   - 这个配置文件需要放在与 `safetensors` 文件相同的目录中。\n\n3. **使用自定义加载逻辑**：\n\n   - 如果你熟悉模型的架构，可以编写自定义的加载逻辑，将 `safetensors` 文件中的权重加载到模型中。\n   - 这可能涉及使用 `safetensors` 库来读取权重，并手动将它们分配给模型的各个层。\n\n4. **检查社区资源**：\n   - 有时，社区会提供工具或脚本来帮助加载特定格式的模型文件。你可以在相关的 GitHub 仓库或论坛中查找是否有适合的工具。\n\n### 总结\n\n虽然 `from_pretrained` 方法提供了便捷的加载方式，但它通常需要完整的模型目录或 Hub 仓库。如果只有一个 `safetensors` 文件，你可能需要手动处理权重加载和配置，以便正确地构建和使用模型管道。\n\n# Q: 如果我只需要进行推理，是否仍需配置文件？\n\n在进行推理时，配置文件仍然是非常有用的，尽管在某些情况下你可能能够在没有完整配置文件的情况下进行推理。以下是一些考虑因素：\n\n### 为什么需要配置文件\n\n1. **模型架构信息**：\n\n   - 配置文件通常包含模型的架构信息，如层数、隐藏单元数、激活函数等。这些信息对于正确构建模型至关重要。\n\n2. **超参数设置**：\n\n   - 配置文件中可能包含一些超参数设置，如学习率、优化器设置等，虽然这些在推理时不直接使用，但了解这些信息有助于理解模型的行为。\n\n3. **组件初始化**：\n   - 在复杂模型（如 Stable Diffusion）中，配置文件用于初始化各个组件（如 VAE、UNet、调度器等）。这些组件需要正确的参数来进行推理。\n\n### 没有配置文件时的推理\n\n如果你没有配置文件，但仍希望进行推理，可以考虑以下方法：\n\n1. **手动构建模型**：\n\n   - 如果你对模型的架构有深入了解，可以手动构建模型，并使用 `safetensors` 文件中的权重进行初始化。\n\n2. **使用默认设置**：\n\n   - 在某些情况下，你可以使用一些默认的设置来初始化模型组件，但这可能会导致性能不佳或结果不准确。\n\n3. **社区支持**：\n   - 查找社区提供的工具或脚本，这些工具可能已经解决了如何在没有完整配置文件的情况下进行推理的问题。\n\n### 总结\n\n虽然在某些情况下可以在没有配置文件的情况下进行推理，但拥有配置文件通常会使过程更简单、更可靠。如果可能，尝试获取或创建一个与模型匹配的配置文件，以确保推理的准确性和效率。\n\n# Q: 以你上面举的例子为例，@pipeline_loading_utils.py load_sub_model 中，实例化的是 @unet_2d_condition.py 中的 UNet2DConditionModel 类吗？ load_sub_model 是怎么找到这个类并实例化的？\n\nDeepseek R-1:\n\n<think>\n\n好的，我需要仔细分析用户的问题。用户问的是在`pipeline_loading_utils.py`中的`load_sub_model`函数是否实例化了`unet_2d_condition.py`中的`UNet2DConditionModel`类，以及这个过程是如何找到并实例化该类的。\n\n首先，我需要回忆`load_sub_model`函数的作用。根据之前的讨论，这个函数负责动态加载模型的各个子组件，比如 UNet、VAE 等。用户提供的代码片段显示，`load_sub_model`通过`class_obj`来实例化具体的类，而`class_obj`是通过`get_class_obj_and_candidates`函数获取的。\n\n接下来，我需要查看`get_class_obj_and_candidates`函数的逻辑。这个函数会根据`library_name`和`class_name`来查找对应的类。例如，当`library_name`是\"diffusers\"，`class_name`是\"UNet2DConditionModel\"时，应该会导入`diffusers.models.unets.unet_2d_condition`模块中的`UNet2DConditionModel`类。\n\n然后，我需要确认`unet_2d_condition.py`中的`UNet2DConditionModel`类是否被正确注册到`ALL_IMPORTABLE_CLASSES`中。在 Diffusers 库中，通常会有全局的类注册机制，确保各个组件可以被动态发现和加载。\n\n此外，`load_sub_model`函数中的`load_method`是通过`_get_load_method`获取的，这可能涉及到从预训练权重加载模型的方法，比如`from_pretrained`。需要检查`UNet2DConditionModel`类是否实现了相应的类方法，以支持从配置文件或预训练文件加载。\n\n最后，需要验证实例化的过程是否正确，包括参数传递和配置的应用。例如，`UNet2DConditionModel`的`__init__`方法需要接收正确的参数来构建模型结构，而这些参数可能来自配置文件或默认值。\n\n总结来说，`load_sub_model`通过类名和库名找到对应的类，利用其加载方法（如`from_pretrained`）实例化对象，而`UNet2DConditionModel`作为可导入的类被正确注册和引用，从而完成实例化。\n</think>\n\n是的，`pipeline_loading_utils.py` 中的 `load_sub_model` 函数最终会实例化 `unet_2d_condition.py` 中的 `UNet2DConditionModel` 类。以下是完整的加载逻辑解析：\n\n---\n\n### **核心加载流程**\n\n```python\n# pipeline_loading_utils.py 中的关键代码段\ndef load_sub_model(...):\n    # 1. 获取类对象和候选类\n    class_obj, class_candidates = get_class_obj_and_candidates(\n        library_name,\n        class_name,\n        importable_classes,\n        pipelines,\n        is_pipeline_module,\n        component_name=name,\n        cache_dir=cached_folder,\n    )\n\n    # 2. 确定加载方法（如 from_pretrained）\n    load_method_name = None\n    for candidate_name, candidate_class in class_candidates.items():\n        if issubclass(class_obj, candidate_class):\n            load_method_name = importable_classes[candidate_name][1]  # 通常是 \"from_pretrained\"\n\n    # 3. 获取具体的加载方法\n    load_method = _get_load_method(class_obj, load_method_name, is_dduf=dduf_entries is not None)\n\n    # 4. 执行加载\n    loaded_sub_model = load_method(cached_folder, **loading_kwargs)\n```\n\n---\n\n### **具体步骤解析**\n\n#### **1. 类对象获取 (get_class_obj_and_candidates)**\n\n- **作用**：根据 `library_name` 和 `class_name` 动态导入对应的 Python 类。\n- **实现**：\n  ```python\n  # 通过 library_name 定位模块路径\n  # 例如 library_name=\"diffusers\", class_name=\"UNet2DConditionModel\"\n  # 会导入 diffusers.models.unets.unet_2d_condition 模块\n  module = importlib.import_module(library_name)\n  class_obj = getattr(module, class_name)  # 获取 UNet2DConditionModel 类\n  ```\n\n#### **2. 加载方法匹配**\n\n- **候选类**：`class_candidates` 来自 `ALL_IMPORTABLE_CLASSES`，包含所有可加载的基类（如 `ModelMixin`）。\n- **方法选择**：通过 `issubclass` 检查 `class_obj` 是否继承自候选类，从而确定使用哪个基类的加载方法（如 `ModelMixin.from_pretrained`）。\n\n#### **3. 加载方法绑定**\n\n- **动态绑定**：`_get_load_method` 会将 `class_obj.from_pretrained` 方法绑定为实际加载函数。\n- **特殊处理**：如果是 DDUF 格式（HuggingFace 的分布式格式），会使用特定的加载逻辑。\n\n#### **4. 实例化 UNet**\n\n- **参数传递**：`loading_kwargs` 包含模型路径、设备映射、精度设置等。\n- **最终调用**：\n  ```python\n  # 等效于执行：\n  UNet2DConditionModel.from_pretrained(\n      pretrained_model_name_or_path=cached_folder,\n      subfolder=name,  # 如 \"unet\"\n      torch_dtype=torch_dtype,\n      device_map=device_map,\n      ...\n  )\n  ```\n\n---\n\n### **UNet2DConditionModel 的注册机制**\n\n在 `diffusers` 的全局注册表 `ALL_IMPORTABLE_CLASSES` 中，`UNet2DConditionModel` 被注册为可导入类：\n\n```python\n# 在某个初始化模块中（如 src/diffusers/__init__.py）\nALL_IMPORTABLE_CLASSES = {\n    \"UNet2DConditionModel\": (\"diffusers.models.unets.unet_2d_condition\", \"UNet2DConditionModel\"),\n    ...\n}\n```\n\n这使得 `get_class_obj_and_candidates` 能通过名称匹配找到该类。\n\n---\n\n### **架构参数如何生效**\n\n当调用 `from_pretrained` 时：\n\n1. **配置加载**：从 `config.json` 中读取 `down_block_types`、`up_block_types` 等参数。\n2. **动态构建**：`UNet2DConditionModel.__init__` 根据这些参数，通过 `get_down_block` 和 `get_up_block` 动态构建网络层。\n\n例如：\n\n```python\n# 根据 config.json 中的 down_block_types 创建下采样块\ndown_block_type = \"CrossAttnDownBlock2D\"\ndown_block = get_down_block(\n    down_block_type,\n    num_layers=layers_per_block[i],\n    in_channels=input_channel,\n    out_channels=output_channel,\n    ...\n)\n```\n\n---\n\n### **总结流程图**\n\n```mermaid\ngraph TD\n    A[load_sub_model] --> B[get_class_obj_and_candidates]\n    B --> C{找到 UNet2DConditionModel 类}\n    C --> D[确定加载方法 from_pretrained]\n    D --> E[调用 UNet2DConditionModel.from_pretrained]\n    E --> F[加载 config.json]\n    F --> G[根据配置动态构建网络层]\n```\n\n通过这种动态加载机制，Diffusers 库实现了高度模块化的模型管理，能够灵活支持不同结构的 UNet 变体。\n\n> [!info-太史公曰]\n> 应当不是。正确来说，是上层（ `DiffusionPipeline.from_pretained` ）从 importable_classes 参数中传入 `ALL_IMPORTABLE_CLASSES` ， `get_class_obj_and_candidates` 中从 `diffuser` 中加载到 `ModelMixin` ，调用 `ModelMixin.from_pretrained` 才实例化 `UNet2DConditionModel` 类。\n>\n> 因此估计往 `load_sub_model` 中传入的是 `diffuser` 与 `ModelMixin`\n\n# Q: 解析代码，详解@modeling_utils.py 的 from_pretrained 如何实例化 @unet_2d_condition.py 中的 `UNet2DConditionModel` ？\n\n<think>\n我需要详细解析 `modeling_utils.py` 中的 `from_pretrained` 方法如何实例化 `UNet2DConditionModel`。根据提供的代码，我可以看到整个加载流程。\n\n首先，`from_pretrained` 是 `ModelMixin` 类的一个类方法，而 `UNet2DConditionModel` 继承自 `ModelMixin`，所以它继承了这个方法。\n\n加载流程大致如下：\n\n1. 首先获取配置文件和模型文件路径\n2. 加载配置文件\n3. 使用配置创建模型实例\n4. 加载权重到模型中\n5. 处理设备映射等高级功能\n6. 返回加载好的模型\n\n具体来看，`from_pretrained` 方法首先会确定模型文件的位置，然后加载配置文件。接着，它会使用 `cls.from_config(config, **unused_kwargs)` 创建一个模型实例。这里的 `cls` 就是 `UNet2DConditionModel`，所以实际上是调用 `UNet2DConditionModel.from_config` 来创建模型实例。\n\n然后，它会加载权重文件，并将权重加载到模型中。这个过程通过 `_load_pretrained_model` 方法完成。最后，它会处理设备映射等高级功能，并返回加载好的模型。\n\n我需要详细解释这个过程，特别是如何从配置创建模型实例，以及如何加载权重到模型中。\n</think>\n\n# `from_pretrained` 如何实例化 UNet2DConditionModel 的详细流程\n\n`modeling_utils.py` 中的 `from_pretrained` 方法负责实例化 `UNet2DConditionModel`，整个过程可分为以下关键步骤：\n\n## 1. 加载配置文件\n\n```python\n# 确定模型路径并加载配置\nconfig_dict = cls.load_config(\n    pretrained_model_name_or_path,\n    cache_dir=cache_dir,\n    force_download=force_download,\n    # 其他参数...\n)\n```\n\n这一步从模型目录或 Hub 加载 `config.json`，包含了 UNet 的所有配置参数（如通道数、注意力头数等）。\n\n## 2. 创建空模型实例\n\n```python\n# 使用上下文管理器创建空模型\nwith ContextManagers(init_contexts):\n    model = cls.from_config(config, **unused_kwargs)\n```\n\n这里的关键是 `cls.from_config`，它调用 `UNet2DConditionModel.from_config` 方法，该方法由 `ConfigMixin` 提供。\n\n`from_config` 会：\n\n- 解析配置参数\n- 调用 `UNet2DConditionModel.__init__` 构造函数\n- 创建所有子模块（如下采样块、上采样块、注意力层等）\n\n## 3. 加载权重文件\n\n```python\n# 加载权重文件\nstate_dict = load_state_dict(resolved_model_file[0], disable_mmap=disable_mmap, dduf_entries=dduf_entries)\n```\n\n这一步加载预训练权重文件（如 `diffusion_pytorch_model.bin` 或 `.safetensors`）。\n\n## 4. 将权重加载到模型中\n\n```python\nmodel, missing_keys, unexpected_keys, mismatched_keys, offload_index, error_msgs = cls._load_pretrained_model(\n    model,\n    state_dict,\n    # 其他参数...\n)\n```\n\n`_load_pretrained_model` 方法负责：\n\n- 将权重映射到模型参数\n- 处理可能的形状不匹配\n- 支持低内存加载\n- 处理量化和设备映射\n\n## 5. 设备分配和后处理\n\n```python\n# 如果指定了设备映射，将模型分配到不同设备\nif device_map is not None:\n    dispatch_model(model, **device_map_kwargs)\n```\n\n这一步处理模型在多 GPU 或 CPU/GPU 混合环境下的分配。\n\n## 6. 返回实例化的模型\n\n```python\nmodel.eval()  # 设置为评估模式\nreturn model\n```\n\n最终返回完全加载好的 `UNet2DConditionModel` 实例。\n\n## 关键实现细节\n\n1. **动态类型处理**：\n\n   ```python\n   if torch_dtype is not None:\n       dtype_orig = cls._set_default_torch_dtype(torch_dtype)\n   ```\n\n   支持不同精度（如 fp16、bf16）的模型加载\n\n2. **低内存加载**：\n\n   ```python\n   if low_cpu_mem_usage:\n       init_contexts.append(accelerate.init_empty_weights())\n   ```\n\n   通过 accelerate 库实现大模型的高效加载\n\n3. **权重修复**：\n\n   ```python\n   model._fix_state_dict_keys_on_load(state_dict)\n   ```\n\n   处理不同版本模型间的键名差异\n\n4. **设备映射**：\n   ```python\n   device_map = _determine_device_map(model, device_map, max_memory, ...)\n   ```\n   智能分配模型层到不同设备\n\n整个过程实现了从预训练权重到可用模型实例的无缝转换，同时处理了各种高级功能如设备管理、精度控制和内存优化。\n\n# Q: 详细解释 @unet_2d_condition.py 中 UNet2DConditionModel 的结构\n\n<think>\n\n嗯，用户想让我详细解释 `unet_2d_condition.py` 中的 `UNet2DConditionModel` 结构。首先，我需要回忆一下 UNet 的基本结构，特别是 Stable Diffusion 中的 UNet。Stable Diffusion 的 UNet 是一个条件模型，结合了文本嵌入作为输入，所以这个 UNet2DConditionModel 应该是在传统 UNet 的基础上增加了对条件输入的处理，比如文本嵌入或时间步信息。\n\n接下来，我需要考虑用户可能的背景。用户可能在使用或修改 Diffusers 库，或者在尝试理解 Stable Diffusion 的工作原理。他们可能遇到了问题，比如模型加载错误，或者想自定义 UNet 的结构，因此需要了解其内部组件。用户可能已经看过代码，但需要更清晰的解释，特别是各个模块的作用和连接方式。\n\n我需要检查用户提供的代码片段，特别是`UNet2DConditionModel`的`__init__`方法，看看有哪些组件被初始化。比如，`conv_in`、`time_embedding`、`down_blocks`、`mid_block`、`up_blocks`、`conv_out`等。这些部分对应了 UNet 的不同阶段，下采样、中间层、上采样等。\n\n然后，我需要考虑如何将这些组件组织成一个连贯的结构解释。可能需要分块讲解，比如输入处理、时间嵌入、下采样块、中间块、上采样块、输出处理等。同时，条件输入（如文本嵌入）是如何被整合到模型中的，比如通过交叉注意力机制。\n\n另外，用户可能对某些参数或配置选项感兴趣，比如`attention_head_dim`、`cross_attention_dim`等，这些参数如何影响模型结构。需要解释这些参数的作用，以及它们在模型中的具体应用位置。\n\n还要注意代码中的一些特定处理，比如`class_embeddings_concat`如何处理类别嵌入，`resnet_time_scale_shift`的不同模式对残差块的影响，以及`attention_type`的选择（如默认的交叉注意力或其他类型）。\n\n最后，可能需要提供一个结构图或流程图，帮助用户更直观地理解数据在模型中的流动路径，特别是条件信息如何在不同层中被整合。如果用户需要进一步的代码示例或调试帮助，也需要在解释中提及可能的常见问题或配置错误。\n</think>\n\n以下是 `UNet2DConditionModel` 的详细结构解析，该模型是 Stable Diffusion 的核心组件，负责噪声预测和条件控制：\n\n---\n\n### **整体架构**\n\n```mermaid\ngraph TD\n    A[输入] --> B[Conv2D_3x3]\n    B --> C[时间嵌入]\n    C --> D[下采样块 x4]\n    D --> E[中间块]\n    E --> F[上采样块 x4]\n    F --> G[Conv2D_3x3]\n    G --> H[输出]\n    D -->|跳跃连接| F\n    C -->|条件注入| D\n    C -->|条件注入| E\n    C -->|条件注入| F\n```\n\n---\n\n### **核心组件**\n\n#### 1. 输入处理\n\n```python\nself.conv_in = nn.Conv2d(\n    in_channels,\n    block_out_channels[0],\n    kernel_size=3,\n    padding=1\n)\n```\n\n- 作用：将输入图像（latent space）映射到初始特征空间\n- 参数：\n  - `in_channels`：输入通道数（通常为 4）\n  - `block_out_channels[0]`：首层输出通道数（通常为 320）\n\n---\n\n#### 2. 时间嵌入系统\n\n```python\nself.time_embedding = TimestepEmbedding(\n    timestep_input_dim,  # 时间步编码维度\n    time_embed_dim,       # 嵌入维度（通常1280）\n    act_fn=act_fn         # 激活函数（如silu）\n)\n```\n\n- 功能：将时间步信息编码为条件向量\n- 流程：\n  1. 通过正弦位置编码生成时间特征\n  2. 经过全连接层和非线性激活\n  3. 与文本嵌入等条件信息融合\n\n---\n\n#### 3. 下采样模块\n\n```python\nself.down_blocks = nn.ModuleList([\n    DownBlock2D(\n        in_channels=320,\n        out_channels=320,\n        temb_channels=1280,\n        num_layers=2,\n        resnet_eps=1e-5,\n        resnet_act_fn=\"silu\",\n        cross_attention_dim=768  # 文本嵌入维度\n    ),\n    # 其他下采样块...\n])\n```\n\n- 结构特点：\n  - 每个下采样块包含：\n    - 多个残差块（ResNet）\n    - 交叉注意力层（处理文本条件）\n    - 可能的降采样卷积\n  - 典型配置：4 个下采样块，通道数逐级增加（320→640→1280→1280）\n\n---\n\n#### 4. 中间模块\n\n```python\nself.mid_block = UNetMidBlock2DCrossAttn(\n    in_channels=1280,\n    temb_channels=1280,\n    resnet_eps=1e-5,\n    resnet_act_fn=\"silu\",\n    attn_num_head_channels=8\n)\n```\n\n- 核心组成：\n  - 残差块\n  - 自注意力机制\n  - 交叉注意力机制\n- 作用：在最低分辨率层进行全局特征整合\n\n---\n\n#### 5. 上采样模块\n\n```python\nself.up_blocks = nn.ModuleList([\n    UpBlock2D(\n        in_channels=1280,\n        prev_output_channel=1280,\n        out_channels=1280,\n        temb_channels=1280,\n        num_layers=3,\n        resnet_eps=1e-5,\n        resnet_act_fn=\"silu\"\n    ),\n    # 其他上采样块...\n])\n```\n\n- 关键特性：\n  - 包含残差块和交叉注意力层\n  - 通过跳跃连接融合下采样特征\n  - 使用转置卷积或插值进行上采样\n\n---\n\n#### 6. 输出处理\n\n```python\nself.conv_norm_out = nn.GroupNorm(32, 320)\nself.conv_act = nn.SiLU()\nself.conv_out = nn.Conv2d(320, 4, 3, padding=1)\n```\n\n- 流程：\n  1. 归一化处理\n  2. 激活函数\n  3. 最终卷积将特征映射到输出空间（4 通道）\n\n---\n\n### **条件控制机制**\n\n#### 交叉注意力层\n\n```python\nclass CrossAttention(nn.Module):\n    def __init__(self, query_dim, context_dim, heads=8):\n        super().__init__()\n        self.to_q = nn.Linear(query_dim, query_dim)\n        self.to_k = nn.Linear(context_dim, query_dim)\n        self.to_v = nn.Linear(context_dim, query_dim)\n\n    def forward(self, x, context):\n        q = self.to_q(x)\n        k = self.to_k(context)\n        v = self.to_v(context)\n        # 计算注意力权重...\n        return output\n```\n\n- 作用：将文本嵌入（context）注入到图像特征中\n- 位置：每个下采样和上采样块中都包含该层\n\n---\n\n### **关键参数说明**\n\n| 参数                      | 典型值    | 作用                                      |\n| ------------------------- | --------- | ----------------------------------------- |\n| `cross_attention_dim`     | 768       | 文本嵌入的维度（CLIP 文本编码器输出维度） |\n| `attention_head_dim`      | 8/16      | 注意力头的维度                            |\n| `layers_per_block`        | 2         | 每个块中的残差层数                        |\n| `num_attention_heads`     | 8         | 注意力头数量                              |\n| `resnet_time_scale_shift` | \"default\" | 时间条件注入方式（add/scale）             |\n\n---\n\n### **数据流动示例**\n\n```python\ndef forward(self, x, timestep, encoder_hidden_states):\n    # 1. 输入处理\n    x = self.conv_in(x)\n\n    # 2. 时间嵌入\n    t_emb = self.time_embedding(timestep)\n\n    # 3. 下采样\n    down_samples = []\n    for down_block in self.down_blocks:\n        x = down_block(x, t_emb, encoder_hidden_states)\n        down_samples.append(x)\n\n    # 4. 中间处理\n    x = self.mid_block(x, t_emb, encoder_hidden_states)\n\n    # 5. 上采样\n    for up_block in self.up_blocks:\n        x = up_block(x, down_samples.pop(), t_emb, encoder_hidden_states)\n\n    # 6. 输出\n    x = self.conv_norm_out(x)\n    x = self.conv_act(x)\n    return self.conv_out(x)\n```\n\n如果需要更详细的某个组件解析（如下采样块的具体实现），可以进一步展开说明。\n\n# Q: 详细解释下采样快的细节\n\n好的，下面是 `UNet2DConditionModel` 中下采样块的详细结构和实现细节：\n\n---\n\n### **下采样块概述**\n\n下采样块的主要功能是逐步降低特征图的空间分辨率，同时增加通道数，以便在更低的分辨率上进行更复杂的特征提取。每个下采样块通常包含多个残差块和一个降采样操作。\n\n---\n\n### **下采样块的结构**\n\n#### 1. 残差块（ResNet Block）\n\n每个下采样块包含多个残差块，负责特征提取和非线性变换。\n\n```python\nclass ResNetBlock(nn.Module):\n    def __init__(self, in_channels, out_channels, temb_channels, resnet_eps, resnet_act_fn):\n        super().__init__()\n        self.norm1 = nn.GroupNorm(32, in_channels, eps=resnet_eps)\n        self.act1 = getattr(nn, resnet_act_fn)()\n        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1)\n\n        self.norm2 = nn.GroupNorm(32, out_channels, eps=resnet_eps)\n        self.act2 = getattr(nn, resnet_act_fn)()\n        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1)\n\n        self.temb_proj = nn.Linear(temb_channels, out_channels)\n\n    def forward(self, x, temb):\n        h = self.norm1(x)\n        h = self.act1(h)\n        h = self.conv1(h)\n\n        h = self.norm2(h)\n        h = self.act2(h)\n        h = self.conv2(h)\n\n        # 时间嵌入注入\n        h += self.temb_proj(temb)[:, :, None, None]\n\n        return h + x  # 残差连接\n```\n\n- **特征归一化**：使用 `GroupNorm` 进行归一化，稳定训练过程。\n- **激活函数**：通常使用 `SiLU` 或 `ReLU`。\n- **卷积层**：两个 3x3 卷积层，保持特征图大小不变。\n- **时间嵌入**：通过全连接层将时间嵌入注入到特征图中。\n\n---\n\n#### 2. 交叉注意力层\n\n在处理条件输入（如文本嵌入）时，交叉注意力层用于将条件信息注入到特征图中。\n\n```python\nclass CrossAttention(nn.Module):\n    def __init__(self, query_dim, context_dim, heads=8):\n        super().__init__()\n        self.to_q = nn.Linear(query_dim, query_dim)\n        self.to_k = nn.Linear(context_dim, query_dim)\n        self.to_v = nn.Linear(context_dim, query_dim)\n        self.scale = query_dim ** -0.5\n\n    def forward(self, x, context):\n        q = self.to_q(x)\n        k = self.to_k(context)\n        v = self.to_v(context)\n\n        attn_weights = torch.einsum('bqd,bkd->bqk', q, k) * self.scale\n        attn_weights = attn_weights.softmax(dim=-1)\n\n        out = torch.einsum('bqk,bvd->bqd', attn_weights, v)\n        return out\n```\n\n- **查询、键、值**：通过线性变换生成查询、键和值向量。\n- **注意力计算**：使用缩放点积注意力机制。\n- **条件注入**：将文本嵌入等条件信息注入到特征图中。\n\n---\n\n#### 3. 降采样操作\n\n通常使用卷积或池化操作来降低特征图的空间分辨率。\n\n```python\nclass Downsample(nn.Module):\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=2, padding=1)\n\n    def forward(self, x):\n        return self.conv(x)\n```\n\n- **卷积降采样**：通过步长为 2 的卷积实现降采样，减少特征图的宽高。\n- **通道数增加**：通常在降采样时增加通道数，以便在更低的分辨率上进行更复杂的特征提取。\n\n---\n\n### **下采样块的完整实现**\n\n```python\nclass DownBlock2D(nn.Module):\n    def __init__(self, in_channels, out_channels, temb_channels, num_layers, resnet_eps, resnet_act_fn, cross_attention_dim):\n        super().__init__()\n        self.resnets = nn.ModuleList([\n            ResNetBlock(in_channels if i == 0 else out_channels, out_channels, temb_channels, resnet_eps, resnet_act_fn)\n            for i in range(num_layers)\n        ])\n        self.attention = CrossAttention(out_channels, cross_attention_dim)\n        self.downsample = Downsample(out_channels, out_channels)\n\n    def forward(self, x, temb, context):\n        for resnet in self.resnets:\n            x = resnet(x, temb)\n        x = self.attention(x, context)\n        x = self.downsample(x)\n        return x\n```\n\n- **残差块**：多个残差块串联，进行特征提取。\n- **交叉注意力**：在特征提取后注入条件信息。\n- **降采样**：降低特征图的空间分辨率。\n\n---\n\n### **总结**\n\n下采样块在 `UNet2DConditionModel` 中起到了关键作用，通过多层次的特征提取和条件注入，逐步将输入图像的特征压缩到更低的分辨率，为后续的中间块和上采样块提供丰富的特征信息。\n\n# Q: 详细讲解上采样块的细节\n\n好的，下面是 `UNet2DConditionModel` 中上采样块的详细结构和实现细节：\n\n---\n\n### **上采样块概述**\n\n上采样块的主要功能是逐步恢复特征图的空间分辨率，同时结合下采样块的特征，通过跳跃连接（skip connections）实现特征的融合。每个上采样块通常包含多个残差块和一个上采样操作。\n\n---\n\n### **上采样块的结构**\n\n#### 1. 残差块（ResNet Block）\n\n每个上采样块包含多个残差块，负责特征提取和非线性变换。\n\n```python\nclass ResNetBlock(nn.Module):\n    def __init__(self, in_channels, out_channels, temb_channels, resnet_eps, resnet_act_fn):\n        super().__init__()\n        self.norm1 = nn.GroupNorm(32, in_channels, eps=resnet_eps)\n        self.act1 = getattr(nn, resnet_act_fn)()\n        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1)\n\n        self.norm2 = nn.GroupNorm(32, out_channels, eps=resnet_eps)\n        self.act2 = getattr(nn, resnet_act_fn)()\n        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1)\n\n        self.temb_proj = nn.Linear(temb_channels, out_channels)\n\n    def forward(self, x, temb):\n        h = self.norm1(x)\n        h = self.act1(h)\n        h = self.conv1(h)\n\n        h = self.norm2(h)\n        h = self.act2(h)\n        h = self.conv2(h)\n\n        # 时间嵌入注入\n        h += self.temb_proj(temb)[:, :, None, None]\n\n        return h + x  # 残差连接\n```\n\n- **特征归一化**：使用 `GroupNorm` 进行归一化，稳定训练过程。\n- **激活函数**：通常使用 `SiLU` 或 `ReLU`。\n- **卷积层**：两个 3x3 卷积层，保持特征图大小不变。\n- **时间嵌入**：通过全连接层将时间嵌入注入到特征图中。\n\n---\n\n#### 2. 交叉注意力层\n\n在处理条件输入（如文本嵌入）时，交叉注意力层用于将条件信息注入到特征图中。\n\n```python\nclass CrossAttention(nn.Module):\n    def __init__(self, query_dim, context_dim, heads=8):\n        super().__init__()\n        self.to_q = nn.Linear(query_dim, query_dim)\n        self.to_k = nn.Linear(context_dim, query_dim)\n        self.to_v = nn.Linear(context_dim, query_dim)\n        self.scale = query_dim ** -0.5\n\n    def forward(self, x, context):\n        q = self.to_q(x)\n        k = self.to_k(context)\n        v = self.to_v(context)\n\n        attn_weights = torch.einsum('bqd,bkd->bqk', q, k) * self.scale\n        attn_weights = attn_weights.softmax(dim=-1)\n\n        out = torch.einsum('bqk,bvd->bqd', attn_weights, v)\n        return out\n```\n\n- **查询、键、值**：通过线性变换生成查询、键和值向量。\n- **注意力计算**：使用缩放点积注意力机制。\n- **条件注入**：将文本嵌入等条件信息注入到特征图中。\n\n---\n\n#### 3. 上采样操作\n\n通常使用转置卷积或插值操作来增加特征图的空间分辨率。\n\n```python\nclass Upsample(nn.Module):\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n        self.conv = nn.ConvTranspose2d(in_channels, out_channels, kernel_size=3, stride=2, padding=1, output_padding=1)\n\n    def forward(self, x):\n        return self.conv(x)\n```\n\n- **转置卷积上采样**：通过转置卷积实现上采样，增加特征图的宽高。\n- **通道数减少**：通常在上采样时减少通道数，以便恢复到输入图像的通道数。\n\n---\n\n### **上采样块的完整实现**\n\n```python\nclass UpBlock2D(nn.Module):\n    def __init__(self, in_channels, prev_output_channel, out_channels, temb_channels, num_layers, resnet_eps, resnet_act_fn, cross_attention_dim):\n        super().__init__()\n        self.resnets = nn.ModuleList([\n            ResNetBlock(in_channels if i == 0 else out_channels, out_channels, temb_channels, resnet_eps, resnet_act_fn)\n            for i in range(num_layers)\n        ])\n        self.attention = CrossAttention(out_channels, cross_attention_dim)\n        self.upsample = Upsample(out_channels, out_channels)\n\n    def forward(self, x, res_samples, temb, context):\n        for resnet in self.resnets:\n            x = resnet(x, temb)\n        x = self.attention(x, context)\n        x = self.upsample(x)\n        return x\n```\n\n- **残差块**：多个残差块串联，进行特征提取。\n- **交叉注意力**：在特征提取后注入条件信息。\n- **上采样**：增加特征图的空间分辨率。\n\n---\n\n### **总结**\n\n上采样块在 `UNet2DConditionModel` 中起到了关键作用，通过多层次的特征提取和条件注入，逐步将特征图的分辨率恢复到输入图像的大小，并结合下采样块的特征实现特征的融合。\n\n# Q: 详细讲解中间模块细节\n\n好的，下面是 `UNet2DConditionModel` 中中间模块（Mid Block）的详细结构和实现细节：\n\n---\n\n### **中间模块概述**\n\n中间模块位于下采样和上采样块之间，负责在最低分辨率的特征图上进行全局特征整合。它通常包含残差块和注意力机制，以便在特征图的最小空间维度上进行复杂的特征交互。\n\n---\n\n### **中间模块的结构**\n\n#### 1. 残差块（ResNet Block）\n\n中间模块通常包含一个或多个残差块，用于特征提取和非线性变换。\n\n```python\nclass ResNetBlock(nn.Module):\n    def __init__(self, in_channels, out_channels, temb_channels, resnet_eps, resnet_act_fn):\n        super().__init__()\n        self.norm1 = nn.GroupNorm(32, in_channels, eps=resnet_eps)\n        self.act1 = getattr(nn, resnet_act_fn)()\n        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, padding=1)\n\n        self.norm2 = nn.GroupNorm(32, out_channels, eps=resnet_eps)\n        self.act2 = getattr(nn, resnet_act_fn)()\n        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1)\n\n        self.temb_proj = nn.Linear(temb_channels, out_channels)\n\n    def forward(self, x, temb):\n        h = self.norm1(x)\n        h = self.act1(h)\n        h = self.conv1(h)\n\n        h = self.norm2(h)\n        h = self.act2(h)\n        h = self.conv2(h)\n\n        # 时间嵌入注入\n        h += self.temb_proj(temb)[:, :, None, None]\n\n        return h + x  # 残差连接\n```\n\n- **特征归一化**：使用 `GroupNorm` 进行归一化，稳定训练过程。\n- **激活函数**：通常使用 `SiLU` 或 `ReLU`。\n- **卷积层**：两个 3x3 卷积层，保持特征图大小不变。\n- **时间嵌入**：通过全连接层将时间嵌入注入到特征图中。\n\n---\n\n#### 2. 自注意力层\n\n自注意力层用于在特征图的最小空间维度上进行全局特征交互。\n\n```python\nclass SelfAttention(nn.Module):\n    def __init__(self, dim, heads=8):\n        super().__init__()\n        self.to_qkv = nn.Linear(dim, dim * 3, bias=False)\n        self.to_out = nn.Linear(dim, dim)\n        self.scale = dim ** -0.5\n\n    def forward(self, x):\n        b, n, _, h = *x.shape, self.heads\n        qkv = self.to_qkv(x).chunk(3, dim=-1)\n        q, k, v = map(lambda t: t.reshape(b, n, h, -1).transpose(1, 2), qkv)\n\n        dots = torch.einsum('bhid,bhjd->bhij', q, k) * self.scale\n        attn = dots.softmax(dim=-1)\n\n        out = torch.einsum('bhij,bhjd->bhid', attn, v)\n        out = out.transpose(1, 2).reshape(b, n, -1)\n        return self.to_out(out)\n```\n\n- **查询、键、值**：通过线性变换生成查询、键和值向量。\n- **注意力计算**：使用缩放点积注意力机制。\n- **全局特征交互**：在特征图的最小空间维度上进行全局特征交互。\n\n---\n\n#### 3. 交叉注意力层\n\n在处理条件输入（如文本嵌入）时，交叉注意力层用于将条件信息注入到特征图中。\n\n```python\nclass CrossAttention(nn.Module):\n    def __init__(self, query_dim, context_dim, heads=8):\n        super().__init__()\n        self.to_q = nn.Linear(query_dim, query_dim)\n        self.to_k = nn.Linear(context_dim, query_dim)\n        self.to_v = nn.Linear(context_dim, query_dim)\n        self.scale = query_dim ** -0.5\n\n    def forward(self, x, context):\n        q = self.to_q(x)\n        k = self.to_k(context)\n        v = self.to_v(context)\n\n        attn_weights = torch.einsum('bqd,bkd->bqk', q, k) * self.scale\n        attn_weights = attn_weights.softmax(dim=-1)\n\n        out = torch.einsum('bqk,bvd->bqd', attn_weights, v)\n        return out\n```\n\n- **查询、键、值**：通过线性变换生成查询、键和值向量。\n- **注意力计算**：使用缩放点积注意力机制。\n- **条件注入**：将文本嵌入等条件信息注入到特征图中。\n\n---\n\n### **中间模块的完整实现**\n\n```python\nclass UNetMidBlock2DCrossAttn(nn.Module):\n    def __init__(self, in_channels, temb_channels, resnet_eps, resnet_act_fn, attn_num_head_channels):\n        super().__init__()\n        self.resnet1 = ResNetBlock(in_channels, in_channels, temb_channels, resnet_eps, resnet_act_fn)\n        self.attn1 = SelfAttention(in_channels, heads=attn_num_head_channels)\n        self.cross_attn = CrossAttention(in_channels, in_channels)\n        self.resnet2 = ResNetBlock(in_channels, in_channels, temb_channels, resnet_eps, resnet_act_fn)\n\n    def forward(self, x, temb, encoder_hidden_states, attention_mask=None, cross_attention_kwargs=None):\n        x = self.resnet1(x, temb)\n        x = self.attn1(x)\n        x = self.cross_attn(x, encoder_hidden_states)\n        x = self.resnet2(x, temb)\n        return x\n```\n\n- **残差块**：两个残差块串联，进行特征提取。\n- **自注意力**：在特征图的最小空间维度上进行全局特征交互。\n- **交叉注意力**：在特征提取后注入条件信息。\n\n---\n\n### **总结**\n\n中间模块在 `UNet2DConditionModel` 中起到了关键作用，通过多层次的特征提取和注意力机制，在最低分辨率的特征图上进行全局特征整合，为上采样块提供丰富的特征信息。\n\n# Q: 详细讲解输入处理与输出处理模块细节\n\n好的，下面是 `UNet2DConditionModel` 中输入处理和输出处理模块的详细结构和实现细节：\n\n---\n\n### **输入处理模块**\n\n输入处理模块的主要功能是将输入的图像特征（通常是潜在空间表示）映射到模型的初始特征空间。\n\n#### 1. 输入卷积层\n\n```python\nclass InputProcessing(nn.Module):\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n        self.conv_in = nn.Conv2d(\n            in_channels,\n            out_channels,\n            kernel_size=3,\n            padding=1\n        )\n\n    def forward(self, x):\n        return self.conv_in(x)\n```\n\n- **卷积层**：使用一个 3x3 的卷积层，将输入的通道数映射到模型的初始通道数。\n- **作用**：将输入图像的特征映射到更高维度的特征空间，以便后续的特征提取。\n\n---\n\n### **输出处理模块**\n\n输出处理模块的主要功能是将模型的最终特征图映射回输入的通道数，通常是生成图像的潜在空间表示。\n\n#### 1. 输出卷积层\n\n```python\nclass OutputProcessing(nn.Module):\n    def __init__(self, in_channels, out_channels):\n        super().__init__()\n        self.conv_norm_out = nn.GroupNorm(32, in_channels)\n        self.conv_act = nn.SiLU()\n        self.conv_out = nn.Conv2d(\n            in_channels,\n            out_channels,\n            kernel_size=3,\n            padding=1\n        )\n\n    def forward(self, x):\n        x = self.conv_norm_out(x)\n        x = self.conv_act(x)\n        return self.conv_out(x)\n```\n\n- **归一化层**：使用 `GroupNorm` 对特征图进行归一化，稳定输出。\n- **激活函数**：使用 `SiLU` 激活函数，增加非线性。\n- **卷积层**：使用一个 3x3 的卷积层，将特征图映射回输入的通道数。\n\n---\n\n### **输入与输出处理的完整实现**\n\n```python\nclass UNet2DConditionModel(nn.Module):\n    def __init__(self, in_channels, out_channels, block_out_channels):\n        super().__init__()\n        # 输入处理\n        self.input_processing = InputProcessing(in_channels, block_out_channels[0])\n\n        # 其他模块（下采样、中间、上采样）\n\n        # 输出处理\n        self.output_processing = OutputProcessing(block_out_channels[-1], out_channels)\n\n    def forward(self, x):\n        # 输入处理\n        x = self.input_processing(x)\n\n        # 其他模块处理\n\n        # 输出处理\n        x = self.output_processing(x)\n        return x\n```\n\n- **输入处理**：将输入图像的特征映射到模型的初始特征空间。\n- **输出处理**：将模型的最终特征图映射回输入的通道数。\n\n---\n\n### **总结**\n\n输入处理和输出处理模块在 `UNet2DConditionModel` 中起到了关键作用，分别负责将输入图像的特征映射到模型的初始特征空间，以及将模型的最终特征图映射回输入的通道数。这两个模块通过简单的卷积操作实现了特征的维度变换，为模型的特征提取和生成提供了基础。\n\n# Q: 详细讲解时间嵌入系统的细节\n\n时间嵌入系统在 `UNet2DConditionModel` 中起到了关键作用，它将时间步信息编码为条件向量，以便在模型的各个阶段中注入时间信息。下面是时间嵌入系统的详细结构和实现细节：\n\n---\n\n### **时间嵌入系统概述**\n\n时间嵌入系统的主要功能是将时间步（timestep）信息转换为高维向量，这些向量在模型的残差块中被用作条件信息，以指导模型在不同时间步的特征提取和生成过程。\n\n---\n\n### **时间嵌入系统的结构**\n\n#### 1. 正弦位置编码\n\n时间嵌入系统通常使用正弦位置编码来生成初始时间特征。\n\n```python\ndef get_timestep_embedding(timesteps, embedding_dim):\n    half_dim = embedding_dim // 2\n    emb = math.log(10000) / (half_dim - 1)\n    emb = torch.exp(torch.arange(half_dim, dtype=torch.float32) * -emb)\n    emb = timesteps[:, None] * emb[None, :]\n    emb = torch.cat([torch.sin(emb), torch.cos(emb)], dim=-1)\n    return emb\n```\n\n- **正弦和余弦函数**：使用正弦和余弦函数生成时间步的周期性表示。\n- **维度扩展**：将时间步扩展为高维向量，维度为 `embedding_dim`。\n\n---\n\n#### 2. 时间嵌入层\n\n时间嵌入层将正弦位置编码的输出进一步转换为模型所需的高维条件向量。\n\n```python\nclass TimestepEmbedding(nn.Module):\n    def __init__(self, timestep_input_dim, time_embed_dim, act_fn):\n        super().__init__()\n        self.linear1 = nn.Linear(timestep_input_dim, time_embed_dim)\n        self.act = getattr(nn, act_fn)()\n        self.linear2 = nn.Linear(time_embed_dim, time_embed_dim)\n\n    def forward(self, timesteps):\n        emb = get_timestep_embedding(timesteps, self.linear1.in_features)\n        emb = self.linear1(emb)\n        emb = self.act(emb)\n        emb = self.linear2(emb)\n        return emb\n```\n\n- **线性变换**：使用两个线性层将时间步嵌入转换为高维条件向量。\n- **激活函数**：通常使用 `SiLU` 或 `ReLU` 激活函数，增加非线性。\n\n---\n\n### **时间嵌入系统的完整实现**\n\n```python\nclass UNet2DConditionModel(nn.Module):\n    def __init__(self, timestep_input_dim, time_embed_dim, act_fn):\n        super().__init__()\n        self.time_embedding = TimestepEmbedding(timestep_input_dim, time_embed_dim, act_fn)\n\n    def forward(self, x, timesteps):\n        # 时间嵌入\n        t_emb = self.time_embedding(timesteps)\n\n        # 其他模块处理\n        return x\n```\n\n- **时间嵌入**：将时间步信息转换为高维条件向量。\n- **注入到模型**：时间嵌入被注入到模型的各个阶段，指导特征提取和生成。\n\n---\n\n### **总结**\n\n时间嵌入系统在 `UNet2DConditionModel` 中起到了关键作用，通过将时间步信息编码为高维条件向量，指导模型在不同时间步的特征提取和生成过程。这一系统通过正弦位置编码和线性变换实现了时间信息的高效编码，为模型的时间条件注入提供了基础。\n","title":"Stable Diffusion UNet 内部结构","abstract":"> [!summary]\n> 以下内容为 Cursor 中拥有 codebase 上下文的情况下与 claude-3.7-sonnet 的对话记录\n在 `train_text_to_image_lora.py` 脚本中，LoRA（Low-Rank Adaptation）通过在模型的特定层中插入低秩矩阵来实现微调。这种方法通过添加两个低秩矩阵来调整模型的权重，而不改变原始权重，从而实现参数高效的微调。","length":1560,"created_at":"2025-03-28T02:00:00.000Z","updated_at":"2025-03-28T02:00:00.000Z","tags":["深度学习","Stable Diffusion","LoRA","参数高效微调","模型训练","学习笔记"],"license":true},"prevNextInfo":{"prevInfo":{"pathMapping":{"filePath":"public/content/learn_from_ai/2025-03-28-mqtt-protocol-principles-applications.md","pagePath":"/learn_from_ai/mqtt-protocol-principles-applications","slug":"mqtt-protocol-principles-applications"},"meta":{"content":"\n> 本文详细介绍了 MQTT（Message Queuing Telemetry Transport）协议的核心内容、工作原理及其在物联网和分布式系统中的应用场景。文章分析了 MQTT 协议的特点、消息质量等级、主题设计以及安全机制，帮助读者全面了解这一轻量级的发布/订阅协议如何支持资源受限设备的可靠通信。\n\n## Q: 什么是 MQTT 协议？\n\nMQTT（Message Queuing Telemetry Transport）是一种轻量级的、基于发布/订阅模式的消息传输协议，专为受限设备和低带宽、高延迟或不可靠的网络环境设计。它由 Andy Stanford-Clark（IBM）和 Arlen Nipper（Cirrus Link）于 1999 年为连接石油管道的 SCADA 系统而开发，现已发展成为物联网（IoT）通信的标准协议之一。\n\nMQTT 协议工作在 TCP/IP 协议栈上，使用了最小化的协议开销，可以在资源受限的设备上实现高效通信。它采用发布/订阅的消息模式，而非传统的客户端/服务器模式，这使得它特别适合构建可扩展的物联网应用。\n\n## Q: MQTT 协议的工作原理是什么？\n\nMQTT 协议基于发布/订阅的消息模式工作，核心组件包括：\n\n1. **客户端（Client）**：任何运行 MQTT 库并通过网络连接到 MQTT 服务器的设备。客户端可以：\n\n   - 发布消息到特定主题\n   - 订阅感兴趣的主题以接收消息\n   - 取消订阅主题\n   - 与服务器断开连接\n\n2. **代理/服务器（Broker）**：负责接收所有消息，过滤消息，并将消息分发给订阅特定主题的客户端。代理是 MQTT 系统的核心，负责消息路由。\n\n3. **主题（Topic）**：消息的分类和路由机制。主题使用层次结构组织，类似于文件系统路径（如 `home/kitchen/temperature`）。\n\n4. **消息（Message）**：包含有效载荷（payload）的数据包，由发布者发送，通过代理分发给订阅相应主题的客户端。\n\n工作流程如下：\n\n1. 客户端连接到 MQTT 代理\n2. 客户端可以发布消息到一个主题\n3. 其他客户端可以订阅该主题\n4. 代理将消息转发给所有订阅该主题的客户端\n5. 当客户端不再需要连接时，它会与代理断开连接\n\n## Q: MQTT 协议的主要特性有哪些？\n\nMQTT 协议具有以下主要特性：\n\n1. **轻量级**：协议头部极小，适合在带宽受限的网络上传输。\n\n2. **发布/订阅模式**：发布者和订阅者之间完全解耦，不需要直接通信，提高了系统的可扩展性。\n\n3. **QoS（Quality of Service）**：提供三种消息传递质量等级：\n\n   - QoS 0（最多一次）：消息发送后不保证到达，也不会重试\n   - QoS 1（至少一次）：保证消息至少到达一次，可能重复\n   - QoS 2（恰好一次）：保证消息只到达一次，不会丢失也不会重复\n\n4. **保留消息**：代理可以保存特定主题的最后一条消息，新订阅者连接时立即接收到该消息。\n\n5. **持久会话**：客户端断开连接后，代理可以保存其订阅信息和未发送的消息。\n\n6. **遗嘱消息（Last Will and Testament）**：客户端意外断开连接时，代理可以自动发布预设的消息。\n\n7. **小型客户端代码**：客户端实现简单，占用资源少，适合嵌入式设备。\n\n8. **安全性**：支持 TLS/SSL 加密和用户名/密码认证。\n\n## Q: MQTT 有哪些版本？它们之间有什么区别？\n\nMQTT 协议经历了多次迭代，主要版本包括：\n\n1. **MQTT 3.1**：最早的广泛使用版本。\n\n2. **MQTT 3.1.1**：2014 年成为 OASIS 标准，修复了一些问题，改进了协议规范，是当前应用最广泛的版本。主要特性包括：\n\n   - 改进连接错误处理\n   - 定义了更清晰的会话状态规则\n   - 支持 WebSocket 传输\n\n3. **MQTT 5.0**：2018 年发布的最新标准版本，引入了许多新功能，包括：\n\n   - 消息过期机制\n   - 主题别名（减少网络流量）\n   - 用户属性（支持自定义元数据）\n   - 共享订阅（支持负载均衡）\n   - 请求/响应模式支持\n   - 服务器断开重定向\n   - 增强的错误报告\n   - 流量控制机制\n\n4. **MQTT-SN（MQTT for Sensor Networks）**：为非 TCP/IP 网络（如 ZigBee）设计的变体，适用于更受限的设备和网络。\n\n主要区别在于功能集的丰富程度和适用场景。MQTT 5.0 提供了更多的企业级功能和扩展性，而早期版本则更简单，实现成本更低。\n\n## Q: MQTT 协议的应用场景有哪些？\n\nMQTT 协议广泛应用于以下场景：\n\n1. **物联网（IoT）设备通信**：\n\n   - 智能家居设备（智能灯泡、恒温器、门锁等）\n   - 穿戴设备与手机/云服务的通信\n   - 远程传感器数据收集（环境监测、农业、工业等）\n\n2. **工业物联网（IIoT）**：\n\n   - 工厂设备监控与控制\n   - 预测性维护系统\n   - SCADA（监控与数据采集）系统\n\n3. **汽车与交通系统**：\n\n   - 车联网应用\n   - 车队管理系统\n   - 交通监控系统\n\n4. **能源管理**：\n\n   - 智能电网\n   - 能源消耗监控\n   - 分布式能源系统\n\n5. **医疗健康**：\n\n   - 远程患者监控\n   - 医疗设备互连\n   - 健康数据收集与分析\n\n6. **消息通知系统**：\n\n   - 移动应用推送通知\n   - 实时通信应用\n   - 社交媒体更新\n\n7. **金融服务**：\n\n   - 实时交易数据\n   - 分布式系统间的消息传递\n\n8. **电子商务**：\n   - 库存管理\n   - 物流跟踪\n   - 订单处理\n\nMQTT 特别适合需要实时性、可靠性同时又受限于带宽或设备能力的应用场景。\n\n## Q: MQTT 的安全机制有哪些？\n\nMQTT 提供多层安全机制来保护消息传输和系统访问：\n\n1. **传输层安全**：\n\n   - TLS/SSL 加密：保护客户端和代理之间的通信\n   - 证书验证：防止中间人攻击\n\n2. **认证机制**：\n\n   - 用户名/密码认证：验证客户端身份\n   - X.509 客户端证书：提供更强的身份验证\n   - OAuth 或自定义认证机制（MQTT 5.0）\n\n3. **授权控制**：\n\n   - 主题级别的访问控制：限制客户端可以发布/订阅的主题\n   - 权限管理：定义不同用户的读写权限\n\n4. **有效载荷加密**：\n\n   - 应用层加密：对敏感数据进行端到端加密\n   - 加密库集成：如 AES 用于数据加密\n\n5. **安全最佳实践**：\n\n   - 唯一客户端 ID\n   - 定期轮换凭证\n   - 最小权限原则\n   - 连接保活和超时设置\n\n6. **MQTT 特有安全功能**：\n   - 客户端断开检测（通过遗嘱消息）\n   - 会话清理机制\n   - 拒绝不安全连接的能力\n\n在实际部署中，通常需要结合多种安全机制来构建完整的安全框架，根据应用的敏感性和风险级别选择适当的安全级别。\n\n## Q: 主要的 MQTT 代理/服务器实现有哪些？\n\n市场上有多种 MQTT 代理实现，包括开源和商业产品：\n\n1. **开源代理**：\n\n   - **Mosquitto**：Eclipse Foundation 维护的轻量级代理，是最流行的开源实现之一\n   - **EMQ X**：高度可扩展的企业级 MQTT 代理，支持百万级连接\n   - **HiveMQ**：基于 Java 的代理，提供开源社区版和商业版\n   - **VerneMQ**：基于 Erlang 的高性能分布式 MQTT 代理\n   - **RabbitMQ**：通过插件支持 MQTT，同时支持多种消息协议\n\n2. **云服务提供商的 MQTT 服务**：\n\n   - **AWS IoT Core**：亚马逊云的 MQTT 服务\n   - **Azure IoT Hub**：微软云的 IoT 消息服务，支持 MQTT\n   - **Google Cloud IoT**：谷歌云平台的 IoT 服务\n   - **IBM Watson IoT Platform**：IBM 的 IoT 云服务\n\n3. **嵌入式代理**：\n   - **Mosquitto Embedded**：适用于嵌入式系统的 Mosquitto 版本\n   - **Moquette**：Java 实现的轻量级代理，适合嵌入到应用中\n\n这些代理在性能、可扩展性、功能集和易用性方面有所不同，选择时需要考虑具体应用需求、预期连接数量、消息吞吐量以及部署环境等因素。\n\n## Q: MQTT 与其他消息协议相比有什么优势和劣势？\n\nMQTT 与其他消息协议的对比：\n\n### 与 HTTP 相比：\n\n**优势**：\n\n- 更小的协议开销，适合带宽受限环境\n- 支持推送模型，实时性更好\n- 更低的功耗，适合电池供电设备\n- 支持持久会话和消息质量保证\n\n**劣势**：\n\n- 不像 HTTP 那样无处不在，需要专门的客户端和服务器\n- 缺乏 HTTP 的内置缓存和代理机制\n- 在浏览器环境需要通过 WebSocket 实现\n\n### 与 CoAP 相比：\n\n**优势**：\n\n- 基于 TCP，连接可靠性更高\n- 更成熟的生态系统和工具支持\n- 更丰富的 QoS 选项\n\n**劣势**：\n\n- CoAP 基于 UDP，在某些受限环境中可能更高效\n- CoAP 更好地支持 RESTful 模型\n\n### 与 AMQP 相比：\n\n**优势**：\n\n- 更轻量级，协议开销更小\n- 实现更简单，适合资源受限设备\n- 功耗更低\n\n**劣势**：\n\n- AMQP 提供更丰富的消息路由功能\n- AMQP 有更强的事务支持\n- AMQP 支持更复杂的队列模型\n\n### 与 WebSocket 相比：\n\n**优势**：\n\n- 专为消息传递设计，有内置的发布/订阅模型\n- 更低的带宽消耗\n- 提供消息质量保证\n\n**劣势**：\n\n- WebSocket 是更通用的协议，可以传输任何类型的数据\n- WebSocket 在 Web 环境中更原生\n\nMQTT 的主要优势在于其轻量级设计和对资源受限环境的适应性，特别适合物联网应用；而其主要劣势是在某些需要复杂消息路由或事务处理的场景中功能相对简单。选择协议时应根据具体应用场景和需求进行权衡。\n\n## Q: 设计基于 MQTT 的系统时有哪些最佳实践？\n\n设计和实现基于 MQTT 的系统时，以下最佳实践可以帮助提高系统的可靠性、安全性和可扩展性：\n\n### 主题设计：\n\n1. **使用层次化主题结构**：如 `location/device-type/device-id/measurement`\n2. **避免过深的主题层次**：过深的层次会增加处理复杂性\n3. **使用通配符订阅谨慎**：过于广泛的通配符可能导致接收不必要的消息\n4. **遵循一致的命名约定**：使主题命名直观且可维护\n\n### QoS 选择：\n\n1. **为关键数据使用 QoS 1 或 2**：确保重要消息的传递\n2. **非关键数据可使用 QoS 0**：减少网络开销，提高吞吐量\n3. **考虑电池寿命影响**：更高的 QoS 意味着更多的消息交换和更高的电池消耗\n\n### 连接管理：\n\n1. **实现自动重连机制**：处理网络波动\n2. **使用唯一的客户端 ID**：避免连接冲突\n3. **设置合理的保活间隔**：平衡及时检测断开连接与网络开销\n4. **利用\"遗嘱\"消息**：通知其他设备客户端意外断开\n\n### 安全最佳实践：\n\n1. **始终使用 TLS/SSL**：加密所有通信\n2. **实施强认证机制**：至少使用用户名/密码，最好使用证书\n3. **实施细粒度授权**：限制客户端可以发布/订阅的主题\n4. **加密敏感载荷**：为敏感数据添加额外的加密层\n5. **定期轮换凭证**：降低凭证泄露的风险\n\n### 性能与可扩展性：\n\n1. **保持消息短小**：减少带宽使用\n2. **使用共享订阅（MQTT 5.0）**：实现负载均衡\n3. **考虑消息保留策略**：明智使用保留消息\n4. **规划代理集群**：对于大规模部署，使用可集群的代理实现\n5. **监控系统性能**：跟踪连接数、消息吞吐量等指标\n\n### 数据设计：\n\n1. **结构化消息内容**：使用 JSON、Protobuf 等标准格式\n2. **包含时间戳**：助于数据分析和故障排除\n3. **考虑消息版本控制**：允许客户端和格式随时间演化\n\n### 故障恢复：\n\n1. **存储重要状态**：使客户端能够在重新连接后恢复\n2. **实现离线缓冲**：临时存储无法发送的消息\n3. **设计优雅的降级策略**：当部分系统不可用时保持核心功能\n\n遵循这些最佳实践可以帮助构建更加健壮、高效和安全的 MQTT 系统，同时为未来的扩展和维护奠定基础。\n\n## Q: MQTT 协议的未来发展趋势如何？\n\nMQTT 协议的未来发展趋势主要体现在以下几个方面：\n\n1. **更广泛的 MQTT 5.0 采用**：\n\n   - 随着物联网生态系统的成熟，MQTT 5.0 的高级功能（如共享订阅、消息过期等）将获得更广泛的支持和应用\n   - 更多的代理和客户端库将完全实现 MQTT 5.0 规范\n\n2. **与云原生技术的深度集成**：\n\n   - 与 Kubernetes、服务网格等云原生技术的无缝集成\n   - 基于容器的 MQTT 代理部署将成为标准\n   - 支持更灵活的水平扩展和自动伸缩能力\n\n3. **增强的安全机制**：\n\n   - 更强大的认证机制，包括基于区块链的去中心化身份验证\n   - 更细粒度的访问控制和权限管理\n   - 端到端加密的标准化实现\n\n4. **边缘计算整合**：\n\n   - MQTT 将更紧密地与边缘计算框架集成\n   - 支持在网络边缘进行消息过滤、转换和预处理\n   - 减少云-边缘通信延迟和带宽使用\n\n5. **跨协议兼容性**：\n\n   - 与其他物联网协议（如 AMQP、HTTP/2、gRPC）的无缝桥接\n   - 统一的物联网消息网关，支持多协议转换\n\n6. **实时分析与机器学习集成**：\n\n   - MQTT 与流处理和实时分析平台的紧密集成\n   - 支持设备遥测数据的即时分析和机器学习模型应用\n\n7. **更高效的资源利用**：\n\n   - 更优化的协议实现，进一步降低带宽和资源消耗\n   - 针对超低功耗设备的专用优化\n\n8. **标准化的语义互操作性**：\n\n   - 数据模型和元数据标准化\n   - 基于 MQTT 的设备管理和自动配置标准\n\n9. **工业物联网专用扩展**：\n\n   - 针对工业控制系统的确定性和实时性扩展\n   - 与 OPC UA 等工业标准的协同工作\n\n10. **更丰富的生态系统工具**：\n    - 更强大的监控、调试和可视化工具\n    - 跨平台和跨语言的开发框架\n\n随着物联网和边缘计算的持续发展，MQTT 有望保持其作为轻量级通信协议的主导地位，同时不断演化以满足新兴用例和技术要求的需求。\n\n## Q: 详细介绍 MQTT 协议的内容，原理，应用场景，以及应用 MQTT 协议时要注意的事项\n\n> [!reasoning]-\n> 嗯，用户让我详细介绍一下 MQTT 协议的内容、原理、应用场景以及使用时的注意事项。我需要先回忆一下 MQTT 的基础知识，确保自己理解正确。首先，MQTT 是 Message Queuing Telemetry Transport 的缩写，是一种轻量级的发布/订阅消息传输协议，常用于物联网设备之间的通信。\n>\n> 内容方面，应该包括协议的基本概念，比如它是基于发布/订阅模型的，使用的 TCP/IP 协议，设计目标是低带宽、高延迟或不稳定的网络环境。然后，可能需要提到 MQTT 的不同版本，比如 3.1.1 和 5.0，以及它们的一些改进。\n>\n> 原理部分，需要解释发布/订阅机制的工作流程，客户端和代理服务器之间的交互。比如客户端连接到代理后，可以发布消息到特定的主题，或者订阅主题来接收消息。还有 QoS 等级，三个级别的服务质量，确保消息传递的可靠性。另外，保留消息和遗嘱消息也是重要的概念，需要详细说明。\n>\n> 应用场景的话，物联网肯定是主要的，比如智能家居、工业传感器、车联网等。另外，移动应用和即时通讯可能也会用到 MQTT，因为它在低功耗和弱网络条件下的表现不错。还有可能需要提到远程监控、医疗设备等场景。\n>\n> 注意事项方面，安全性是首要的，比如使用 TLS 加密，客户端认证机制。然后是 QoS 的选择，不同的等级对性能的影响，需要根据场景来权衡。主题设计需要避免过于复杂，防止性能问题。还有心跳机制和会话保持，确保连接的稳定性。此外，代理服务器的性能和扩展性也要考虑，避免成为瓶颈。\n>\n> 用户可能对 MQTT 的具体实现细节不太清楚，比如如何选择 QoS 等级，或者如何处理消息的持久化。此外，用户可能想知道在资源受限的设备上如何优化使用 MQTT，比如减少数据包大小，使用短主题名等。可能还需要比较 MQTT 和其他协议如 HTTP、CoAP 的区别，但用户没提到这点，暂时不用展开。\n>\n> 要确保覆盖所有用户提到的点，同时用通俗易懂的语言解释技术术语，比如 QoS 等级的具体含义和应用场景。比如 QoS 0 适合传感器数据，丢失一两条没关系；而 QoS 2 适合关键指令，必须确保送达。\n>\n> 可能需要提醒用户注意协议版本的选择，比如 MQTT 5.0 的新功能如原因码、共享订阅等，是否适用于他们的项目。另外，网络不稳定时的处理，比如遗嘱消息的设置，可以在设备意外断开时通知其他客户端。\n>\n> 还要考虑用户的实际应用，比如如果他们开发智能家居系统，需要注意主题命名规范，避免冲突，使用层次结构来管理设备。同时，安全性方面，除了加密，还要注意客户端 ID 的管理，防止未授权访问。\n>\n> 最后，注意事项部分要强调实际部署中的问题，比如代理服务器的选择（Mosquitto、EMQX 等），性能调优，以及监控和日志记录的重要性，帮助用户避免常见陷阱。\n\n### MQTT 协议详解\n\n**MQTT**（Message Queuing Telemetry Transport）是一种轻量级的**发布/订阅模式**消息传输协议，专为低带宽、高延迟或不稳定的网络环境设计，广泛应用于物联网（IoT）和移动设备通信。\n\n---\n\n#### **一、协议内容**\n\n1. **核心特性**：\n\n   - **轻量级**：协议头最小仅 2 字节，适合资源受限的设备。\n   - **基于发布/订阅模型**：解耦消息生产者和消费者，通过主题（Topic）路由消息。\n   - **支持多种 QoS 等级**：提供三种消息传输质量保证（QoS 0/1/2）。\n   - **低功耗**：适合电池供电的物联网设备。\n   - **跨平台性**：基于 TCP/IP 协议，支持多种编程语言和平台。\n\n2. **协议版本**：\n\n   - **MQTT 3.1.1**（主流版本）：标准化协议，广泛兼容。\n   - **MQTT 5.0**（新版本）：新增会话过期、原因码、共享订阅等功能。\n\n3. **核心组件**：\n   - **Broker（代理服务器）**：负责消息路由和客户端管理（如 Mosquitto、EMQX）。\n   - **Client（客户端）**：发布或订阅消息的设备或应用。\n   - **Topic（主题）**：分层结构（如`home/room1/temperature`），支持通配符（`+`和`#`）。\n\n---\n\n#### **二、工作原理**\n\n1. **连接与会话**：\n\n   - 客户端通过`CONNECT`报文与 Broker 建立连接，支持用户名/密码认证。\n   - 可设置`Clean Session`标志决定是否保留历史会话。\n\n2. **发布与订阅**：\n\n   - **订阅**：客户端发送`SUBSCRIBE`报文订阅特定主题。\n   - **发布**：客户端向主题发送`PUBLISH`报文，Broker 将消息转发给所有订阅者。\n\n3. **QoS 等级**：\n\n   - **QoS 0（最多一次）**：消息可能丢失，适用于非关键数据（如传感器读数）。\n   - **QoS 1（至少一次）**：确保消息到达，但可能重复（需业务去重）。\n   - **QoS 2（恰好一次）**：通过四次握手保证消息精确传输，开销最大。\n\n4. **其他机制**：\n   - **保留消息（Retained Message）**：Broker 为每个主题保存最新一条消息，供新订阅者获取。\n   - **遗嘱消息（Last Will）**：客户端异常断开时，Broker 自动发布预设消息。\n\n---\n\n#### **三、典型应用场景**\n\n1. **物联网（IoT）**：\n\n   - 智能家居（设备状态同步）、工业传感器数据采集。\n   - 远程监控（如农业温湿度监测、能源管理）。\n\n2. **移动应用**：\n\n   - 即时通讯（如聊天消息推送）。\n   - 移动设备状态上报（如 GPS 位置更新）。\n\n3. **车联网**：\n\n   - 车辆状态实时上报（电池电量、故障预警）。\n   - 远程控制（车门解锁、空调调节）。\n\n4. **医疗健康**：\n   - 可穿戴设备数据传输（心率、步数）。\n   - 远程医疗设备监控。\n\n---\n\n#### **四、使用注意事项**\n\n1. **安全性**：\n\n   - 启用 TLS 加密（MQTT over SSL/TLS）防止数据窃听。\n   - 使用客户端 ID/证书认证，避免未授权访问。\n   - 避免敏感信息通过明文传输。\n\n2. **主题设计**：\n\n   - 采用分层结构（如`country/city/deviceID`），避免主题爆炸。\n   - 慎用通配符`#`，防止订阅过多无关消息。\n\n3. **QoS 选择**：\n\n   - 根据场景平衡可靠性与性能：QoS 2 可能导致高延迟。\n   - 若网络稳定，优先使用 QoS 0 或 1。\n\n4. **资源管理**：\n\n   - 设备端优化：缩短心跳间隔（`Keep Alive`）以节省电量。\n   - Broker 端配置连接数和消息吞吐量上限，防止过载。\n\n5. **会话与持久化**：\n\n   - 非持久会话（`Clean Session=1`）适用于临时设备。\n   - 持久会话需 Broker 支持消息存储，避免数据丢失。\n\n6. **版本兼容性**：\n   - 新项目优先选择 MQTT 5.0（功能更丰富）。\n   - 旧设备可能需要降级适配 MQTT 3.1.1。\n\n---\n\n#### **五、常见问题与解决**\n\n- **消息堆积**：Broker 内存不足时，可启用消息持久化或限制 QoS。\n- **网络波动**：设置合理的`Keep Alive`时间（如 60 秒），及时检测断线。\n- **主题冲突**：通过命名空间隔离不同业务（如`companyA/device1`）。\n\n---\n\n**总结**：MQTT 凭借其轻量、高效和灵活性，成为物联网通信的首选协议。合理设计主题、选择 QoS 等级，并结合安全措施，可充分发挥其优势。\n\n## Q: QoS 是个什么指标？如何保证？\n\n> [!reasoning]-\n>\n> 好的，用户现在问的是 QoS 是什么指标，以及如何保证。首先，我需要回忆之前关于 MQTT 的讨论，特别是关于 QoS 的部分。之前已经详细介绍了 MQTT 协议的内容，包括 QoS 的三个等级，可能用户现在想更深入了解 QoS 的概念和实现机制。\n>\n> 首先，用户可能对 QoS 的定义不太清楚，虽然之前提到过三个等级，但需要更明确地解释 QoS 是什么，全称是什么。QoS 代表服务质量（Quality of Service），在 MQTT 中用来定义消息传递的可靠性级别。这一点需要先明确。\n>\n> 接下来，用户想知道如何保证不同的 QoS 等级。需要分别解释每个等级的实现机制。比如 QoS 0 是“最多一次”，它只是发送一次，不需要确认，适用于不重要的数据。QoS 1 是“至少一次”，需要确认，发送方会存储消息直到收到确认，但可能导致重复。QoS 2 是“恰好一次”，通过四次握手确保消息不重复不丢失。\n>\n> 然后，用户可能的应用场景会影响他们选择 QoS 等级，所以可能需要补充不同等级适用的场景，比如传感器数据用 QoS 0，控制指令用 QoS 1 或 2。同时，用户可能关心实际应用中如何配置这些等级，需要注意的地方，比如网络状况、资源消耗等。\n>\n> 另外，用户可能对 QoS 的实现细节感兴趣，比如 QoS 2 的四步握手过程，包括 PUBLISH、PUBREC、PUBREL、PUBCOMP。需要简明扼要地描述这些步骤，但避免过于技术化，保持易懂。\n>\n> 还需要考虑用户可能的误区，比如认为高 QoS 总是更好，但实际上高 QoS 会增加延迟和资源消耗，需要根据实际需求权衡。可能还要提到如何选择 QoS 等级，比如根据数据的重要性、网络稳定性、设备资源情况来决定。\n>\n> 最后，要确保回答结构清晰，分点说明，每个 QoS 等级的定义、实现机制、适用场景和注意事项。可能还需要总结如何选择，帮助用户做出决策。\n>\n> 检查是否有遗漏点，比如 QoS 的确认机制、消息重传、存储等。确保每个部分都覆盖到，并且语言通俗易懂，适合不同技术背景的读者。\n\n### **QoS（服务质量）详解**\n\nQoS（**Quality of Service**）是 MQTT 协议中用于定义**消息传输可靠性等级**的核心指标，它决定了消息在客户端与 Broker（代理服务器）之间的传递方式和可靠性保障。MQTT 支持三种 QoS 等级，开发者可根据场景需求选择不同的等级，以平衡**可靠性、延迟和资源消耗**。\n\n---\n\n### **一、QoS 的三种等级**\n\n#### **1. QoS 0（最多一次，At Most Once）**\n\n- **定义**：  \n  消息仅发送一次，不保证接收方是否收到，可能丢失。\n- **实现机制**：\n  - 发送方（Publisher）直接发送消息，不等待确认（ACK）。\n  - Broker 和订阅者（Subscriber）不存储消息，直接丢弃失败的消息。\n- **适用场景**：  \n  非关键性数据（如周期性传感器读数、环境监测数据）。\n- **优点**：  \n  传输最快、资源消耗最低。\n- **缺点**：  \n  无法保证消息必达。\n\n#### **2. QoS 1（至少一次，At Least Once）**\n\n- **定义**：  \n  确保消息至少被接收一次，但可能重复。\n- **实现机制**：\n  - 发送方存储消息，直到收到 Broker 的确认（PUBACK）。\n  - 若未收到确认，发送方会重传消息（可能导致重复）。\n  - Broker 同样会向订阅者重传消息，直到收到订阅者的确认。\n- **适用场景**：  \n  需要确保消息必达但对重复不敏感的场景（如控制指令、状态更新）。\n- **优点**：  \n  可靠性较高，适合中等重要性数据。\n- **缺点**：  \n  可能重复，需业务层去重（如通过消息 ID 过滤）。\n\n#### **3. QoS 2（恰好一次，Exactly Once）**\n\n- **定义**：  \n  确保消息**仅被传递一次**，既不会丢失也不会重复。\n- **实现机制**：  \n  通过**四次握手**保证可靠性（以客户端到 Broker 为例）：\n  1. 发送方发送 `PUBLISH` 消息并存储。\n  2. Broker 回复 `PUBREC`（已接收确认）。\n  3. 发送方收到 `PUBREC` 后发送 `PUBREL`（释放消息）。\n  4. Broker 回复 `PUBCOMP`（完成确认），双方删除消息副本。\n- **适用场景**：  \n  关键性数据（如支付指令、设备固件升级）。\n- **优点**：  \n  高可靠性，无重复。\n- **缺点**：  \n  延迟高、资源消耗大（需存储消息和多次交互）。\n\n---\n\n### **二、QoS 的保障机制**\n\nMQTT 通过以下机制实现 QoS 的可靠性保证：\n\n1. **消息存储与重传**：\n   - QoS 1 和 QoS 2 的发送方和 Broker 会缓存消息，直到收到确认。\n   - 若超时未收到确认，触发消息重传。\n2. **唯一消息标识符（Message ID）**：\n   - 每个消息分配唯一 ID，用于去重（QoS 1）和状态跟踪（QoS 2）。\n3. **状态机管理**：\n   - QoS 2 通过状态机严格管理四次握手过程，确保消息不丢失、不重复。\n\n---\n\n### **三、如何选择 QoS 等级？**\n\n| **因素**       | **QoS 0**              | **QoS 1** | **QoS 2** |\n| -------------- | ---------------------- | --------- | --------- |\n| **网络稳定性** | 高                     | 中        | 低        |\n| **数据重要性** | 低                     | 中        | 高        |\n| **设备资源**   | 资源受限（如电池供电） | 资源适中  | 资源充足  |\n| **允许延迟**   | 低延迟                 | 中等延迟  | 高延迟    |\n\n**示例场景**：\n\n- **智能家居温湿度传感器**：QoS 0（数据周期性上报，允许偶尔丢失）。\n- **智能门锁开锁指令**：QoS 1（需确保指令到达，重复开锁无风险）。\n- **医疗设备紧急告警**：QoS 2（必须精确传递一次，避免误报或漏报）。\n\n---\n\n### **四、注意事项**\n\n1. **端到端 QoS**：  \n   MQTT 的 QoS 仅保证客户端与 Broker 之间的传输，**不保证 Broker 与订阅者之间的传递**。\n   - 若订阅者离线，需结合**持久会话（Clean Session=0）** 和 Broker 的消息存储功能。\n2. **性能与资源消耗**：\n   - QoS 2 的四次握手会显著增加延迟和内存占用，需谨慎使用。\n3. **业务层去重**：\n   - 即使使用 QoS 2，某些场景仍需业务层校验（如 Broker 实现不一致）。\n\n---\n\n### **总结**\n\nQoS 是 MQTT 协议的核心能力，通过选择不同等级，开发者可在**可靠性、延迟和资源消耗**之间灵活权衡。实际应用中需结合具体场景（如数据重要性、网络条件、设备资源）选择最优策略，必要时通过业务逻辑（如消息去重）补充协议层的保障。\n\n## Q: 是否有其他协议能做与 MQTT 协议类似的功能？他们跟 MQTT 有何异同，有何优劣？\n\n> [!reasoning]-\n>\n> 嗯，用户问的是有没有其他协议能实现类似 MQTT 的功能，以及它们的异同和优劣。我需要先看看搜索结果里的内容，看看有哪些协议被提到过。网页 2 提到了 AMQP、STOMP、CoAP、XMPP，这些都是和 MQTT 类似的协议。网页 3 也讨论了 MQTT、XMPP、WebSockets、AMQP 等协议的选型。网页 4 比较了 MQTT、CoAP、RESTful/HTTP 和 XMPP，可能有用。网页 7 提到 NATS 支持 MQTT，可能也是一个替代方案。\n>\n> 首先，我需要整理这些协议的基本信息。比如 AMQP 是高级消息队列协议，支持复杂的消息路由，适合企业应用，但可能比 MQTT 重。STOMP 是基于文本的，适合简单场景，但性能可能不如二进制协议。CoAP 专为受限设备设计，使用 UDP，适合低功耗物联网，但可靠性可能不如基于 TCP 的 MQTT。XMPP 基于 XML，扩展性强，但开销大，适合即时通讯。NATS 支持 MQTT，可能在高吞吐量和低延迟方面有优势。\n>\n> 然后，比较它们的异同。比如传输层，MQTT 用 TCP，CoAP 用 UDP。消息模型方面，MQTT 是发布/订阅，而 CoAP 是请求/响应，但也能支持发布/订阅。QoS 方面，MQTT 有不同等级，CoAP 也有类似的机制。安全方面，MQTT 支持 TLS，CoAP 使用 DTLS。\n>\n> 还要注意各个协议的应用场景。比如 MQTT 适合物联网设备，AMQP 适合企业级消息队列，CoAP 在资源受限设备上表现更好，XMPP 适合需要扩展性的即时通讯。同时，搜索结果里提到 MQTT 的缺点，比如可扩展性有限，不支持请求/响应模式，而其他协议可能弥补这些不足。\n>\n> 需要引用不同网页的信息。比如网页 2 提到 AMQP、STOMP、CoAP、XMPP；网页 3 详细比较了 MQTT 和其他协议的适用场景；网页 4 的对比表格有助于总结各个协议的特性；网页 6 提到 MQTT 的劣势，如不支持请求/响应；网页 7 提到 NATS 支持 MQTT 协议，可能作为替代方案。\n>\n> 最后，要确保回答结构清晰，分点列出各个协议，并比较它们的异同和优劣，同时引用对应的搜索结果编号。比如 AMQP 在网页 2 和 3 都有提到，CoAP 在网页 2、4、5，XMPP 在网页 2、4，NATS 在网页 7。需要注意避免重复引用同一网页，每个要点尽量综合多个网页的信息。\n\n以下是几种能够实现与 MQTT 类似功能的协议及其与 MQTT 的异同与优劣分析：\n\n---\n\n### **1. AMQP（Advanced Message Queuing Protocol）**\n\n- **功能相似性**：支持发布/订阅模型和消息队列，提供高可靠性传输，适合企业级消息系统。\n- **差异与优劣**：\n  - **协议复杂度**：AMQP 功能更强大，支持事务、消息持久化、复杂路由规则（如直接/主题/扇出路由），但协议开销较大，适合需要高可靠性和复杂消息管理的场景（如金融系统）。\n  - **性能**：相比 MQTT，AMQP 在低带宽环境中效率较低，但对大规模企业级应用更友好。\n  - **适用场景**：更适合传统企业中间件（如 RabbitMQ），而非物联网设备。\n\n---\n\n### **2. CoAP（Constrained Application Protocol）**\n\n- **功能相似性**：专为物联网设备设计，支持轻量级请求/响应模型，类似 HTTP 的 RESTful 风格，但基于 UDP，适合资源受限设备。\n- **差异与优劣**：\n  - **传输层**：CoAP 使用 UDP，支持多播，适合低功耗设备（如传感器），但需依赖应用层实现可靠性（如重传机制）；MQTT 基于 TCP，默认更可靠。\n  - **消息模型**：CoAP 原生支持请求/响应，MQTT 需通过发布/订阅模拟。CoAP 也可通过扩展实现发布/订阅。\n  - **适用场景**：CoAP 更适合一对一或小规模设备通信（如智能家居传感器），而 MQTT 更适合大规模设备连接。\n\n---\n\n### **3. STOMP（Simple Text Oriented Messaging Protocol）**\n\n- **功能相似性**：基于文本的协议，支持发布/订阅和队列模型，跨语言兼容性好。\n- **差异与优劣**：\n  - **协议格式**：STOMP 为文本协议，可读性强但传输效率低于 MQTT 的二进制协议。\n  - **功能特性**：支持事务和消息确认，但缺乏 MQTT 的 QoS 分级机制，可靠性依赖中间件实现。\n  - **适用场景**：适合需要快速集成的简单应用（如浏览器与后端通信），而非高吞吐量物联网场景。\n\n---\n\n### **4. XMPP（Extensible Messaging and Presence Protocol）**\n\n- **功能相似性**：支持即时通信和发布/订阅，扩展性强（基于 XML），常用于聊天和社交应用。\n- **差异与优劣**：\n  - **协议开销**：XMPP 的 XML 格式导致协议头较大，不适合低带宽环境；MQTT 更轻量。\n  - **实时性**：XMPP 支持在线状态管理和实时会话，MQTT 更专注于异步消息传输。\n  - **适用场景**：XMPP 适合需要复杂交互和扩展性的即时通信（如企业协作工具），MQTT 更适合设备数据上报。\n\n---\n\n### **5. NATS（Cloud Native Messaging System）**\n\n- **功能相似性**：支持发布/订阅和点对点通信，NATS Server v2.2.0+ 原生兼容 MQTT 协议，可替代 MQTT 代理。\n- **差异与优劣**：\n  - **性能**：NATS 以高吞吐量和低延迟著称，适合云原生和微服务架构，MQTT 更侧重物联网设备兼容性。\n  - **协议扩展**：NATS 支持与 MQTT 互通，允许混合部署，但需依赖特定中间件实现（如 NATS 服务器）。\n  - **适用场景**：适合需要统一消息总线且同时支持 MQTT 和 NATS 协议的系统。\n\n---\n\n### **总结：协议选型建议**\n\n| **场景需求**           | **推荐协议** | **关键优势**           |\n| ---------------------- | ------------ | ---------------------- |\n| 大规模物联网设备连接   | MQTT         | 轻量、低功耗、QoS 分级 |\n| 企业级复杂消息路由     | AMQP         | 高可靠性、事务支持     |\n| 资源受限设备（低功耗） | CoAP         | 基于 UDP、极简协议头   |\n| 浏览器与后端实时通信   | STOMP        | 文本协议、易集成       |\n| 即时通信与状态管理     | XMPP         | 扩展性强、实时交互     |\n| 云原生高吞吐量系统     | NATS         | 低延迟、兼容 MQTT      |\n\n**注**：实际选型需结合网络环境、设备资源、数据安全（如是否需 TLS/DTLS）和生态支持（如云平台兼容性）综合考量。\n","title":"详细介绍 MQTT 协议的内容，原理，应用场景","abstract":"> 本文详细介绍了 MQTT（Message Queuing Telemetry Transport）协议的核心内容、工作原理及其在物联网和分布式系统中的应用场景。文章分析了 MQTT 协议的特点、消息质量等级、主题设计以及安全机制，帮助读者全面了解这一轻量级的发布/订阅协议如何支持资源受限设备的可靠通信。\nMQTT（Message Queuing Telemetry Transport）是一种轻量级的、基于发布/订阅模式的消息传输协议，专为受限设备和低带宽、高延迟或不可靠的网络环境设计。它由 Andy Stanford-Clark（IBM）和 Arlen Nipper（Cirrus Link）于 1999 年为连接石油管道的 SCADA 系统而开发，现已发展成为物联网（IoT）通信的标准协议之一。\nMQTT 协议工作在 TCP/IP 协议栈上，使用了最小化的协议开销，可以在资源受限的设备上实现高效通信。它采用发布/订阅的消息模式，而非传统的客户端/服务器模式，这使得它特别适合构建可扩展的物联网应用。","length":722,"created_at":"2025-03-28T06:35:00.000Z","updated_at":"2025-03-28T06:35:00.000Z","tags":["协议","IoT","物联网","消息队列","学习笔记"],"license":true}},"nextInfo":{"pathMapping":{"filePath":"public/content/learn_from_ai/2025-03-07-golang-new-and-memory-management.md","pagePath":"/learn_from_ai/golang-new-and-memory-management","slug":"golang-new-and-memory-management"},"meta":{"content":"\n> 本文为与 GPT-4o 的对话记录，深入探讨 GoLang 中 new() 函数的使用以及相关的内存管理机制。\n\n## Q: Golang 中， new() 如果内存申请不成功会发生什么？\n\n在 Go 语言中，`new()` 函数用于分配内存并返回指向该内存的指针。`new()` 函数的行为是非常简单且安全的：它总是返回一个指向零值的指针。Go 语言的内存分配器会确保内存分配成功，因此在使用 `new()` 时，不会出现内存分配失败的情况。\n\n换句话说，`new()` 函数在 Go 中不会返回 `nil`，因为它总是能够成功分配内存并返回一个有效的指针。Go 语言的设计目标之一就是提供一个安全的内存管理机制，因此开发者不需要担心内存分配失败的问题。\n\n如果你有任何其他关于 Go 语言的问题，欢迎随时提问！\n\n## Q: 那如果机器上的内存已经满了，调用 new() 会发生什么？\n\n在 Go 语言中，如果机器上的内存已经满了，调用 `new()` 或其他内存分配函数（如 `make()` 或 `append()`）时，Go 运行时会尝试分配内存。如果内存确实不足，Go 运行时会引发一个运行时错误（runtime panic），通常是 `runtime: out of memory`。\n\n这种情况会导致程序崩溃，因为 Go 语言的内存分配器无法满足内存请求。Go 语言的设计目标之一是简化内存管理，因此它不提供手动处理内存分配失败的机制。相反，Go 依赖于垃圾回收和自动内存管理来尽量减少内存不足的情况。\n\n因此，在编写 Go 程序时，开发者通常不需要直接处理内存分配失败的情况，但需要注意程序的内存使用情况，尤其是在处理大数据集或长时间运行的服务时，以避免内存耗尽。\n\n## Q: new 返回的对象一定在堆上吗？如果逃逸分析发现这个对象没有逃逸，也会在堆上吗？\n\n在 Go 语言中，`new()` 返回的对象不一定总是在堆上分配。Go 编译器使用一种称为逃逸分析（escape analysis）的技术来决定对象是分配在堆上还是栈上。\n\n如果逃逸分析发现一个对象没有逃逸出其函数的作用域（即，它不会在函数返回后继续被使用），那么编译器可能会选择在栈上分配该对象。这是因为在栈上分配和释放内存的成本通常比在堆上更低。\n\n因此，即使使用 `new()` 分配内存，如果编译器通过逃逸分析确定该对象不会逃逸，它可能会在栈上分配该对象以提高性能。\n\n总结来说，`new()` 返回的对象不一定在堆上，具体取决于逃逸分析的结果。如果对象没有逃逸，编译器可能会选择在栈上分配它。\n","title":"GoLang 中 new() 与内存管理机制详解","abstract":"> 本文为与 GPT-4o 的对话记录，深入探讨 GoLang 中 new() 函数的使用以及相关的内存管理机制。\n在 Go 语言中，`new()` 函数用于分配内存并返回指向该内存的指针。`new()` 函数的行为是非常简单且安全的：它总是返回一个指向零值的指针。Go 语言的内存分配器会确保内存分配成功，因此在使用 `new()` 时，不会出现内存分配失败的情况。\n换句话说，`new()` 函数在 Go 中不会返回 `nil`，因为它总是能够成功分配内存并返回一个有效的指针。Go 语言的设计目标之一就是提供一个安全的内存管理机制，因此开发者不需要担心内存分配失败的问题。","length":29,"created_at":"2025-03-07T16:00:00.000Z","updated_at":"2025-03-07T16:00:00.000Z","tags":["GoLang","Memory Management"],"license":true}}}},"__N_SSG":true}