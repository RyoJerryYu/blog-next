{"pageProps":{"slug":"Linux 调度 —— 进程与线程","tags":[{"tag":"Linux","slug":"linux","path":"/tags/linux","postSlugs":[{"postType":"ideas","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postSlug":"Linux 信号处理 —— Signal","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postSlug":"Linux 内存 —— 内存分页、分段","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postSlug":"Linux 内存 —— 堆和栈","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postSlug":"Linux 内存 —— 虚拟内存","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postSlug":"Linux 调度 —— 进程与线程","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"schedule","slug":"schedule","path":"/tags/schedule","postSlugs":[{"postType":"ideas","postSlug":"Linux 调度 —— 进程与线程","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"BasicKnowledge","slug":"basicknowledge","path":"/tags/basicknowledge","postSlugs":[{"postType":"ideas","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postSlug":"Linux 信号处理 —— Signal","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postSlug":"Linux 内存 —— 内存分页、分段","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postSlug":"Linux 内存 —— 堆和栈","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postSlug":"Linux 内存 —— 虚拟内存","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postSlug":"Linux 调度 —— 进程与线程","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"#Linux #schedule #BasicKnowledge\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"进程\",\n      children: _jsx(_components.a, {\n        href: \"#进程\",\n        children: \"进程\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"进程\"\n      }), \"是计算机\", _jsx(_components.strong, {\n        children: \"资源分配\"\n      }), \"最小的单位，是CPU分配资源的基本单位，具有\", _jsx(_components.strong, {\n        children: \"独立的内存\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"切换需要切换上下文\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"需要切换内存映射表(MMU)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"进程栈大小随机，但比线程栈大\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"线程\",\n      children: _jsx(_components.a, {\n        href: \"#线程\",\n        children: \"线程\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"线程\"\n      }), \"是计算机\", _jsx(_components.strong, {\n        children: \"调度\"\n      }), \"最小的单位，也是程序执行的最小单位。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"线程的内存描述符直接指向父进程的描述符。线程间切换代价比较小，\", _jsx(_components.strong, {\n        children: \"不需要切换映射表\"\n      }), \"（MMU），\", _jsx(_components.strong, {\n        children: \"只是指令间的切换\"\n      }), \"即可，比较轻量级。线程的栈在主进程的堆中。\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"只需切换各种寄存器\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"线程共享地址空间\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"线程栈固定大小，默认 8M ，默认值由操作系统确定， \", _jsx(_components.code, {\n          children: \"ulimit -a\"\n        }), \" 查看， \", _jsx(_components.code, {\n          children: \"ulimit -s\"\n        }), \" 修改\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"同一进程内的线程间共享\",\n      children: _jsx(_components.a, {\n        href: \"#同一进程内的线程间共享\",\n        children: \"同一进程内的线程间共享：\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"细节\",\n      children: _jsx(_components.a, {\n        href: \"#细节\",\n        children: \"细节\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"关于 MMU ： [[Linux 内存 —— 内存分页、分段]]\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"内存管理是以进程为单元，线程的栈在主进程的堆中。[[Linux 内存 —— 堆和栈]]\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"上下文切换开销\",\n      children: _jsx(_components.a, {\n        href: \"#上下文切换开销\",\n        children: \"上下文切换开销\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"寄存器状态保存、恢复\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"缓存失效\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"陷入内核态开销\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"meta":{"content":"\n#Linux #schedule #BasicKnowledge \n\n## 进程\n\n**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n\n切换需要切换上下文\n\n- 需要切换内存映射表(MMU)\n- 进程栈大小随机，但比线程栈大\n\n\n\n\n## 线程\n\n**线程**是计算机**调度**最小的单位，也是程序执行的最小单位。\n\n线程的内存描述符直接指向父进程的描述符。线程间切换代价比较小，**不需要切换映射表**（MMU），**只是指令间的切换**即可，比较轻量级。线程的栈在主进程的堆中。\n\n- 只需切换各种寄存器\n- 线程共享地址空间\n- 线程栈固定大小，默认 8M ，默认值由操作系统确定， `ulimit -a` 查看， `ulimit -s` 修改\n\n同一进程内的线程间共享：\n- \n\n## 细节\n\n关于 MMU ： [[Linux 内存 —— 内存分页、分段]]\n\n\n内存管理是以进程为单元，线程的栈在主进程的堆中。[[Linux 内存 —— 堆和栈]]\n\n## 上下文切换开销\n\n- 寄存器状态保存、恢复\n- 缓存失效\n- 陷入内核态开销","title":"Linux 调度 —— 进程与线程","abstract":"**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n切换需要切换上下文\n- 需要切换内存映射表(MMU)","length":40,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","schedule","BasicKnowledge"],"license":false},"prevNextInfo":{"prevInfo":{"pathMapping":{"filePath":"public/content/ideas/Linux 文件描述符.md","pagePath":"/ideas/Linux 文件描述符","slug":"Linux 文件描述符"},"meta":{"content":"\n[理解文件描述符与文件句柄 | 黑白之院](https://ifaceless.github.io/2019/12/19/understand-file-descriptor-and-file-description/)","title":"Linux 文件描述符","abstract":"[理解文件描述符与文件句柄 | 黑白之院](https://ifaceless.github.io/2019/12/19/understand-file-descriptor-and-file-description/)","length":2,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":[],"license":false}},"nextInfo":{"pathMapping":{"filePath":"public/content/ideas/blog-syntax.md","pagePath":"/ideas/blog-syntax","slug":"blog-syntax"},"meta":{"content":"\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n\n**加粗**\n\n*斜体*\n\n***加粗斜体***\n\n~~删除线~~\n\n> 引用\n\n# 其他 MD 语法\n\n## 代码块\n\n`行内代码`\n\n代码块高亮：\n\n```python\n# 代码块\ndef func_echo(s: str):\n    print(s)\n\n\nclass HelloPrinter:\n    printer: Callable[[str]]\n\n    def __init__(self, printer: Callable[[str]]):\n        self.printer = printer\n    \n    def call(self, s: str):\n        self.printer(s)\n\n\np = HelloPrinter(func_echo)\np.call(\"hello world!\")\n```\n\n大围栏\n\n````markdown\n```\ndef func_echo(s: str):\n    print(s)\n```\n````\n\n行内反引号围栏： `` ` `` 或者 ``` `` ``` 的模式\n  \n```markdown\n`段落反引号内的行内反引号`\n```\n\n## 列表\n\n- 无序列表\n  - 无序列表\n    - 无序列表\n    - 无序列表\n\n1. 有序列表\n2. 有序列表\n3. 有序列表\n\n## 链接\n\n[链接](https://blog.ryo-okami.xyz)\n\n[站内链接](/ideas/using-chart-js)\n\n## 图片\n\n图片：\n\n![图片](https://blog.ryo-okami.xyz/content/articles/2022-07-31-why-homogeneous/OnOneLineWillStillOneLine_ManimCE_v0.16.0.post0.gif)\n\n站内图片：\n\n![站内图片](/content/articles/2022-07-31-why-homogeneous/OnOneLineWillStillOneLine_ManimCE_v0.16.0.post0.gif)\n\n## 表格\n\n| 表头 | 表头 | 表头 |\n| ---- | ---- | ---- |\n| 单元 | 单元 | 单元 |\n| 单元 | 单元 | 单元 |\n\n## 脚注\n\n下标[^1]\n\n[^1]: 注释\n\n# 插件\n\n## Katex\n\n行间公式\n\n$$\n\\begin{aligned}\n\\dot{x} & = \\sigma(y-x) \\\\\n\\dot{y} & = \\rho x - y - xz \\\\\n\\dot{z} & = -\\beta z + xy\n\\end{aligned}\n$$\n\n行内公式 $E=mc^2$\n\n## Mermaid\n\nmermaid 流程图\n\n```mermaid\ngraph LR\n  A[方形] --> B(圆角)\n  B --> C{条件}\n  C -->|a=1| D[结果1]\n  C -->|a=2| E[结果2]\n  C -->|a=3| F[结果3]\n```\n\n另一个 mermaid 流程图，同样类型不会冲突\n\n```mermaid\ngraph TD\n  A((圆)) --> B([圆边])\n  B --> C[(DB)]\n```\n\n\nmermaid 时序图\n\n```mermaid\nsequenceDiagram\n  participant Alice\n  participant Bob\n  Alice->>John: Hello John, how are you?\n  loop Healthcheck\n    John->>John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts <br/>prevail...\n  John-->>Alice: Great!\n  John->>Bob: How about you?\n  Bob-->>John: Jolly good!\n```\n\n## Heading 引用\n\n点击能够跳转：\n\n[文章内标题引用](#一级标题)\n\n[跨文章标题引用](/ideas/using-chart-js#react-chartjs-2)\n\n# Obsidian 短引用\n\n## 图片\n\n短引用图片，纯文件名\n\n![[test-img-show-image.png]]\n\n短引用图片，带注释\n\n![[test-img-show-image.png|这是一张图片]]\n\n短引用图片，带路径\n\n![[blog-syntax/test-img-show-image.png]]\n\n短引用图片，带路径和注释\n\n![[blog-syntax/test-img-show-image.png|这是一张图片]]\n\n短引用图片，全路径\n\n![[/content/ideas/blog-syntax/test-img-show-image.png]]\n\n## Excalidraw\n\n短引用 Excalidraw\n\n![[Drawing 2024-04-13 17.33.27.excalidraw]]\n\n\n","title":"博客语法渲染测试","abstract":"**加粗**\n*斜体*\n***加粗斜体***","length":200,"created_at":"2024-04-14T11:41:29.000Z","updated_at":"2024-04-28T16:56:23.000Z","tags":["Blog","Nextjs"],"license":false}}}},"__N_SSG":true}