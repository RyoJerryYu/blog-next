{"pageProps":{"slug":"Linux 信号处理 —— Signal","tags":[{"tag":"Linux","slug":"linux","path":"/tags/linux","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"Signal","slug":"signal","path":"/tags/signal","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"}]},{"tag":"BasicKnowledge","slug":"basicknowledge","path":"/tags/basicknowledge","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"Operation","slug":"operation","path":"/tags/operation","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"}]}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    figure: \"figure\",\n    h1: \"h1\",\n    h3: \"h3\",\n    img: \"img\",\n    input: \"input\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ObsidianTag} = _components;\n  if (!ObsidianTag) _missingMdxReference(\"ObsidianTag\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(ObsidianTag, {\n        tag: \"Linux\",\n        slug: \"linux\",\n        path: \"/tags/linux\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"Signal\",\n        slug: \"signal\",\n        path: \"/tags/signal\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"BasicKnowledge\",\n        slug: \"basicknowledge\",\n        path: \"/tags/basicknowledge\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"Operation\",\n        slug: \"operation\",\n        path: \"/tags/operation\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"信号是一种中断，为 Linux 提供一种处理异步事件的方法。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.jianshu.com/p/f445bfeea40a\",\n        children: \"Linux 信号（signal） - 简书\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"信号的定义\",\n      children: _jsx(_components.a, {\n        href: \"#信号的定义\",\n        children: \"信号的定义\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"9: \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"SIGKILL\"\n              })\n            })\n          })\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"2: \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"SIGINT\"\n              })\n            })\n          })\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"15: \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"SIGTERM\"\n              })\n            })\n          })\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"信号的使用\",\n      children: _jsx(_components.a, {\n        href: \"#信号的使用\",\n        children: \"信号的使用\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"signal.h\"\n              })\n            })\n          })\n        }), \" 中，调用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"signal\"\n              })\n            })\n          })\n        }), \" 函数传入一个 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"sighandler_t\"\n              })\n            })\n          })\n        }), \" 类型的 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"handler\"\n              })\n            })\n          })\n        }), \" ，注册信号处理函数\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"kill\"\n              })\n            })\n          })\n        }), \" 函数对一个 pid 发送一个信号。已注册信号， \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"kill\"\n              })\n            })\n          })\n        }), \" 发送的信号都能收到\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"exec\"\n              })\n            })\n          })\n        }), \" 函数会将原先要捕捉的信号设置为默认动作\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"fork\"\n              })\n            })\n          })\n        }), \" 函数的子进程会继承父进程的信号处理方式 \", _jsx(_components.a, {\n          href: \"/ideas/Linux%20Clone%20VS%20Fork\",\n          children: \"Linux Clone VS Fork\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"原型：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"cpp\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"cpp\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"#\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"include\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" <\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"signal.h\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \">\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"typedef\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \" void\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" (*\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"sighandler_t\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"int\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \");\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"sighandler_t\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" signal\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"int\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \" signum\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"sighandler_t\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \" handler\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \");\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"cpp\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"cpp\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"#\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"include\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" <\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"sys/types.h\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \">\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"#\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"include\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" <\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"signal.h\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \">\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"int\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" kill\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"pid_t\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \" pid\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"int\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \" sig\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \");\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"未了解\",\n      children: _jsx(_components.a, {\n        href: \"#未了解\",\n        children: \"未了解\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"高级信号发送接收： sigaction , sigqueue\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"一文看懂-linux-信号处理原理与实现\",\n      children: _jsx(_components.a, {\n        href: \"#一文看懂-linux-信号处理原理与实现\",\n        children: \"一文看懂 Linux 信号处理原理与实现\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.51cto.com/article/675743.html\",\n        children: \"一文看懂 Linux 信号处理原理与实现-linux 信号处理流程\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"信号处理时内核态\",\n      children: _jsx(_components.a, {\n        href: \"#信号处理时内核态\",\n        children: \"信号处理时内核态\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"信号处理程序代码运行在用户态\\nA 进程向 B 进程发送信号，发起系统调用陷入内核态，内核触发信号处理函数，返回用户态执行信号处理程序，信号处理程序执行完毕后返回到内核态执行收尾工作，再返回用户态继续执行程序\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/blog-next/content/ideas/Linux%20%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%20%E2%80%94%E2%80%94%20Signal/Pasted%20image%2020240819014740.png\",\n      alt: \"Pasted image 20240819014740.png\",\n      title: \"Pasted image 20240819014740.png\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"未了解-1\",\n      children: _jsx(_components.a, {\n        href: \"#未了解-1\",\n        children: \"未了解\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"sigaction 详细解释\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"signal 在内核态的处理过程\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"[ ]\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"meta":{"content":"\n#Linux #Signal #BasicKnowledge #Operation \n\n信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n\n\n### 信号的定义\n- 9: `SIGKILL`\n- 2: `SIGINT`\n- 15: `SIGTERM`\n\n### 信号的使用\n- `signal.h` 中，调用 `signal` 函数传入一个 `sighandler_t` 类型的 `handler` ，注册信号处理函数 \n- 用 `kill` 函数对一个 pid 发送一个信号。已注册信号， `kill` 发送的信号都能收到\n- `exec` 函数会将原先要捕捉的信号设置为默认动作\n- `fork` 函数的子进程会继承父进程的信号处理方式 [[Linux Clone VS Fork]]\n\n原型：\n```cpp\n#include <signal.h>\ntypedef void (*sighandler_t)(int);\nsighandler_t signal(int signum, sighandler_t handler);\n```\n\n```cpp\n#include <sys/types.h>\n#include <signal.h>\nint kill(pid_t pid, int sig);\n```\n\n### 未了解\n- [ ] 高级信号发送接收： sigaction , sigqueue\n\n\n# 一文看懂 Linux 信号处理原理与实现\n\n [一文看懂 Linux 信号处理原理与实现-linux 信号处理流程](https://www.51cto.com/article/675743.html) \n\n### 信号处理时内核态\n\n信号处理程序代码运行在用户态\nA 进程向 B 进程发送信号，发起系统调用陷入内核态，内核触发信号处理函数，返回用户态执行信号处理程序，信号处理程序执行完毕后返回到内核态执行收尾工作，再返回用户态继续执行程序\n\n![[Pasted image 20240819014740.png]]\n### 未了解\n- [ ] sigaction 详细解释\n- [ ] signal 在内核态的处理过程\n- [ ]","title":"Linux 信号处理 —— Signal","abstract":"信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n- 9: `SIGKILL`","length":50,"created_at":"2024-11-16T07:32:08.000Z","updated_at":"2025-03-09T17:10:04.000Z","tags":["Linux","Signal","BasicKnowledge","Operation"],"license":false,"headingTrees":[{"key":"信号的定义","href":"#信号的定义","heading":3,"title":"信号的定义","children":[],"id":"信号的定义"},{"key":"信号的使用","href":"#信号的使用","heading":3,"title":"信号的使用","children":[],"id":"信号的使用"},{"key":"未了解","href":"#未了解","heading":3,"title":"未了解","children":[],"id":"未了解"},{"key":"一文看懂-linux-信号处理原理与实现","href":"#一文看懂-linux-信号处理原理与实现","heading":1,"title":"一文看懂 Linux 信号处理原理与实现","children":[{"key":"信号处理时内核态","href":"#信号处理时内核态","heading":3,"title":"信号处理时内核态","children":[],"id":"信号处理时内核态"},{"key":"未了解-1","href":"#未了解-1","heading":3,"title":"未了解","children":[],"id":"未了解-1"}],"id":"一文看懂-linux-信号处理原理与实现"}],"wikiRefAliases":["Linux Clone VS Fork"],"richRefAliases":["Pasted image 20240819014740.png"]},"prevNextInfo":{"prevInfo":{"pathMapping":{"pagePath":"/ideas/Linux Systemd","filePath":"public/content/ideas/Linux Systemd.md"},"meta":{"title":"Linux Systemd","created_at":"2024-11-16T07:32:08.000Z","updated_at":null}},"nextInfo":{"pathMapping":{"pagePath":"/ideas/Linux 内存 —— 内存分页、分段","filePath":"public/content/ideas/Linux 内存 —— 内存分页、分段.md"},"meta":{"title":"Linux 内存 —— 内存分页、分段","created_at":"2024-11-16T07:32:08.000Z","updated_at":null}}},"backRefResources":[]},"__N_SSG":true}