{"pageProps":{"slug":"Linux 调度 —— 进程与线程","tags":[{"tag":"Linux","slug":"linux","path":"/tags/linux","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog-syntax"},{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"schedule","slug":"schedule","path":"/tags/schedule","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"BasicKnowledge","slug":"basicknowledge","path":"/tags/basicknowledge","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    span: \"span\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"进程\",\n      children: _jsx(_components.a, {\n        href: \"#进程\",\n        children: \"进程\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"进程\"\n      }), \"是计算机\", _jsx(_components.strong, {\n        children: \"资源分配\"\n      }), \"最小的单位，是CPU分配资源的基本单位，具有\", _jsx(_components.strong, {\n        children: \"独立的内存\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"切换需要切换上下文\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"需要切换内存映射表(MMU)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"进程栈大小随机，但比线程栈大\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"线程\",\n      children: _jsx(_components.a, {\n        href: \"#线程\",\n        children: \"线程\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"线程\"\n      }), \"是计算机\", _jsx(_components.strong, {\n        children: \"调度\"\n      }), \"最小的单位，也是程序执行的最小单位。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"线程的内存描述符直接指向父进程的描述符。线程间切换代价比较小，\", _jsx(_components.strong, {\n        children: \"不需要切换映射表\"\n      }), \"（MMU），\", _jsx(_components.strong, {\n        children: \"只是指令间的切换\"\n      }), \"即可，比较轻量级。线程的栈在主进程的堆中。\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"只需切换各种寄存器\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"线程共享地址空间\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"线程栈固定大小，默认 8M ，默认值由操作系统确定， \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ulimit -a\"\n              })\n            })\n          })\n        }), \" 查看， \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"ulimit -s\"\n              })\n            })\n          })\n        }), \" 修改\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"同一进程内的线程间共享\",\n      children: _jsx(_components.a, {\n        href: \"#同一进程内的线程间共享\",\n        children: \"同一进程内的线程间共享：\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"细节\",\n      children: _jsx(_components.a, {\n        href: \"#细节\",\n        children: \"细节\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"关于 MMU ： \", _jsx(_components.a, {\n        href: \"/ideas/Linux%20%E5%86%85%E5%AD%98%20%E2%80%94%E2%80%94%20%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E3%80%81%E5%88%86%E6%AE%B5\",\n        children: \"Linux 内存 —— 内存分页、分段\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"内存管理是以进程为单元，线程的栈在主进程的堆中。\", _jsx(_components.a, {\n        href: \"/ideas/Linux%20%E5%86%85%E5%AD%98%20%E2%80%94%E2%80%94%20%E5%A0%86%E5%92%8C%E6%A0%88\",\n        children: \"Linux 内存 —— 堆和栈\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"上下文切换开销\",\n      children: _jsx(_components.a, {\n        href: \"#上下文切换开销\",\n        children: \"上下文切换开销\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"寄存器状态保存、恢复\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"缓存失效\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"陷入内核态开销\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"meta":{"content":"\n#Linux #schedule #BasicKnowledge \n\n## 进程\n\n**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n\n切换需要切换上下文\n\n- 需要切换内存映射表(MMU)\n- 进程栈大小随机，但比线程栈大\n\n\n\n\n## 线程\n\n**线程**是计算机**调度**最小的单位，也是程序执行的最小单位。\n\n线程的内存描述符直接指向父进程的描述符。线程间切换代价比较小，**不需要切换映射表**（MMU），**只是指令间的切换**即可，比较轻量级。线程的栈在主进程的堆中。\n\n- 只需切换各种寄存器\n- 线程共享地址空间\n- 线程栈固定大小，默认 8M ，默认值由操作系统确定， `ulimit -a` 查看， `ulimit -s` 修改\n\n同一进程内的线程间共享：\n- \n\n## 细节\n\n关于 MMU ： [[Linux 内存 —— 内存分页、分段]]\n\n\n内存管理是以进程为单元，线程的栈在主进程的堆中。[[Linux 内存 —— 堆和栈]]\n\n## 上下文切换开销\n\n- 寄存器状态保存、恢复\n- 缓存失效\n- 陷入内核态开销","title":"Linux 调度 —— 进程与线程","abstract":"**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n切换需要切换上下文\n- 需要切换内存映射表(MMU)","length":40,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","schedule","BasicKnowledge"],"license":false,"headingTrees":[{"key":"进程","href":"#进程","heading":2,"title":"进程","children":[],"id":"进程"},{"key":"线程","href":"#线程","heading":2,"title":"线程","children":[],"id":"线程"},{"key":"同一进程内的线程间共享","href":"#同一进程内的线程间共享","heading":2,"title":"同一进程内的线程间共享：","children":[],"id":"同一进程内的线程间共享"},{"key":"细节","href":"#细节","heading":2,"title":"细节","children":[],"id":"细节"},{"key":"上下文切换开销","href":"#上下文切换开销","heading":2,"title":"上下文切换开销","children":[],"id":"上下文切换开销"}],"wikiRefAliases":["Linux 内存 —— 内存分页、分段","Linux 内存 —— 堆和栈"],"richRefAliases":[]},"prevNextInfo":{"prevInfo":{"pathMapping":{"pagePath":"/ideas/Linux 文件描述符","filePath":"public/content/ideas/Linux 文件描述符.md"},"meta":{"title":"Linux 文件描述符","created_at":"2024-11-16T07:32:08.000Z","updated_at":null}},"nextInfo":{"pathMapping":{"pagePath":"/ideas/blog-syntax","filePath":"public/content/ideas/blog-syntax.md"},"meta":{"title":"博客语法渲染测试","created_at":"2024-04-14T11:41:29.000Z","updated_at":"2025-04-30T03:48:16.000Z"}}},"backRefResources":[],"hyperProps":{"withSEO":false,"withComments":false}},"__N_SSG":true}