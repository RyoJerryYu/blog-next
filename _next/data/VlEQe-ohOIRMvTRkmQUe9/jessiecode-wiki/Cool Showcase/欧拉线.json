{"pageProps":{"slugs":["Cool Showcase","欧拉线"],"wikiTree":{"trees":[{"title":"Examples","slugs":["Examples"],"pagePath":"/jessiecode-wiki/Examples","children":[{"title":"三角形外心","slugs":["Examples","三角形外心"],"pagePath":"/jessiecode-wiki/Examples/三角形外心","children":[]},{"title":"三角形内心","slugs":["Examples","三角形内心"],"pagePath":"/jessiecode-wiki/Examples/三角形内心","children":[]},{"title":"三角形重心","slugs":["Examples","三角形重心"],"pagePath":"/jessiecode-wiki/Examples/三角形重心","children":[]},{"title":"三角形垂心","slugs":["Examples","三角形垂心"],"pagePath":"/jessiecode-wiki/Examples/三角形垂心","children":[]},{"title":"二次函数与切线","slugs":["Examples","二次函数与切线"],"pagePath":"/jessiecode-wiki/Examples/二次函数与切线","children":[]},{"title":"二次函数与积分","slugs":["Examples","二次函数与积分"],"pagePath":"/jessiecode-wiki/Examples/二次函数与积分","children":[]},{"title":"完全四边形","slugs":["Examples","完全四边形"],"pagePath":"/jessiecode-wiki/Examples/完全四边形","children":[]},{"title":"二元函数三维图像","slugs":["Examples","二元函数三维图像"],"pagePath":"/jessiecode-wiki/Examples/二元函数三维图像","children":[]}],"isVirtual":true},{"title":"Cool Showcase","slugs":["Cool Showcase"],"pagePath":"/jessiecode-wiki/Cool Showcase","children":[{"title":"立方体投影","slugs":["Cool Showcase","立方体投影"],"pagePath":"/jessiecode-wiki/Cool Showcase/立方体投影","children":[]},{"title":"割圆八线","slugs":["Cool Showcase","割圆八线"],"pagePath":"/jessiecode-wiki/Cool Showcase/割圆八线","children":[]},{"title":"三角形角平分线与对边的中垂线交点位于外接圆上","slugs":["Cool Showcase","三角形角平分线与对边的中垂线交点位于外接圆上"],"pagePath":"/jessiecode-wiki/Cool Showcase/三角形角平分线与对边的中垂线交点位于外接圆上","children":[]},{"title":"欧拉线","slugs":["Cool Showcase","欧拉线"],"pagePath":"/jessiecode-wiki/Cool Showcase/欧拉线","children":[]},{"title":"二元函数切平面","slugs":["Cool Showcase","二元函数切平面"],"pagePath":"/jessiecode-wiki/Cool Showcase/二元函数切平面","children":[]},{"title":"微分中 dy 与 delta y 的区别","slugs":["Cool Showcase","微分中 dy 与 delta y 的区别"],"pagePath":"/jessiecode-wiki/Cool Showcase/微分中 dy 与 delta y 的区别","children":[]}],"isVirtual":true}]},"meta":{"content":"\n- 绿色虚线：中垂线\n- 蓝色虚线：中线\n- 红色虚线：高\n\n三种线分别交于外心、重心、垂心。外心、重心、垂心必定在同一直线上。\n\n```jessiecode\n---\ngrid: false\naxis: false\nwidth: 700\nheight: 700\n---\n// Triangle ABC\ntStyle = <<fillColor: 'yellow', fillOpacity: 0.2>>;\nA = point(-6, -5) tStyle;\nB = point(7, -4) tStyle;\nC = point(1, 6) tStyle;\ntri = polygon(A,B,C) tStyle;\n\nmStyle = <<opacity: 0.2>>;\nmAB = midpoint(A,B) mStyle;\nmBC = midpoint(B,C) mStyle;\nmCA = midpoint(C,A) mStyle;\n\n// circumcenter\ncStyle = <<\ndash: 2,\ncolor: 'green',\nstrokeWidth: 1,\nradius: 0.5\n>>;\npAB = perpendicular(tri.borders[0], mAB) cStyle;\npBC = perpendicular(tri.borders[1], mBC) cStyle;\npCA = perpendicular(tri.borders[2], mCA) cStyle;\n\nangle(pAB, tri.borders[0], -1,-1)cStyle;\nangle(pBC, tri.borders[1], -1,-1)cStyle;\nangle(pCA, tri.borders[2], -1,-1)cStyle;\n\ncircP = intersection(pAB,pBC) cStyle;\n\n// centroid\ngStyle = <<\ndash:2,\ncolor: 'blue',\nstrokeWidth: 1\n>>;\nmA = segment(A, mBC) gStyle;\nmB = segment(B, mCA) gStyle;\nmC = segment(C, mAB) gStyle;\n\ngravP = intersection(mA,mB) gStyle;\n\n// orthocenter\noStyle = <<\ndash:  2,\ncolor: 'red',\nstrokeWidth: 1,\nradius: 0.5\n>>;\nhA = perpendicularsegment(tri.borders[1], A) oStyle;\nhB = perpendicularsegment(tri.borders[2], B) oStyle;\nhC = perpendicularsegment(tri.borders[0], C) oStyle;\n\nangle(A, hA.point, B) oStyle;\nangle(B, hB.point, C) oStyle;\nangle(C, hC.point, A) oStyle;\n\northP = intersection(hA,hB) oStyle;\n\n// euler line\neline = line(circP, gravP) <<color: 'fuchsia'>>;\n```\n\n","title":"欧拉线","abstract":"- 绿色虚线：中垂线\n- 蓝色虚线：中线\n- 红色虚线：高","length":77,"created_at":"2025-10-12T16:35:31.000Z","updated_at":"2025-10-13T18:41:26.000Z","tags":[],"license":false,"headingTrees":[],"wikiRefAliases":[],"richRefAliases":[]},"tags":[],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {CodeBlockJessieCode} = _components;\n  if (!CodeBlockJessieCode) _missingMdxReference(\"CodeBlockJessieCode\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"绿色虚线：中垂线\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"蓝色虚线：中线\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"红色虚线：高\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"三种线分别交于外心、重心、垂心。外心、重心、垂心必定在同一直线上。\"\n    }), \"\\n\", _jsx(CodeBlockJessieCode, {\n      lang: \"jessiecode\",\n      value: \"---\\ngrid: false\\naxis: false\\nwidth: 700\\nheight: 700\\n---\\n// Triangle ABC\\ntStyle = <<fillColor: 'yellow', fillOpacity: 0.2>>;\\nA = point(-6, -5) tStyle;\\nB = point(7, -4) tStyle;\\nC = point(1, 6) tStyle;\\ntri = polygon(A,B,C) tStyle;\\n\\nmStyle = <<opacity: 0.2>>;\\nmAB = midpoint(A,B) mStyle;\\nmBC = midpoint(B,C) mStyle;\\nmCA = midpoint(C,A) mStyle;\\n\\n// circumcenter\\ncStyle = <<\\ndash: 2,\\ncolor: 'green',\\nstrokeWidth: 1,\\nradius: 0.5\\n>>;\\npAB = perpendicular(tri.borders[0], mAB) cStyle;\\npBC = perpendicular(tri.borders[1], mBC) cStyle;\\npCA = perpendicular(tri.borders[2], mCA) cStyle;\\n\\nangle(pAB, tri.borders[0], -1,-1)cStyle;\\nangle(pBC, tri.borders[1], -1,-1)cStyle;\\nangle(pCA, tri.borders[2], -1,-1)cStyle;\\n\\ncircP = intersection(pAB,pBC) cStyle;\\n\\n// centroid\\ngStyle = <<\\ndash:2,\\ncolor: 'blue',\\nstrokeWidth: 1\\n>>;\\nmA = segment(A, mBC) gStyle;\\nmB = segment(B, mCA) gStyle;\\nmC = segment(C, mAB) gStyle;\\n\\ngravP = intersection(mA,mB) gStyle;\\n\\n// orthocenter\\noStyle = <<\\ndash:  2,\\ncolor: 'red',\\nstrokeWidth: 1,\\nradius: 0.5\\n>>;\\nhA = perpendicularsegment(tri.borders[1], A) oStyle;\\nhB = perpendicularsegment(tri.borders[2], B) oStyle;\\nhC = perpendicularsegment(tri.borders[0], C) oStyle;\\n\\nangle(A, hA.point, B) oStyle;\\nangle(B, hB.point, C) oStyle;\\nangle(C, hC.point, A) oStyle;\\n\\northP = intersection(hA,hB) oStyle;\\n\\n// euler line\\neline = line(circP, gravP) <<color: 'fuchsia'>>;\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"backRefResources":[]},"__N_SSG":true}