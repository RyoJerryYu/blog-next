{"pageProps":{"slug":"Linux 信号处理 —— Signal","tags":[{"tag":"Linux","slug":"linux","path":"/tags/linux","postSlugs":[{"postType":"ideas","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postSlug":"Linux 信号处理 —— Signal","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postSlug":"Linux 内存 —— 内存分页、分段","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postSlug":"Linux 内存 —— 堆和栈","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postSlug":"Linux 内存 —— 虚拟内存","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postSlug":"Linux 调度 —— 进程与线程","postPagePath":"/ideas/Linux 调度 —— 进程与线程"},{"postType":"learn_from_ai","postSlug":"executable-file-formats","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"Signal","slug":"signal","path":"/tags/signal","postSlugs":[{"postType":"ideas","postSlug":"Linux 信号处理 —— Signal","postPagePath":"/ideas/Linux 信号处理 —— Signal"}]},{"tag":"BasicKnowledge","slug":"basicknowledge","path":"/tags/basicknowledge","postSlugs":[{"postType":"ideas","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postSlug":"Linux 信号处理 —— Signal","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postSlug":"Linux 内存 —— 内存分页、分段","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postSlug":"Linux 内存 —— 堆和栈","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postSlug":"Linux 内存 —— 虚拟内存","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postSlug":"Linux 调度 —— 进程与线程","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"Operation","slug":"operation","path":"/tags/operation","postSlugs":[{"postType":"ideas","postSlug":"Linux Systemd","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postSlug":"Linux 信号处理 —— Signal","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postSlug":"Linux 内存 —— 内存分页、分段","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postSlug":"Linux 内存 —— 虚拟内存","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"}]}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    figure: \"figure\",\n    h1: \"h1\",\n    h3: \"h3\",\n    img: \"img\",\n    input: \"input\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {ObsidianTag} = _components;\n  if (!ObsidianTag) _missingMdxReference(\"ObsidianTag\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(ObsidianTag, {\n        tag: \"Linux\",\n        slug: \"linux\",\n        path: \"/tags/linux\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"Signal\",\n        slug: \"signal\",\n        path: \"/tags/signal\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"BasicKnowledge\",\n        slug: \"basicknowledge\",\n        path: \"/tags/basicknowledge\"\n      }), \" \", _jsx(ObsidianTag, {\n        tag: \"Operation\",\n        slug: \"operation\",\n        path: \"/tags/operation\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"信号是一种中断，为 Linux 提供一种处理异步事件的方法。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.jianshu.com/p/f445bfeea40a\",\n        children: \"Linux 信号（signal） - 简书\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"信号的定义\",\n      children: _jsx(_components.a, {\n        href: \"#信号的定义\",\n        children: \"信号的定义\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"9: \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"SIGKILL\"\n              })\n            })\n          })\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"2: \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"SIGINT\"\n              })\n            })\n          })\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"15: \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"SIGTERM\"\n              })\n            })\n          })\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"信号的使用\",\n      children: _jsx(_components.a, {\n        href: \"#信号的使用\",\n        children: \"信号的使用\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"signal.h\"\n              })\n            })\n          })\n        }), \" 中，调用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"signal\"\n              })\n            })\n          })\n        }), \" 函数传入一个 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"sighandler_t\"\n              })\n            })\n          })\n        }), \" 类型的 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"handler\"\n              })\n            })\n          })\n        }), \" ，注册信号处理函数\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"用 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"kill\"\n              })\n            })\n          })\n        }), \" 函数对一个 pid 发送一个信号。已注册信号， \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"kill\"\n              })\n            })\n          })\n        }), \" 发送的信号都能收到\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"exec\"\n              })\n            })\n          })\n        }), \" 函数会将原先要捕捉的信号设置为默认动作\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"fork\"\n              })\n            })\n          })\n        }), \" 函数的子进程会继承父进程的信号处理方式 \", _jsx(_components.a, {\n          href: \"/ideas/Linux%20Clone%20VS%20Fork\",\n          children: \"Linux Clone VS Fork\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"原型：\"\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"cpp\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"cpp\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"#\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"include\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" <\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"signal.h\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \">\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"typedef\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \" void\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" (*\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \"sighandler_t\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \")(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"int\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \");\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"sighandler_t\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" signal\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"int\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \" signum\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E5C07B\"\n              },\n              children: \"sighandler_t\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \" handler\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \");\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.figure, {\n      \"data-rehype-pretty-code-figure\": \"\",\n      children: _jsx(_components.pre, {\n        tabIndex: \"0\",\n        \"data-language\": \"cpp\",\n        \"data-theme\": \"plastic\",\n        children: _jsxs(_components.code, {\n          \"data-language\": \"cpp\",\n          \"data-theme\": \"plastic\",\n          style: {\n            display: \"grid\"\n          },\n          children: [_jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"#\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"include\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" <\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"sys/types.h\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \">\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"#\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#E06C75\"\n              },\n              children: \"include\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \" <\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#98C379\"\n              },\n              children: \"signal.h\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \">\"\n            })]\n          }), \"\\n\", _jsxs(_components.span, {\n            \"data-line\": \"\",\n            children: [_jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"int\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#B57EDC\"\n              },\n              children: \" kill\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \"(\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"pid_t\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \" pid\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \", \"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#61AFEF\"\n              },\n              children: \"int\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#C6CCD7\"\n              },\n              children: \" sig\"\n            }), _jsx(_components.span, {\n              style: {\n                color: \"#A9B2C3\"\n              },\n              children: \");\"\n            })]\n          })]\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"未了解\",\n      children: _jsx(_components.a, {\n        href: \"#未了解\",\n        children: \"未了解\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"高级信号发送接收： sigaction , sigqueue\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h1, {\n      id: \"一文看懂-linux-信号处理原理与实现\",\n      children: _jsx(_components.a, {\n        href: \"#一文看懂-linux-信号处理原理与实现\",\n        children: \"一文看懂 Linux 信号处理原理与实现\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.51cto.com/article/675743.html\",\n        children: \"一文看懂 Linux 信号处理原理与实现-linux 信号处理流程\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"信号处理时内核态\",\n      children: _jsx(_components.a, {\n        href: \"#信号处理时内核态\",\n        children: \"信号处理时内核态\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"信号处理程序代码运行在用户态\\nA 进程向 B 进程发送信号，发起系统调用陷入内核态，内核触发信号处理函数，返回用户态执行信号处理程序，信号处理程序执行完毕后返回到内核态执行收尾工作，再返回用户态继续执行程序\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/blog-next/content/ideas/Linux%20%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%86%20%E2%80%94%E2%80%94%20Signal/Pasted%20image%2020240819014740.png\",\n      alt: \"Pasted image 20240819014740.png\",\n      title: \"Pasted image 20240819014740.png\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"未了解-1\",\n      children: _jsx(_components.a, {\n        href: \"#未了解-1\",\n        children: \"未了解\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"sigaction 详细解释\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"signal 在内核态的处理过程\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"[ ]\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"meta":{"content":"\n#Linux #Signal #BasicKnowledge #Operation \n\n信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n\n\n### 信号的定义\n- 9: `SIGKILL`\n- 2: `SIGINT`\n- 15: `SIGTERM`\n\n### 信号的使用\n- `signal.h` 中，调用 `signal` 函数传入一个 `sighandler_t` 类型的 `handler` ，注册信号处理函数 \n- 用 `kill` 函数对一个 pid 发送一个信号。已注册信号， `kill` 发送的信号都能收到\n- `exec` 函数会将原先要捕捉的信号设置为默认动作\n- `fork` 函数的子进程会继承父进程的信号处理方式 [[Linux Clone VS Fork]]\n\n原型：\n```cpp\n#include <signal.h>\ntypedef void (*sighandler_t)(int);\nsighandler_t signal(int signum, sighandler_t handler);\n```\n\n```cpp\n#include <sys/types.h>\n#include <signal.h>\nint kill(pid_t pid, int sig);\n```\n\n### 未了解\n- [ ] 高级信号发送接收： sigaction , sigqueue\n\n\n# 一文看懂 Linux 信号处理原理与实现\n\n [一文看懂 Linux 信号处理原理与实现-linux 信号处理流程](https://www.51cto.com/article/675743.html) \n\n### 信号处理时内核态\n\n信号处理程序代码运行在用户态\nA 进程向 B 进程发送信号，发起系统调用陷入内核态，内核触发信号处理函数，返回用户态执行信号处理程序，信号处理程序执行完毕后返回到内核态执行收尾工作，再返回用户态继续执行程序\n\n![[Pasted image 20240819014740.png]]\n### 未了解\n- [ ] sigaction 详细解释\n- [ ] signal 在内核态的处理过程\n- [ ]","title":"Linux 信号处理 —— Signal","abstract":"信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n- 9: `SIGKILL`","length":50,"created_at":"2024-11-16T07:32:08.000Z","updated_at":"2025-03-09T17:10:04.000Z","tags":["Linux","Signal","BasicKnowledge","Operation"],"license":false},"prevNextInfo":{"prevInfo":{"pathMapping":{"filePath":"public/content/ideas/Linux Systemd.md","pagePath":"/ideas/Linux Systemd","slug":"Linux Systemd"},"meta":{"content":"\n#Linux #systemctl #journalctl #timedatectl #BasicKnowledge #Operation \n\n每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\n\nSystemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\n\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。\n\n```\n$ sudo systemctl enable clamd@scan.service\n# 等同于\n$ sudo ln -s '/usr/lib/systemd/system/clamd@scan.service' '/etc/systemd/system/multi-user.target.wants/clamd@scan.service'\n```\n如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。\n\n与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。\n\n```\n$ sudo systemctl disable clamd@scan.service\n```\n配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。\n\n\n### 简单例子\n\n```\n[Unit]\nDescription=Ethereum go client\nAfter=syslog.target network.target\n\n[Service]\nType=simple\nWorkingDirectory=/home/ec2-user\nExecStart=/home/ec2-user/bin/geth --http --http.addr 0.0.0.0 --http.vhosts '*' --ws --ws.addr 0.0.0.0 --ws.origins '*' --rinkeby\nUser=ec2-user\nGroup=ec2-user\nKillMode=process\nKillSignal=SIGTERM\nRestart=on-failure\n\n[Install]\nWantedBy=default.target\n```\n\n# timedatectl \n\n时间管理\n\n设置时区\n```shell\nsudo timedatectl set-timezone zone\n```\n\n查看\n```shell\ntimedatectl status\n```\n\n# 日志\n\njournalctl\n\n查看所有日志: 不加任何参数\n```\njournalctl\n```\n\n按单位\n```\njournalctl -u geth\n```\n\n\n参考：\n- https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html","title":"Linux Systemd","abstract":"每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\nSystemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。","length":76,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","systemctl","journalctl","timedatectl","BasicKnowledge","Operation"],"license":false}},"nextInfo":{"pathMapping":{"filePath":"public/content/ideas/Linux 内存 —— 内存分页、分段.md","pagePath":"/ideas/Linux 内存 —— 内存分页、分段","slug":"Linux 内存 —— 内存分页、分段"},"meta":{"content":"\n#Linux #memory #Operation #BasicKnowledge \n\n> 内存**分页**与内存**分段**是**操作系统**管理**虚拟内存**的方式。\n> \n> 分段：将进程内存分为**代码分段**、**数据分段**、**栈段**、**堆段**等逻辑分明的段。能产生连续的物理空间。容易造成内存碎片，内存交换率低。\n> 分页：将物理内存与虚拟内存都分为一个个**固定大小**的页，内存以页为单位分配、回收、释放。适配局部性原理，碎片利用率高，可以不加载整个内存。\n\n [kernel_memory_management/✍ 文章/一文带你了解，虚拟内存、内存分页、分段、段页式内存管理.md at main · 0voice/kernel_memory_management](https://github.com/0voice/kernel_memory_management/blob/main/%E2%9C%8D%20%E6%96%87%E7%AB%A0/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%EF%BC%8C%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E3%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E3%80%81%E5%88%86%E6%AE%B5%E3%80%81%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.md) \n\n\n前置知识：[[Linux 内存 —— 虚拟内存]]\n\n## 内存分段\n\n内存分段是操作管理虚拟地址与物理地址之间关系的方式之一。\n\n> [!important]\n程序是由若干个逻辑分段组成的，可由**代码分段**、**数据分段**、**栈段**、**堆段**组成。不同的段是有不同的属性的，所以就用分段（_Segmentation_）的形式把这些段分离出来。\n\n### 如何映射\n\n分段机制下的虚拟地址由两部分组成，**段内选择子**和**段内偏移量**。\n\n- 段选择子里面最重要的是**段号**，用作段表的索引。**段表**里面保存的是这个**段的基地址、段的界限和特权等级**等。\n- **段内偏移量**应该位于 0 和段界限之间，如果段内偏移量是合法的，就将段基地址加上段内偏移量得到物理内存地址。\n\n![[Pasted image 20231110131944.png]]\n\n有一些不足之处：\n\n- 第一个就是**内存碎片**的问题。\n- 第二个就是**内存交换的效率低**的问题。\n\n### 内存碎片\n\n内存碎片的问题共有两处地方：\n\n- 外部内存碎片，也就是产生了多个不连续的小物理内存，导致新的程序无法被装载；\n- 内部内存碎片，程序所有的内存都被装载到了物理内存，但是这个程序有部分的内存可能并不是很常使用，这也会导致内存的浪费；\n\n解决外部内存碎片的问题就是**内存交换**。\n\n![[Pasted image 20231110132032.png]]\n\n步骤：\n\n- 将程序内存写到磁盘上\n- 从磁盘上读回内存，并整合内存碎片\n\n> [!info]\n> 可以把音乐程序占用的那 256MB 内存写到硬盘上，然后再从硬盘上读回来到内存里。不过再读回的时候，我们不能装载回原来的位置，而是紧紧跟着那已经被占用了的 512MB 内存后面。这样就能空缺出连续的时间 256MB 空间，于是新的 200MB 程序就可以装载进来。\n\n这个内存交换空间，在 Linux 系统里，也就是我们经常看到的 **Swap 空间**，这块空间是从硬盘划分出来的，用于内存与硬盘的空间交换\n\n## 内存分页\n\n分段的好处就是能产生连续的内存空间，但是会出现内存碎片和内存交换的空间太大的问题。\n\n要解决这些问题，那么就要想出能少出现一些内存碎片的办法。另外，当需要进行内存交换的时候，让需要交换的**写入或者从磁盘装载的数据更少**一点，这样就可以解决问题了。这个办法，也就是**内存分页**（_Paging_）。\n\n页表实际上存储在 CPU 的**内存管理单元** （_MMU_） 中，于是 CPU 就可以直接通过 MMU，找出要实际要访问的物理内存地址。\n\n> [!important]\n分页是把整个**虚拟和物理内存**空间切成一段段固定大小的**页**（_Page_）。一个页是一个连续并且尺寸固定的内存空间。在 Linux 下，**每一页的大小为 4KB**。\n\n虚拟地址与物理地址之间通过**页表**来映射，如下图：\n\n![[Pasted image 20231110132824.png]]\n\n### 如何解决内存碎片、内存交换效率低\n\n由于内存空间都是预先划分好的，也就不会像分段会产生间隙非常小的内存，这正是分段会产生内存碎片的原因。而采用了分页，那么释放的**内存**都是**以页为单位释放**的，也就不会产生无法给进程使用的小内存。\n\n如果内存空间不够，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页面给释放掉，也就是暂时写在硬盘上，称为**换出**（_Swap Out_）。一旦需要的时候，再加载进来，称为**换入**（_Swap In_）。所以，一次性写入磁盘的也只有少数的一个页或者几个页，不会花太多时间，**内存交换的效率就相对比较高。**\n\n更进一步地，分页的方式使得我们在加载程序的时候，不再需要一次性都把程序加载到物理内存中。我们完全可以在进行虚拟内存和物理内存的页之间的映射之后，并不是真的把页加载到物理内存里，而是**只有**在程序运行中，**需要用到**对应虚拟内存页里面的指令和数据时，**再加载到物理内存**里面去。\n\n### 如何映射\n\n在分页机制下，虚拟地址分为两部分，**页号**和**页内偏移**。页号作为页表的索引，**页表**包含物理页每页所在**物理内存的基地址**，这个基地址与页内偏移的组合就形成了物理内存地址，见下图。\n\n![[Pasted image 20231110133623.png]]\n\n三个步骤：\n\n- 把虚拟内存地址，切分成页号和偏移量；\n- 根据页号，从页表里面，查询对应的物理页号；\n- 直接拿物理页号，加上前面的偏移量，就得到了物理内存地址。\n\n### 局部性与 Cache\n\n在一段时间内，整个程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域。\n\n可把最常访问的几个页表项存储到访问速度更快的硬件，于是加入了一个专门存放程序最常访问的页表项的 Cache，这个 Cache 就是 TLB（_Translation Lookaside Buffer_） ，通常称为页表缓存、转址旁路缓存、快表等。\n\n## 段页式内存管理\n\n段页式内存管理实现的方式：\n\n- 先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制；\n- 接着再把每个段划分为多个页，也就是对分段划分出来的连续空间，再划分固定大小的页；\n\n![[Pasted image 20231110134320.png]]\n\n这样，地址结构就由**段号、段内页号和页内位移**三部分组成。\n\n段页式地址变换中要得到物理地址须经过三次内存访问：\n\n- 第一次访问段表，得到页表起始地址；\n- 第二次访问页表，得到物理页号；\n- 第三次将物理页号与页内位移组合，得到物理地址。\n\n可用软、硬件相结合的方法实现段页式地址变换，这样虽然增加了硬件成本和系统开销，但提高了内存的利用率。","title":"Linux 内存 —— 内存分页、分段","abstract":"> 内存**分页**与内存**分段**是**操作系统**管理**虚拟内存**的方式。\n> \n> 分段：将进程内存分为**代码分段**、**数据分段**、**栈段**、**堆段**等逻辑分明的段。能产生连续的物理空间。容易造成内存碎片，内存交换率低。","length":114,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","memory","Operation","BasicKnowledge"],"license":false}}}},"__N_SSG":true}