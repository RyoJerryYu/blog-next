{"pageProps":{"slug":"Linux Clone VS Fork","tags":[],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  return _jsx(_Fragment, {});\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"meta":{"content":"","title":"Linux Clone VS Fork","abstract":"","length":1,"created_at":"2025-03-09T17:10:04.000Z","updated_at":null,"tags":[],"license":false,"headingTrees":[],"wikiRefAliases":[],"richRefAliases":[]},"prevNextInfo":{"prevInfo":{"pathMapping":{"pagePath":"/ideas/blog 画图 Iframe 测试","filePath":"public/content/ideas/blog 画图 Iframe 测试.md"},"meta":{"title":"画图 Iframe 测试","created_at":"2025-03-11T15:54:00.000Z","updated_at":"2025-03-11T15:54:00.000Z"}},"nextInfo":{"pathMapping":{"pagePath":"/ideas/Linux Systemd","filePath":"public/content/ideas/Linux Systemd.md"},"meta":{"title":"Linux Systemd","created_at":"2024-11-16T07:32:08.000Z","updated_at":null}}},"backRefResources":[{"pathMapping":{"filePath":"public/content/ideas/Linux 信号处理 —— Signal.md","pagePath":"/ideas/Linux 信号处理 —— Signal","slug":"Linux 信号处理 —— Signal"},"meta":{"content":"\n#Linux #Signal #BasicKnowledge #Operation \n\n信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n\n\n### 信号的定义\n- 9: `SIGKILL`\n- 2: `SIGINT`\n- 15: `SIGTERM`\n\n### 信号的使用\n- `signal.h` 中，调用 `signal` 函数传入一个 `sighandler_t` 类型的 `handler` ，注册信号处理函数 \n- 用 `kill` 函数对一个 pid 发送一个信号。已注册信号， `kill` 发送的信号都能收到\n- `exec` 函数会将原先要捕捉的信号设置为默认动作\n- `fork` 函数的子进程会继承父进程的信号处理方式 [[Linux Clone VS Fork]]\n\n原型：\n```cpp\n#include <signal.h>\ntypedef void (*sighandler_t)(int);\nsighandler_t signal(int signum, sighandler_t handler);\n```\n\n```cpp\n#include <sys/types.h>\n#include <signal.h>\nint kill(pid_t pid, int sig);\n```\n\n### 未了解\n- [ ] 高级信号发送接收： sigaction , sigqueue\n\n\n# 一文看懂 Linux 信号处理原理与实现\n\n [一文看懂 Linux 信号处理原理与实现-linux 信号处理流程](https://www.51cto.com/article/675743.html) \n\n### 信号处理时内核态\n\n信号处理程序代码运行在用户态\nA 进程向 B 进程发送信号，发起系统调用陷入内核态，内核触发信号处理函数，返回用户态执行信号处理程序，信号处理程序执行完毕后返回到内核态执行收尾工作，再返回用户态继续执行程序\n\n![[Pasted image 20240819014740.png]]\n### 未了解\n- [ ] sigaction 详细解释\n- [ ] signal 在内核态的处理过程\n- [ ]","title":"Linux 信号处理 —— Signal","abstract":"信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n- 9: `SIGKILL`","length":50,"created_at":"2024-11-16T07:32:08.000Z","updated_at":"2025-03-09T17:10:04.000Z","tags":["Linux","Signal","BasicKnowledge","Operation"],"license":false,"headingTrees":[{"key":"信号的定义","href":"#信号的定义","heading":3,"title":"信号的定义","children":[],"id":"信号的定义"},{"key":"信号的使用","href":"#信号的使用","heading":3,"title":"信号的使用","children":[],"id":"信号的使用"},{"key":"未了解","href":"#未了解","heading":3,"title":"未了解","children":[],"id":"未了解"},{"key":"一文看懂-linux-信号处理原理与实现","href":"#一文看懂-linux-信号处理原理与实现","heading":1,"title":"一文看懂 Linux 信号处理原理与实现","children":[{"key":"信号处理时内核态","href":"#信号处理时内核态","heading":3,"title":"信号处理时内核态","children":[],"id":"信号处理时内核态"},{"key":"未了解-1","href":"#未了解-1","heading":3,"title":"未了解","children":[],"id":"未了解-1"}],"id":"一文看懂-linux-信号处理原理与实现"}],"wikiRefAliases":["Linux Clone VS Fork"],"richRefAliases":["Pasted image 20240819014740.png"]}}],"hyperProps":{"withSEO":false,"withComments":false}},"__N_SSG":true}