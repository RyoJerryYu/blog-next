{"pageProps":{"allTagInfos":[{"tag":"杂技","slug":"杂技","path":"/tags/杂技","postSlugs":[{"postType":"articles","postPagePath":"/articles/Building-this-blog"},{"postType":"articles","postPagePath":"/articles/hello-world"},{"postType":"articles","postPagePath":"/articles/the-using-in-cpp"}]},{"tag":"Blog","slug":"blog","path":"/tags/blog","postSlugs":[{"postType":"articles","postPagePath":"/articles/Building-this-blog"},{"postType":"articles","postPagePath":"/articles/init-a-new-hexo-project"},{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"},{"postType":"articles","postPagePath":"/articles/use-paste-image-and-vscode-memo"},{"postType":"ideas","postPagePath":"/ideas/blog-in-next"},{"postType":"ideas","postPagePath":"/ideas/blog-syntax"}]},{"tag":"杂谈","slug":"杂谈","path":"/tags/杂谈","postSlugs":[{"postType":"articles","postPagePath":"/articles/hello-world"},{"postType":"articles","postPagePath":"/articles/try-cursor-and-thinking"}]},{"tag":"C++","slug":"c++","path":"/tags/c++","postSlugs":[{"postType":"articles","postPagePath":"/articles/the-using-in-cpp"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/cpp-rvo-and-rust-move-semantics"}]},{"tag":"Python","slug":"python","path":"/tags/python","postSlugs":[{"postType":"articles","postPagePath":"/articles/python-dict"}]},{"tag":"数据结构","slug":"数据结构","path":"/tags/数据结构","postSlugs":[{"postType":"articles","postPagePath":"/articles/python-dict"},{"postType":"articles","postPagePath":"/articles/Sort-algorithm"},{"postType":"articles","postPagePath":"/articles/Handy-heap-cheat-sheet"}]},{"tag":"算法","slug":"算法","path":"/tags/算法","postSlugs":[{"postType":"articles","postPagePath":"/articles/Sort-algorithm"},{"postType":"articles","postPagePath":"/articles/Handy-heap-cheat-sheet"}]},{"tag":"排序","slug":"排序","path":"/tags/排序","postSlugs":[{"postType":"articles","postPagePath":"/articles/Sort-algorithm"}]},{"tag":"算法竞赛","slug":"算法竞赛","path":"/tags/算法竞赛","postSlugs":[{"postType":"articles","postPagePath":"/articles/Handy-heap-cheat-sheet"}]},{"tag":"设计模式","slug":"设计模式","path":"/tags/设计模式","postSlugs":[{"postType":"articles","postPagePath":"/articles/The-beauty-of-design-parten"}]},{"tag":"笔记","slug":"笔记","path":"/tags/笔记","postSlugs":[{"postType":"articles","postPagePath":"/articles/The-beauty-of-design-parten"}]},{"tag":"GitHub","slug":"github","path":"/tags/github","postSlugs":[{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"AWS","slug":"aws","path":"/tags/aws","postSlugs":[{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"CI/CD","slug":"ci-cd","path":"/tags/ci-cd","postSlugs":[{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"IaC","slug":"iac","path":"/tags/iac","postSlugs":[{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"DevOps","slug":"devops","path":"/tags/devops","postSlugs":[{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"},{"postType":"articles","postPagePath":"/articles/introduction-for-k8s"},{"postType":"articles","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"ideas","postPagePath":"/ideas/newest"}]},{"tag":"VSCode","slug":"vscode","path":"/tags/vscode","postSlugs":[{"postType":"articles","postPagePath":"/articles/use-paste-image-and-vscode-memo"}]},{"tag":"Hexo","slug":"hexo","path":"/tags/hexo","postSlugs":[{"postType":"articles","postPagePath":"/articles/use-paste-image-and-vscode-memo"}]},{"tag":"JavaScript","slug":"javascript","path":"/tags/javascript","postSlugs":[{"postType":"articles","postPagePath":"/articles/use-paste-image-and-vscode-memo"}]},{"tag":"Kubernetes","slug":"kubernetes","path":"/tags/kubernetes","postSlugs":[{"postType":"articles","postPagePath":"/articles/introduction-for-k8s"},{"postType":"articles","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"ideas","postPagePath":"/ideas/newest"}]},{"tag":"Docker","slug":"docker","path":"/tags/docker","postSlugs":[{"postType":"articles","postPagePath":"/articles/introduction-for-k8s"},{"postType":"articles","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"ideas","postPagePath":"/ideas/newest"}]},{"tag":"Cloud Native","slug":"cloud-native","path":"/tags/cloud-native","postSlugs":[{"postType":"articles","postPagePath":"/articles/introduction-for-k8s"},{"postType":"articles","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"ideas","postPagePath":"/ideas/newest"}]},{"tag":"Cursor","slug":"cursor","path":"/tags/cursor","postSlugs":[{"postType":"articles","postPagePath":"/articles/try-cursor-and-thinking"}]},{"tag":"可视化","slug":"可视化","path":"/tags/可视化","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog 画图 Iframe 测试"}]},{"tag":"数学","slug":"数学","path":"/tags/数学","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog 画图 Iframe 测试"}]},{"tag":"工具","slug":"工具","path":"/tags/工具","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog 画图 Iframe 测试"}]},{"tag":"Nextjs","slug":"nextjs","path":"/tags/nextjs","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog-in-next"},{"postType":"ideas","postPagePath":"/ideas/blog-syntax"}]},{"tag":"Linux","slug":"linux","path":"/tags/linux","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"systemctl","slug":"systemctl","path":"/tags/systemctl","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"journalctl","slug":"journalctl","path":"/tags/journalctl","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"timedatectl","slug":"timedatectl","path":"/tags/timedatectl","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"BasicKnowledge","slug":"basicknowledge","path":"/tags/basicknowledge","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"Operation","slug":"operation","path":"/tags/operation","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"}]},{"tag":"Signal","slug":"signal","path":"/tags/signal","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"}]},{"tag":"memory","slug":"memory","path":"/tags/memory","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"}]},{"tag":"schedule","slug":"schedule","path":"/tags/schedule","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"Cloud Computing","slug":"cloud-computing","path":"/tags/cloud-computing","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/newest"}]},{"tag":"PyTorch","slug":"pytorch","path":"/tags/pytorch","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-model-save-and-load"}]},{"tag":"ONNX","slug":"onnx","path":"/tags/onnx","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"}]},{"tag":"深度学习","slug":"深度学习","path":"/tags/深度学习","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"模型部署","slug":"模型部署","path":"/tags/模型部署","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"}]},{"tag":"学习笔记","slug":"学习笔记","path":"/tags/学习笔记","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/opencv-coordinate-system-conventions"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"OpenCV","slug":"opencv","path":"/tags/opencv","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/opencv-coordinate-system-conventions"}]},{"tag":"图像处理","slug":"图像处理","path":"/tags/图像处理","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/opencv-coordinate-system-conventions"}]},{"tag":"Rust","slug":"rust","path":"/tags/rust","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/cpp-rvo-and-rust-move-semantics"}]},{"tag":"编程语言","slug":"编程语言","path":"/tags/编程语言","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/cpp-rvo-and-rust-move-semantics"}]},{"tag":"Windows","slug":"windows","path":"/tags/windows","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"macOS","slug":"macos","path":"/tags/macos","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"可执行文件","slug":"可执行文件","path":"/tags/可执行文件","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"LoRA","slug":"lora","path":"/tags/lora","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"参数高效微调","slug":"参数高效微调","path":"/tags/参数高效微调","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"模型训练","slug":"模型训练","path":"/tags/模型训练","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"反向传播","slug":"反向传播","path":"/tags/反向传播","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"}]},{"tag":"自动微分","slug":"自动微分","path":"/tags/自动微分","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"}]},{"tag":"GoLang","slug":"golang","path":"/tags/golang","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-new-and-memory-management"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-scheduler-preemption"}]},{"tag":"Memory Management","slug":"memory-management","path":"/tags/memory-management","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-new-and-memory-management"}]},{"tag":"Deep Learning","slug":"deep-learning","path":"/tags/deep-learning","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-model-save-and-load"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/resnet-math-and-gradient-vanishing"}]},{"tag":"Model Management","slug":"model-management","path":"/tags/model-management","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-model-save-and-load"}]},{"tag":"Neural Networks","slug":"neural-networks","path":"/tags/neural-networks","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/resnet-math-and-gradient-vanishing"}]},{"tag":"ResNet","slug":"resnet","path":"/tags/resnet","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/resnet-math-and-gradient-vanishing"}]},{"tag":"Mathematics","slug":"mathematics","path":"/tags/mathematics","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/resnet-math-and-gradient-vanishing"}]},{"tag":"协议","slug":"协议","path":"/tags/协议","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"}]},{"tag":"IoT","slug":"iot","path":"/tags/iot","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"}]},{"tag":"物联网","slug":"物联网","path":"/tags/物联网","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"}]},{"tag":"消息队列","slug":"消息队列","path":"/tags/消息队列","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"}]},{"tag":"Concurrency","slug":"concurrency","path":"/tags/concurrency","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-scheduler-preemption"}]},{"tag":"Scheduler","slug":"scheduler","path":"/tags/scheduler","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-scheduler-preemption"}]},{"tag":"Goroutine","slug":"goroutine","path":"/tags/goroutine","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-scheduler-preemption"}]},{"tag":"Stable Diffusion","slug":"stable-diffusion","path":"/tags/stable-diffusion","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"test","slug":"test","path":"/tags/test","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page1"},{"postType":"testwiki","postPagePath":"/testwiki/page1/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3/subpage34"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage3"}]},{"tag":"wiki","slug":"wiki","path":"/tags/wiki","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page1"},{"postType":"testwiki","postPagePath":"/testwiki/page1/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3/subpage34"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage3"}]},{"tag":"page1","slug":"page1","path":"/tags/page1","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page1"},{"postType":"testwiki","postPagePath":"/testwiki/page1/subpage1"}]},{"tag":"subpage1","slug":"subpage1","path":"/tags/subpage1","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page1/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage1"}]},{"tag":"page2","slug":"page2","path":"/tags/page2","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3/subpage34"}]},{"tag":"subpage2","slug":"subpage2","path":"/tags/subpage2","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage2"}]},{"tag":"subpage3","slug":"subpage3","path":"/tags/subpage3","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3/subpage34"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage3"}]},{"tag":"subpage34","slug":"subpage34","path":"/tags/subpage34","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3/subpage34"}]},{"tag":"page3","slug":"page3","path":"/tags/page3","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage3"}]}],"selectedTagInfo":{"tag":"C++","slug":"c++","path":"/tags/c++","postSlugs":[{"postType":"articles","postPagePath":"/articles/the-using-in-cpp"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/cpp-rvo-and-rust-move-semantics"}]},"posts":[{"pathMapping":{"filePath":"public/content/learn_from_ai/2024-12-08-cpp-rvo-and-rust-move-semantics.md","pagePath":"/learn_from_ai/cpp-rvo-and-rust-move-semantics","slug":"cpp-rvo-and-rust-move-semantics"},"meta":{"content":"\n> **参考要点:**\n> - C++的右值引用(T&&)用于捕获临时对象，移动语义通过转移资源所有权避免不必要的复制\n> - 返回值优化(RVO)是编译器优化技术，可以直接在调用方栈帧构造对象，避免复制\n> - 移动语义通过转移资源指针并将源对象指针置空来安全转移资源所有权\n> - Rust也有类似的RVO优化，但更依赖其所有权系统实现严格的移动语义\n> - Rust的借用检查器确保内存安全，防止数据竞争\n\n## Q:\n介绍C++的右值引用和移动语义，并解释函数返回右值引用是如何避免内存拷贝的。\n\n## A:\n### C++的右值引用和移动语义\n\n#### 右值引用\n\n在C++中，表达式可以分为左值（Lvalue）和右值（Rvalue）：\n\n- **左值（Lvalue）**：有名称且可以持久存在的对象，例如变量。左值可以取地址（&）。\n  ```cpp\n  int a = 10; // a 是左值\n  ```\n\n- **右值（Rvalue）**：没有名称且临时对象，例如字面量或表达式的结果。右值不能取地址。\n  ```cpp\n  int b = 20 + 5; // 20 + 5 的结果是右值\n  ```\n\n**右值引用（T&&）** 是专门设计用来捕获右值的引用类型，允许我们安全地修改或转移右值的资源。\n\n#### 移动语义\n\n移动语义是C++11引入的一个重要特性，旨在解决传统复制语义的性能问题。传统的深贝会分配新的内存空间并复制数据，导致性能开销较大，尤其是当对象包含大量资源（如动态分配的内存、大型数组或文件句柄）时。\n\n**移动语义的核心概念**：\n\n1. **移动构造函数**：通过转移资源所有权构造新对象，而不是复制资源。\n   ```cpp\n   class MyClass {\n   public:\n       MyClass(MyClass&& other) noexcept { /* 转移资源 */ }\n   };\n   ```\n\n2. **移动赋值运算符**：通过转移资源所有权赋值，而不是复制资源。\n   ```cpp\n   class MyClass {\n   public:\n       MyClass& operator=(MyClass&& other) noexcept { /* 转移资源 */ return *this; }\n   };\n   ```\n\n### 函数返回右值引用避免内存拷贝\n\n当函数返回一个右值引用时，可以避免不必要的内存拷贝，从而提高程序性能。这是因为右值引用允许直接转移临时对象的资源，而不是创建一个新的副本。\n\n#### 示例\n\n考虑以下：\n\n```cpp\n#include <iostream>\n#include <string>\n\nclass MyClass {\npublic:\n    std::string data;\n\n    MyClass(std::string d) : data(std::move(d)) {\n        std::cout << \"Constructing MyClass with data: \" << data << std::endl;\n    }\n\n    MyClass(MyClass&& other) noexcept : data(std::move(other.data)) {\n        std::cout << \"Moving MyClass with data: \" << data << std::endl;\n    }\n\n    MyClass& operator=(MyClass&& other) noexcept {\n        if (this != &other) {\n            data = std::move(other.data);\n        }\n        return *this;\n    }\n};\n\nMyClass createMyClass() {\n    MyClass temp(\"Temporary\");\n    return temp; // 返回一个右值\n}\n\nint main() {\n    MyClass obj = createMyClass(); // 触发移动构造函数\n    return 0;\n}\n```\n\n#### 解释\n\n1. **函数返回右值**：\n   ```cpp\n   MyClass createMyClass() {\n       MyClass temp(\"Temporary\");\n       return temp; // 返回一个右值\n   }\n   ```\n\n   在这个函数中，`temp`是一个局部对象，当函数返回时，`temp`会被视为一个右值。\n\n2. **移动构造函数被调用**：\n   ```cpp\n   MyClass obj = createMyClass(); // 触发移动构造函数\n   ```\n\n   由于`createMyClass()`返回的是一个右值，编译器会优先选择移动构造函数来构造`obj`，而不是复制构造函数。\n\n3. **资源转移** ：\n   在移动构造函数中，资源的所有权被转移，而不是复制：\n   ```cpp\n   MyClass(MyClass&& other) noexcept : data(std::move(other.data)) {\n       std::cout << \"Moving MyClass with data: \" << data << std::endl;\n   }\n   ```\n\n   这里使用`std::move`将`other.data`的资源转移到新对象中，避免了内存拷贝。\n\n### 总结\n\n通过使用右值引用和移动语义，C++能够有效地避免不必要的拷贝，提高程序的性能。函数返回右值引用时，可以直接利用移动构造函数转移资源，从而避免了深拷贝的开销。这对于包含大量资源的对象尤为重要。\n\n\n## Q:\n\n在你的例子里，为什么 temp 返回时赋值给 obj 可以不发生复制？ temp 应该在栈上不是吗？函数出栈时如果不发生复制，temp不会被回收吗？\n\n## A:\n\n你提出的问题非常关键，它涉及到C++中一个重要的优化机制——**返回值优化（Return Value Optimization, RVO）**和**移动语义**。\n\n### 返回值优化（RVO）\n\n在C++中，编译器通常会进行一种称为返回值优化的优化，以减少不必要的复制。当函数返回一个局部对象时，编译器可以优化代码，避免实际的复制操作。\n\n#### RVO的工作原理\n\n考虑以下函数：\n\n```cpp\nMyClass createMyClass() {\n    MyClass temp(\"Temporary\");\n    return temp;\n}\n```\n\n在这个函数中，`temp`确实是一个局部对象，存储在栈上。按照常规逻辑，当函数返回时，`temp`会被销毁。然而，编译器可以应用RVO来优化这一过程：\n\n1. **编译器优化**：编译器在生成机器代码时，可以决定直接在调用方分配`temp`所需的内存，而不是在函数内部分配。这样，temp`的构造实际上发生在调用方的栈帧上。\n\n2. **避免复制**：由于`temp`的构造直接发生在调用方的栈帧上，返回时不需要进行复制操作。这样，`temp`的生命周期自然延续到调用方的作用域中。\n\n### 移动语义\n\n即使没有RVO，C++11引入的移动语义也能显著减少复制的开销。\n\n#### 移动构造函数的作用\n\n在没有RVO的情况下，函数返回局部对象时，会触发构造函数（而不是复制构造函数），从而避免深拷贝：\n\n```cpp\nMyClass obj = createMyClass();\n```\n\n这里，`createMyClass()`返回的是一个右值（临时对象），因此编译器会调用`MyClass`的移动构造函数来构造`obj`：\n\n```cpp\nMyClass(MyClass&& other) noexcept : data(std::move(other.data)) {\n    std::cout << \"Moving MyClass with data: \" << data << std::endl;\n}\n```\n\n在构造函数中，资源的所有权被转移，而不是复制。这样，即使`temp`在`createMyClass()`函数结束时被销毁，其资源已经安全地转移到了`obj`中，避免了内存泄漏。\n\n### 结合RVO和移动语义\n\n在实际应用中，编译器会优先应用RVO来避免复制。如果RVO不可用或未能应用，编译器会退而求其次，使用移动语义来减少开销。\n\n#### 示例代码优化\n\n考虑以下示例：\n\n```cpp\n#include <iostream>\n#include <string>\n\nclass MyClass {\npublic:\n    std::string data;\n\n    MyClass(std::string d) : data(std::move(d)) {\n        std::cout << \"Constructing MyClass with data: \" << data << std::endl;\n    }\n\n    MyClass(MyClass&& other) noexcept : data(std::move(other.data)) {\n        std::cout << \"Moving MyClass with data: \" << data << std::endl;\n    }\n\n    MyClass& operator=(MyClass&& other) noexcept {\n        if (this != &other) {\n            data = std::move(other.data);\n        }\n        return *this;\n    }\n};\n\nMyClass createMyClass() {\n    MyClass temp(\"Temporary\");\n    return temp; // 可能触发RVO或移动构造\n}\n\nint main() {\n    MyClass obj = createMyClass(); // 触发RVO或移动构造\n    return 0;\n}\n```\n\n在这个示例中：\n\n1. **RVO优化**：编译器可能会应用RVO，直接在`main`函数的栈帧上构造`temp`，避免复制。\n2. **移动语义**：如果RVO未应用，`createMyClass()`返回的临时对象会触发移动构造函数，转移资源。\n\n### 总结\n\n- **RVO**：编译器优化，直接在调用方分配内存，避免复制。\n- **移动语义**：在没有RVO的情况下，通过移动构造函数转移资源，减少复制开销。\n\n通过这两种机制，C++能够有效地避免内存拷贝，提高程序性能。即使局部对象在函数结束时被销毁，其资源已经安全地转移到了调用方，避免了资源泄漏。\n\n## Q:\n\n解释一下你说的“在没有RVO情况下，即使 `temp` 在 `createMyClass()` 函数结束时被销毁，其资源已经安全地转移到了 `obj` 中。” 在我理解里，既然 `temp` 在栈上，那他的所有非指针非引用成员也都会在栈上，那函数出栈时也都会被回收。那这些资源是怎么转移到 `obj` 中而不发生复制的？\n\n## A:\n\n你的疑问非常合理，涉及到C++中资源管理的核心概念。让我们深入探讨一下在没有RVO的情况下，如何通过移动语义实现资源的转移，而不仅仅是简单的栈上内存拷贝。\n\n### 栈上对象和资源管理\n\n首先，明确一点：栈上对象的非指针非引用成员确实是在栈上分配的，并且会在函数结束时被自动销毁。然而，对于包含动态资源（如动态分配的内存、文件句柄等），资源的实际管理是通过指针或引用来实现的。\n\n### 移动语义的核心\n\n移动语义的核心在于**转移资源的所有权**，而不是复制资源。对于包含动态资源的对象，移动操作通常涉及以下步骤：\n\n1. **将源对象的资源指针赋值给目标对象**。\n2. **将源对象的资源指针置为`nullptr`**，以防止其析构时释放资源。\n\n这样，资源的所有权就从源对象转移到了目标对象，而无需进行实际的复制。\n\n### 示例解释\n\n考虑以下示例：\n\n```cpp\n#include <iostream>\n#include <string>\n\nclass MyClass {\npublic:\n    std::string data;\n\n    MyClass(std::string d) : data(std::move(d)) {\n        std::cout << \"Constructing MyClass with data: \" << data << std::endl;\n    }\n\n    // 移动构造函数\n    MyClass(MyClass&& other) noexcept : data(std::move(other.data)) {\n        std::cout << \"Moving MyClass with data: \" << data << std::endl;\n    }\n\n    // 移动赋值运算符\n    MyClass& operator=(MyClass&& other) noexcept {\n        if (this != &other) {\n            data = std::move(other.data);\n        }\n        return *this;\n    }\n};\n\nMyClass createMyClass() {\n    MyClass temp(\"Temporary\");\n    return temp; // 返回一个右值\n}\n\nint main() {\n    MyClass obj = createMyClass(); // 触发移动构造函数\n    return 0;\n}\n```\n\n#### 详细步骤\n\n1. **构造对象**：\n   ```cpp\n   MyClass temp(\"Temporary\");\n   ```\n   这里，`temp`是一个局部对象，其`data`成员是一个`std::string`，可能包含动态分配的内存。\n\n2. **返回临时对象**：\n   ```cpp\n   return temp;\n   ```\n   由于`temp`是一个右值，编译器会优先选择移动构造函数来构造返回值。\n\n3. **移动构造函数被调用**：\n   ```cpp\n   MyClass(MyClass&& other) noexcept : data(std::move(other.data)) {\n       std::cout << \"Moving MyClass with data: \" << data << std::endl;\n   }\n   ```\n   在移动构造函数中，`std::move(other.data)`将`other.data`的资源所有权转移给`data`。具体来说，`std::move`会将`other.data`内部的指针直接赋值给`data`，并将`other.data`内部的指针置为`nullptr`。\n\n4. **资源转移** - `data`现在拥有原来`temp.data`的资源。\n   - `temp.data`被置为`nullptr`，在其析构时不会释放资源。\n\n5. **函数结束时`temp`被销毁**：\n   当`createMyClass()`函数结束时，`temp`会被销毁。但由于其`data`成员的指针已经被置为`nullptr`，析构时不会释放实际资源。\n\n6. **`obj`拥有资源**：\n   ```\n   MyClass obj = createMyClass();\n   ```\n   `obj`通过移动构造函数获得了`temp`的资源，避免了深拷贝。\n\n### 总结\n\n在没有RVO的情况下，移动语义通过以下方式避免复制：\n\n- **转移资源指针**：将源对象的资源指针直接赋值给目标对象。\n- **置空源对象指针**：将源对象的资源指针置为`nullptr`，防止其析构时释放资源。\n\n这样，资源的所有权从源对象安全地到了目标对象，而无需进行实际的资源复制。即使源对象在栈上并在函数结束时被销毁，其资源已经转移到了目标对象中，不会发生资源泄漏。\n\n### 关键点\n\n- **动态资源管理**：通过指针或引用管理动态资源。\n- **移动操作**：转移资源所有权，而不是复制资源。\n- **安全转移**：确保源对象在析构时不会释放已转移的资源。\n\n通过这种方式，C++实现了高效且安全的资源管理，显著提高了性能。\n\n## Q:\n\n在 Rust 中，有没有类似的 RVO 优化或移动语义？\n\n## A:\n\n在Rust中，确实存在类似于C++中的返回值优化（RVO）和移动语义的机制，但Rust的实现方式和术语有所不同。Rust的设计理念强调内存安全和性能，因此它内置了许多优化机制来避免不必要的内存拷贝。\n\n### Rust中的RVO优化\n\nRust编译器（如`rustc`）也会进行返回值优化（RVO），尽管Rust社区不经常使用“RVO”这个术语。ust的编译器会尽量减少不必要的复制，尤其是在函数返回值时。\n\n#### 示例\n\n考虑以下Rust代码：\n\n```rust\nstruct MyStruct {\n    data: String,\n}\n\nimpl MyStruct {\n    fn new(data: String) -> MyStruct {\n        MyStruct { data }\n    }\n}\n\nfn create_my_struct() -> MyStruct {\n    MyStruct::new(\"Temporary\".to_string())\n}\n\nfn main() {\n    let obj = create_my_struct();\n}\n```\n\n在这个示例中，`create_my_struct`函数返回一个`My`实例。Rust编译器可能会应用RVO优化，直接在`main`函数的栈帧上构造`MyStruct`实例，避免不必要的复制。\n\n### Rust中的移动语义\n\nRust的移动语义是其所有权系统的一部分，用于高效地管理资源。Rust中的移动语义比C++更为严格和显式。\n\n#### 移动语义的工作原理\n\n在Rust中，当一个值被移动到另一个变量时，原变量将不再有效，防止了垂引用。\n\n#### 示例\n\n```rust\nfn main() {\n    let x = String::from(\"hello\");\n    let y = x; // x 的所有权移动到 y，x 不再有效\n\n    // 下面的代码会报错，因为 x 已经不再有效\n    // println!(\"x: {}\", x);\n    println!(\"y: {}\", y);\n}\n```\n\n在这个示例中，`x`的所有权移动到`y`，之后`x`不再有效。这种机制确保了内存，避免了悬垂引用。\n\n### Rust中的移动构造\n\nRust的移动构造是通过所有权转移实现的。当一个对象被移动时，其内部资源的所有权也会随之转移。\n\n#### 示例\n\n```rust\nstruct MyStruct {\n    data: String,\n}\n\nimpl MyStruct {\n    fn new(data: String) -> MyStruct {\n        MyStruct { data }\n    }\n}\n\nfn main() {\n    let a = MyStruct::new(\"Temporary\".to_string());\n    let b = a; // a 的所有权移动到 b， 不再有效\n\n    // 下面的代码会报错，因为 a 已经不再有效\n    // println!(\"a: {:?}\", a);\n    println!(\"b: {:?}\", b);\n}\n```\n\n在这个示例中，`a`的所有权移动到`b`，`a`不再有效。`MyStruct`的`data`成员（一个`String`）的所有权也随之转移。\n\n### Rust中的借用检查\n\nRust的借用检查器确保在任意时刻，要么只有一个可变引用，有多个不可变引用，从而防止数据竞争。\n\n#### 示例\n\n```rust\nfn main() {\n    let mut x = String::from(\"hello\");\n    let y = &x; // 不可变借用\n    let z = &mut x; // 可变借用，需要先释放 y 的借用\n\n    println!(\"y: {}\", y);\n    println!(\"z: {}\", z);\n}\n```\n\n在这个示例中，`y`是对`x`的不可变借用，`z`是对x`的可变借用。Rust的借用检查器确保在`z`的可变借用生效前，`y`的借用已经被释放。\n\n### 总结\n\n- **RVO优化**：Rust编译器会进行类似的返回值优化，减少不必要的复制。\n- **移动语义**：Rust通过所有权系统实现严格的移动语义，确保内存安全。\n- **借用检查**：Rust的借用检查器防止数据竞争，确保内存安全。\n\nRust的这些共同作用，提供了高效且安全的资源管理，避免了不必要的内存拷贝，同时确保了程序的内存安全性。\n\n","title":"C++右值引用与Rust移动语义","abstract":"> **参考要点:**\n> - C++的右值引用(T&&)用于捕获临时对象，移动语义通过转移资源所有权避免不必要的复制\n> - 返回值优化(RVO)是编译器优化技术，可以直接在调用方栈帧构造对象，避免复制","length":466,"created_at":"2024-12-08T12:00:00.000Z","updated_at":"2024-12-08T12:00:00.000Z","tags":["C++","Rust","编程语言"],"license":true}},{"pathMapping":{"filePath":"public/content/articles/2020-01-28-the-using-in-cpp.md","pagePath":"/articles/the-using-in-cpp","slug":"the-using-in-cpp"},"meta":{"content":"\n## using的用法\n#### using与命名空间\n\n1. 引入整个命名空间中的成员\n   \n   不引入命名空间时，使用其中变量需要使用`<命名空间名>::<变量名>`的方式使用。\n   ```C++\n   using namespace foo;\n   ```\n   如此会将命名空间foo下所有的成员名称引入，可在直接以 `<变量名>` 的形式使用。但如此做有可能会使得命名空间foo中部分变量与当前定义的变量名冲突，违反命名空间隔离编译时名称冲突的初衷，因此不建议如此使用。\n\n2. 引入命名空间中的部分成员\n   \n   可通过仅引入命名空间中部分的成员，避免命名冲突。\n   ```C++\n   using foo::bar;\n   ```\n   这种方法仅会引入在语句中明确声明的名称。如using一个枚举类时，不会连其定义的枚举常量也一同引入。\n\n#### using与基类成员\n\n1. 子类中引入基类名称\n   \n   ```C++\n    class Base {\n    public:\n        std::size_t size() const { return n; }\n    protected:\n        std::size_t n;\n    };\n\n    class Derived : private Base {\n    public:\n        using Base::size;\n    protected:\n        using Base::n;\n    // ...\n    };\n    ```\n    例中子类private继承基类，由于private继承使得`Base::size`与`Base::n`可视性变为private。而使用`using Base::size`、`using Base::n`后，可分别使其变为public与protected。\n\n2. 子类成员函数与基类同名时保留基类函数用以重载\n   \n   ```C++\n    class Base\n    {\n    public:\n        int Func(){return 0;}\n    };\n    class Derived : Base\n    {\n    public:\n        using Base::Func;\n        int Func(int);\n    };\n    ```\n    子类中定义的成员函数与基类中重名时，即使函数原型不同，子类函数也会覆盖基类函数。\n    \n    如果基类中定义了一个函数的多个重载，而子类中又重写或重定义了其中某些版本，或是定义了一个新的重载，则基类中该函数的所有重载均被隐藏。\n\n    此时可以在子类中使用`using Base::Func`，令基类中所有重载版本在子类中可见，再重定义需要更改的版本。\n\n又如cppreference中的[例子](https://en.cppreference.com/w/cpp/language/using_declaration#In_class_definition)：\n```C++\n#include <iostream>\nstruct B {\n    virtual void f(int) { std::cout << \"B::f\\n\"; }\n    void g(char)        { std::cout << \"B::g\\n\"; }\n    void h(int)         { std::cout << \"B::h\\n\"; }\nprotected:\n    int m; // B::m is protected\n    typedef int value_type;\n};\n\nstruct D : B {\n    using B::m; // D::m is public\n    using B::value_type; // D::value_type is public\n\n    using B::f;\n    void f(int) { std::cout << \"D::f\\n\"; } // D::f(int) overrides B::f(int)\n    using B::g;\n    void g(int) { std::cout << \"D::g\\n\"; } // both g(int) and g(char) are visible\n                                        // as members of D\n    using B::h;\n    void h(int) { std::cout << \"D::h\\n\"; } // D::h(int) hides B::h(int)\n};\n\nint main()\n{\n    D d;\n    B& b = d;\n\n//    b.m = 2; // error, B::m is protected\n    d.m = 1; // protected B::m is accessible as public D::m\n    b.f(1); // calls derived f()\n    d.f(1); // calls derived f()\n    d.g(1); // calls derived g(int)\n    d.g('a'); // calls base g(char)\n    b.h(1); // calls base h()\n    d.h(1); // calls derived h()\n}\n```\n`using`语句可以改变基类成员的可访问性，也能在子类中重载(Overload)、重写(Override)基类的函数，或是通过重定义隐藏(Hide)对应的基类函数。\n\n\n#### using与别名\n\nusing在C++11开始，可用于别名的声明。用法如下：\n```C++\nusing UPtrMapSS = std::unique_ptr<std::unordered_map<std::string, std::string>>;//普通别名\nusing FP = void (*) (int, const std::string&);//函数指针别名\n\ntemplate <typename T>\nusing Vec = MyVector<T, MyAlloc<T>>;//模板别名\nVec<int> vec;//模板别名的使用\n```\n\n## using关键字与typedef关键字定义别名的不同\n\n在STL容器或是其他泛型中若是再接受一个容器类型，类型名称就会写得很长。使用typedef或using定义别名会变得比较方便：\n```C++\ntypedef std::unique_ptr<std::unordered_map<std::string, std::string>> UPtrMapSS;\n\nusing UPtrMapSS = std::unique_ptr<std::unordered_map<std::string, std::string>>;\n```\n\n对于函数指针，使用using语句可以把函数原型与别名强制分到左右两边，比使用typedef易读得多：\n```C++\ntypedef void (*FP) (int, const std::string&);\n\nusing FP = void (*) (int, const std::string&);\n```\n\n---\n\n在C++中，若试图使用typedef定义一个模板：\n```C++\ntemplate <typename T>\ntypedef MyVector<T, MyAlloc<T>> Vec;\n\n// usage\nVec<int> vec;\n```\n编译就会报错，提示：\n> error: a typedef cannot be a template\n\n在一些STL中，通过如下方式包装一层来使用：\n```C++\ntemplate <typename T>\nstruct Vec\n{\n  typedef MyVector<T, MyAlloc<T>> type;\n};\n\n// usage\nVec<int>::type vec;\n```\n\n如此显得十分不美观，且要是在模板类中或参数传递时使用typename强制这为类型，而不是其他如静态成员等语法：\n```C++\ntemplate <typename T>\nclass Widget\n{\n  typename Vec<T>::type vec;\n};\n```\n\n而using关键字可定义模板别名，则一切都会显得十分自然：\n```C++\ntemplate <typename T>\nusing Vec = MyVector<T, MyAlloc<T>>;\n\n// usage\nVec<int> vec;\n\n// in a class template\ntemplate <typename T>\nclass Widget\n{\n  Vec<T> vec;\n};\n```\n\n---\n\n能做到类似别名功能的，还有宏#define。但#define运行在编译前的宏处理阶段，对代码进行字符串替换。没有类型检查或其他编译、链接阶段才能进行的检查，不具备安全性。在C++11中不提倡使用#define。\n\n\n\n   \n   ","title":"C++中using关键字的使用","abstract":"1. 引入整个命名空间中的成员\n   不引入命名空间时，使用其中变量需要使用`<命名空间名>::<变量名>`的方式使用。\n   ```C++","length":192,"created_at":"2020-01-28T18:00:00.000Z","updated_at":"2022-03-27T13:30:33.000Z","tags":["C++","杂技"],"license":false}}]},"__N_SSG":true}