{"pageProps":{"allTagInfos":[{"tag":"杂技","slug":"杂技","path":"/tags/杂技","postSlugs":[{"postType":"articles","postPagePath":"/articles/Building-this-blog"},{"postType":"articles","postPagePath":"/articles/hello-world"},{"postType":"articles","postPagePath":"/articles/the-using-in-cpp"}]},{"tag":"Blog","slug":"blog","path":"/tags/blog","postSlugs":[{"postType":"articles","postPagePath":"/articles/Building-this-blog"},{"postType":"articles","postPagePath":"/articles/init-a-new-hexo-project"},{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"},{"postType":"articles","postPagePath":"/articles/use-paste-image-and-vscode-memo"},{"postType":"ideas","postPagePath":"/ideas/blog-in-next"},{"postType":"ideas","postPagePath":"/ideas/blog-syntax"}]},{"tag":"杂谈","slug":"杂谈","path":"/tags/杂谈","postSlugs":[{"postType":"articles","postPagePath":"/articles/hello-world"},{"postType":"articles","postPagePath":"/articles/try-cursor-and-thinking"},{"postType":"articles","postPagePath":"/articles/ygomd-synchro-cup-crystron"}]},{"tag":"C++","slug":"c++","path":"/tags/c++","postSlugs":[{"postType":"articles","postPagePath":"/articles/the-using-in-cpp"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/cpp-rvo-and-rust-move-semantics"}]},{"tag":"Python","slug":"python","path":"/tags/python","postSlugs":[{"postType":"articles","postPagePath":"/articles/python-dict"}]},{"tag":"数据结构","slug":"数据结构","path":"/tags/数据结构","postSlugs":[{"postType":"articles","postPagePath":"/articles/python-dict"},{"postType":"articles","postPagePath":"/articles/Sort-algorithm"},{"postType":"articles","postPagePath":"/articles/Handy-heap-cheat-sheet"}]},{"tag":"算法","slug":"算法","path":"/tags/算法","postSlugs":[{"postType":"articles","postPagePath":"/articles/Sort-algorithm"},{"postType":"articles","postPagePath":"/articles/Handy-heap-cheat-sheet"}]},{"tag":"排序","slug":"排序","path":"/tags/排序","postSlugs":[{"postType":"articles","postPagePath":"/articles/Sort-algorithm"}]},{"tag":"算法竞赛","slug":"算法竞赛","path":"/tags/算法竞赛","postSlugs":[{"postType":"articles","postPagePath":"/articles/Handy-heap-cheat-sheet"}]},{"tag":"设计模式","slug":"设计模式","path":"/tags/设计模式","postSlugs":[{"postType":"articles","postPagePath":"/articles/The-beauty-of-design-parten"}]},{"tag":"笔记","slug":"笔记","path":"/tags/笔记","postSlugs":[{"postType":"articles","postPagePath":"/articles/The-beauty-of-design-parten"}]},{"tag":"GitHub","slug":"github","path":"/tags/github","postSlugs":[{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"AWS","slug":"aws","path":"/tags/aws","postSlugs":[{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"CI/CD","slug":"ci-cd","path":"/tags/ci-cd","postSlugs":[{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"IaC","slug":"iac","path":"/tags/iac","postSlugs":[{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"}]},{"tag":"DevOps","slug":"devops","path":"/tags/devops","postSlugs":[{"postType":"articles","postPagePath":"/articles/create-blog-cicd-by-github"},{"postType":"articles","postPagePath":"/articles/introduction-for-k8s"},{"postType":"articles","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"ideas","postPagePath":"/ideas/newest"}]},{"tag":"VSCode","slug":"vscode","path":"/tags/vscode","postSlugs":[{"postType":"articles","postPagePath":"/articles/use-paste-image-and-vscode-memo"}]},{"tag":"Hexo","slug":"hexo","path":"/tags/hexo","postSlugs":[{"postType":"articles","postPagePath":"/articles/use-paste-image-and-vscode-memo"}]},{"tag":"JavaScript","slug":"javascript","path":"/tags/javascript","postSlugs":[{"postType":"articles","postPagePath":"/articles/use-paste-image-and-vscode-memo"}]},{"tag":"Kubernetes","slug":"kubernetes","path":"/tags/kubernetes","postSlugs":[{"postType":"articles","postPagePath":"/articles/introduction-for-k8s"},{"postType":"articles","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"ideas","postPagePath":"/ideas/newest"}]},{"tag":"Docker","slug":"docker","path":"/tags/docker","postSlugs":[{"postType":"articles","postPagePath":"/articles/introduction-for-k8s"},{"postType":"articles","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"ideas","postPagePath":"/ideas/newest"}]},{"tag":"Cloud Native","slug":"cloud-native","path":"/tags/cloud-native","postSlugs":[{"postType":"articles","postPagePath":"/articles/introduction-for-k8s"},{"postType":"articles","postPagePath":"/articles/introduction-for-k8s-2"},{"postType":"ideas","postPagePath":"/ideas/newest"}]},{"tag":"Cursor","slug":"cursor","path":"/tags/cursor","postSlugs":[{"postType":"articles","postPagePath":"/articles/try-cursor-and-thinking"}]},{"tag":"游戏王","slug":"游戏王","path":"/tags/游戏王","postSlugs":[{"postType":"articles","postPagePath":"/articles/ygomd-synchro-cup-crystron"}]},{"tag":"游戏王MD","slug":"游戏王md","path":"/tags/游戏王md","postSlugs":[{"postType":"articles","postPagePath":"/articles/ygomd-synchro-cup-crystron"}]},{"tag":"游戏王大师决斗","slug":"游戏王大师决斗","path":"/tags/游戏王大师决斗","postSlugs":[{"postType":"articles","postPagePath":"/articles/ygomd-synchro-cup-crystron"}]},{"tag":"可视化","slug":"可视化","path":"/tags/可视化","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog 画图 Iframe 测试"}]},{"tag":"数学","slug":"数学","path":"/tags/数学","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog 画图 Iframe 测试"}]},{"tag":"工具","slug":"工具","path":"/tags/工具","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog 画图 Iframe 测试"}]},{"tag":"Nextjs","slug":"nextjs","path":"/tags/nextjs","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog-in-next"},{"postType":"ideas","postPagePath":"/ideas/blog-syntax"}]},{"tag":"Tag1","slug":"tag1","path":"/tags/tag1","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog-syntax"}]},{"tag":"Tag2","slug":"tag2","path":"/tags/tag2","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog-syntax"}]},{"tag":"单行Tag","slug":"单行tag","path":"/tags/单行tag","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog-syntax"}]},{"tag":"Tag","slug":"tag","path":"/tags/tag","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog-syntax"}]},{"tag":"Tag/Tag2","slug":"tag-tag2","path":"/tags/tag-tag2","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog-syntax"}]},{"tag":"Tag3","slug":"tag3","path":"/tags/tag3","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog-syntax"}]},{"tag":"Linux","slug":"linux","path":"/tags/linux","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog-syntax"},{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"systemctl","slug":"systemctl","path":"/tags/systemctl","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"journalctl","slug":"journalctl","path":"/tags/journalctl","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"timedatectl","slug":"timedatectl","path":"/tags/timedatectl","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"}]},{"tag":"BasicKnowledge","slug":"basicknowledge","path":"/tags/basicknowledge","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"Operation","slug":"operation","path":"/tags/operation","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"}]},{"tag":"Signal","slug":"signal","path":"/tags/signal","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"}]},{"tag":"memory","slug":"memory","path":"/tags/memory","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"}]},{"tag":"schedule","slug":"schedule","path":"/tags/schedule","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"}]},{"tag":"Cloud Computing","slug":"cloud-computing","path":"/tags/cloud-computing","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/newest"}]},{"tag":"PyTorch","slug":"pytorch","path":"/tags/pytorch","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-model-save-and-load"}]},{"tag":"ONNX","slug":"onnx","path":"/tags/onnx","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"}]},{"tag":"深度学习","slug":"深度学习","path":"/tags/深度学习","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"模型部署","slug":"模型部署","path":"/tags/模型部署","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"}]},{"tag":"学习笔记","slug":"学习笔记","path":"/tags/学习笔记","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/opencv-coordinate-system-conventions"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"OpenCV","slug":"opencv","path":"/tags/opencv","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/opencv-coordinate-system-conventions"}]},{"tag":"图像处理","slug":"图像处理","path":"/tags/图像处理","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/opencv-coordinate-system-conventions"}]},{"tag":"Rust","slug":"rust","path":"/tags/rust","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/cpp-rvo-and-rust-move-semantics"}]},{"tag":"编程语言","slug":"编程语言","path":"/tags/编程语言","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/cpp-rvo-and-rust-move-semantics"}]},{"tag":"Windows","slug":"windows","path":"/tags/windows","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"macOS","slug":"macos","path":"/tags/macos","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"可执行文件","slug":"可执行文件","path":"/tags/可执行文件","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},{"tag":"LoRA","slug":"lora","path":"/tags/lora","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"参数高效微调","slug":"参数高效微调","path":"/tags/参数高效微调","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"模型训练","slug":"模型训练","path":"/tags/模型训练","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"反向传播","slug":"反向传播","path":"/tags/反向传播","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"}]},{"tag":"自动微分","slug":"自动微分","path":"/tags/自动微分","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"}]},{"tag":"GoLang","slug":"golang","path":"/tags/golang","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-new-and-memory-management"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-scheduler-preemption"}]},{"tag":"Memory Management","slug":"memory-management","path":"/tags/memory-management","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-new-and-memory-management"}]},{"tag":"Deep Learning","slug":"deep-learning","path":"/tags/deep-learning","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-model-save-and-load"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/resnet-math-and-gradient-vanishing"}]},{"tag":"Model Management","slug":"model-management","path":"/tags/model-management","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-model-save-and-load"}]},{"tag":"Neural Networks","slug":"neural-networks","path":"/tags/neural-networks","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/resnet-math-and-gradient-vanishing"}]},{"tag":"ResNet","slug":"resnet","path":"/tags/resnet","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/resnet-math-and-gradient-vanishing"}]},{"tag":"Mathematics","slug":"mathematics","path":"/tags/mathematics","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/resnet-math-and-gradient-vanishing"}]},{"tag":"协议","slug":"协议","path":"/tags/协议","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"}]},{"tag":"IoT","slug":"iot","path":"/tags/iot","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"}]},{"tag":"物联网","slug":"物联网","path":"/tags/物联网","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"}]},{"tag":"消息队列","slug":"消息队列","path":"/tags/消息队列","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"}]},{"tag":"Stable Diffusion","slug":"stable-diffusion","path":"/tags/stable-diffusion","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]},{"tag":"Concurrency","slug":"concurrency","path":"/tags/concurrency","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-scheduler-preemption"}]},{"tag":"Scheduler","slug":"scheduler","path":"/tags/scheduler","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-scheduler-preemption"}]},{"tag":"Goroutine","slug":"goroutine","path":"/tags/goroutine","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/golang-scheduler-preemption"}]},{"tag":"线性代数","slug":"线性代数","path":"/tags/线性代数","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/products-for-vector-in-space-1"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/products-for-vector-in-space-2"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/products-for-vector-in-space-3"}]},{"tag":"群论","slug":"群论","path":"/tags/群论","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/products-for-vector-in-space-1"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/products-for-vector-in-space-2"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/products-for-vector-in-space-3"}]},{"tag":"test","slug":"test","path":"/tags/test","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page1"},{"postType":"testwiki","postPagePath":"/testwiki/page1/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3/subpage34"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage3"}]},{"tag":"wiki","slug":"wiki","path":"/tags/wiki","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page1"},{"postType":"testwiki","postPagePath":"/testwiki/page1/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3/subpage34"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage3"}]},{"tag":"page1","slug":"page1","path":"/tags/page1","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page1"},{"postType":"testwiki","postPagePath":"/testwiki/page1/subpage1"}]},{"tag":"subpage1","slug":"subpage1","path":"/tags/subpage1","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page1/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage1"}]},{"tag":"page2","slug":"page2","path":"/tags/page2","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3/subpage34"}]},{"tag":"subpage2","slug":"subpage2","path":"/tags/subpage2","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage2"}]},{"tag":"subpage3","slug":"subpage3","path":"/tags/subpage3","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3"},{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3/subpage34"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage3"}]},{"tag":"subpage34","slug":"subpage34","path":"/tags/subpage34","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page2/subpage3/subpage34"}]},{"tag":"page3","slug":"page3","path":"/tags/page3","postSlugs":[{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage1"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage2"},{"postType":"testwiki","postPagePath":"/testwiki/page3/subpage3"}]}],"selectedTagInfo":{"tag":"Linux","slug":"linux","path":"/tags/linux","postSlugs":[{"postType":"ideas","postPagePath":"/ideas/blog-syntax"},{"postType":"ideas","postPagePath":"/ideas/Linux Systemd"},{"postType":"ideas","postPagePath":"/ideas/Linux 信号处理 —— Signal"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 内存分页、分段"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 堆和栈"},{"postType":"ideas","postPagePath":"/ideas/Linux 内存 —— 虚拟内存"},{"postType":"ideas","postPagePath":"/ideas/Linux 调度 —— 进程与线程"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"}]},"posts":[{"pathMapping":{"filePath":"public/content/learn_from_ai/2024-12-08-executable-file-formats.md","pagePath":"/learn_from_ai/executable-file-formats","slug":"executable-file-formats"},"meta":{"content":"\n> 本文介绍了几种主要的可执行文件格式，包括Linux系统使用的ELF格式、Windows系统使用的PE格式、以及macOS系统使用的Mach-O格式等。文章详细讨论了每种格式的特点、使用平台和历史演变，帮助读者理解不同操作系统中二进制文件格式的差异。\n\n## Q: 解释: ELF 执行文件\n\nELF（Executable and Linkable Format）执行文件是一种用于Linux和类Unix操作系统的标准二进制文件格式。它包含了可执行程序、共享库、目标文件和核心转储文件。ELF文件格式设计灵活、可扩展，并且可移植，它定义了程序代码的加载和执行方式，包括代码段、数据段、符号表和重定位信息等。操作系统根据ELF文件中的这些信息来和执行程序。ELF格式也允许程序共享库，即多个程序可以共享同一段代码，从而减少内存占用并提高效率。在软件开发过程中，ELF文件作为目标文件格式在编译时生成，并最终由链接器组合形成可执行文件或共享库。\n\n## Q: 有与 ELF 相并列的另外的一些二进制文件格式吗？\n\n是的，除了ELF（Executable and Linking Format）之外，还有其他几种常见的二进制文件格式，它们在不同的操作系统和平台上被广泛使用。以下是一些主要的二进制文件格式：\n\n1. **PE（Portable Executable）**：\n   - **使用平台**：主要在Windows操作系统上使用。\n   - **特点**：PE格式是COFF（Common Object File Format）的扩展，用于可执行文件、目标文件、动态链接库DLLs）和驱动程序等。PE文件包含一个头部（PE header）、节表（section table）和各个节（sections），如代码节、数据节等。\n\n2. **Mach-O（Mach Object）**：\n   - **使用平台**：主要在Apple的macOS和iOS操作系统上使用。\n   - **特点**：Mach-O格式用于存储可执行文件、目标文件和动态库。它包含多个段（segments和节（sections），支持多种架构，并且可以包含多个架构的代码（称为\"fat binary\"）。\n\n3. **COFF（Common Object File Format）**：\n   - **使用平台**：早期在Unix System V和Windows NT上使用。\n   - **特点**：COFF格式是一种通用的目标文件格式，包含代码、数据和重定位信息。虽然现在较少直接使用，但它的许多概念和结构被PE和ELF继承。\n\n4. **a.out（Assembler Output）**：\n   - **使用平台**：早期Unix系统上使用。\n   - **特点**：a.out是一种较简单的二进制文件格式，包含可执行代码、数据和符号表。随着ELF格式的出现，a.out逐渐被淘汰。\n\n5. **DOS MZ（Mark Zbikowski）**：\n   - **使用平台**：早期DOS和Windows系统上使用。\n   - **特点**：DOSZ格式是DOS可执行文件的格式，以\"MZ\"（开发者Mark Zbikowski的首字母）作为文件头部的标识。它被后来的PE格式所取代。\n\n6. **COM文件**：\n   - **使用平台**：早期DOS系统上使用。\n   - **特点**：COM文件是一种非常简单的可执行文件格式，仅包含代码和数据，没有头部信息，大小限制为64KB。\n\n这些二进制文件格式各有特点，适用于不同的和场景。它们在文件结构、加载机制和功能支持上有所不同，但都旨在实现程序代码的有效存储和执行。\n\n","title":"可执行文件格式对比：ELF、PE、Mach-O等","abstract":"> 本文介绍了几种主要的可执行文件格式，包括Linux系统使用的ELF格式、Windows系统使用的PE格式、以及macOS系统使用的Mach-O格式等。文章详细讨论了每种格式的特点、使用平台和历史演变，帮助读者理解不同操作系统中二进制文件格式的差异。\nELF（Executable and Linkable Format）执行文件是一种用于Linux和类Unix操作系统的标准二进制文件格式。它包含了可执行程序、共享库、目标文件和核心转储文件。ELF文件格式设计灵活、可扩展，并且可移植，它定义了程序代码的加载和执行方式，包括代码段、数据段、符号表和重定位信息等。操作系统根据ELF文件中的这些信息来和执行程序。ELF格式也允许程序共享库，即多个程序可以共享同一段代码，从而减少内存占用并提高效率。在软件开发过程中，ELF文件作为目标文件格式在编译时生成，并最终由链接器组合形成可执行文件或共享库。\n是的，除了ELF（Executable and Linking Format）之外，还有其他几种常见的二进制文件格式，它们在不同的操作系统和平台上被广泛使用。以下是一些主要的二进制文件格式：","length":38,"created_at":"2024-12-08T02:00:00.000Z","updated_at":"2024-12-08T02:00:00.000Z","tags":["Linux","Windows","macOS","可执行文件","学习笔记"],"license":true,"headingTrees":[{"key":"q-解释-elf-执行文件","href":"#q-解释-elf-执行文件","heading":2,"title":"Q: 解释: ELF 执行文件","children":[],"id":"q-解释-elf-执行文件"},{"key":"q-有与-elf-相并列的另外的一些二进制文件格式吗","href":"#q-有与-elf-相并列的另外的一些二进制文件格式吗","heading":2,"title":"Q: 有与 ELF 相并列的另外的一些二进制文件格式吗？","children":[],"id":"q-有与-elf-相并列的另外的一些二进制文件格式吗"}],"wikiRefAliases":[],"richRefAliases":[]}},{"pathMapping":{"filePath":"public/content/ideas/Linux Systemd.md","pagePath":"/ideas/Linux Systemd","slug":"Linux Systemd"},"meta":{"content":"\n#Linux #systemctl #journalctl #timedatectl #BasicKnowledge #Operation \n\n每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\n\nSystemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\n\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。\n\n```\n$ sudo systemctl enable clamd@scan.service\n# 等同于\n$ sudo ln -s '/usr/lib/systemd/system/clamd@scan.service' '/etc/systemd/system/multi-user.target.wants/clamd@scan.service'\n```\n如果配置文件里面设置了开机启动，systemctl enable命令相当于激活开机启动。\n\n与之对应的，systemctl disable命令用于在两个目录之间，撤销符号链接关系，相当于撤销开机启动。\n\n```\n$ sudo systemctl disable clamd@scan.service\n```\n配置文件的后缀名，就是该 Unit 的种类，比如sshd.socket。如果省略，Systemd 默认后缀名为.service，所以sshd会被理解成sshd.service。\n\n\n### 简单例子\n\n```\n[Unit]\nDescription=Ethereum go client\nAfter=syslog.target network.target\n\n[Service]\nType=simple\nWorkingDirectory=/home/ec2-user\nExecStart=/home/ec2-user/bin/geth --http --http.addr 0.0.0.0 --http.vhosts '*' --ws --ws.addr 0.0.0.0 --ws.origins '*' --rinkeby\nUser=ec2-user\nGroup=ec2-user\nKillMode=process\nKillSignal=SIGTERM\nRestart=on-failure\n\n[Install]\nWantedBy=default.target\n```\n\n# timedatectl \n\n时间管理\n\n设置时区\n```shell\nsudo timedatectl set-timezone zone\n```\n\n查看\n```shell\ntimedatectl status\n```\n\n# 日志\n\njournalctl\n\n查看所有日志: 不加任何参数\n```\njournalctl\n```\n\n按单位\n```\njournalctl -u geth\n```\n\n\n参考：\n- https://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html","title":"Linux Systemd","abstract":"每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit 。\nSystemd 默认从目录/etc/systemd/system/读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录/usr/lib/systemd/system/，真正的配置文件存放在那个目录。\nsystemctl enable命令用于在上面两个目录之间，建立符号链接关系。","length":76,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","systemctl","journalctl","timedatectl","BasicKnowledge","Operation"],"license":false,"headingTrees":[{"key":"简单例子","href":"#简单例子","heading":3,"title":"简单例子","children":[],"id":"简单例子"},{"key":"timedatectl","href":"#timedatectl","heading":1,"title":"timedatectl","children":[],"id":"timedatectl"},{"key":"日志","href":"#日志","heading":1,"title":"日志","children":[],"id":"日志"}],"wikiRefAliases":[],"richRefAliases":[]}},{"pathMapping":{"filePath":"public/content/ideas/Linux 信号处理 —— Signal.md","pagePath":"/ideas/Linux 信号处理 —— Signal","slug":"Linux 信号处理 —— Signal"},"meta":{"content":"\n#Linux #Signal #BasicKnowledge #Operation \n\n信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n\n\n### 信号的定义\n- 9: `SIGKILL`\n- 2: `SIGINT`\n- 15: `SIGTERM`\n\n### 信号的使用\n- `signal.h` 中，调用 `signal` 函数传入一个 `sighandler_t` 类型的 `handler` ，注册信号处理函数 \n- 用 `kill` 函数对一个 pid 发送一个信号。已注册信号， `kill` 发送的信号都能收到\n- `exec` 函数会将原先要捕捉的信号设置为默认动作\n- `fork` 函数的子进程会继承父进程的信号处理方式 [[Linux Clone VS Fork]]\n\n原型：\n```cpp\n#include <signal.h>\ntypedef void (*sighandler_t)(int);\nsighandler_t signal(int signum, sighandler_t handler);\n```\n\n```cpp\n#include <sys/types.h>\n#include <signal.h>\nint kill(pid_t pid, int sig);\n```\n\n### 未了解\n- [ ] 高级信号发送接收： sigaction , sigqueue\n\n\n# 一文看懂 Linux 信号处理原理与实现\n\n [一文看懂 Linux 信号处理原理与实现-linux 信号处理流程](https://www.51cto.com/article/675743.html) \n\n### 信号处理时内核态\n\n信号处理程序代码运行在用户态\nA 进程向 B 进程发送信号，发起系统调用陷入内核态，内核触发信号处理函数，返回用户态执行信号处理程序，信号处理程序执行完毕后返回到内核态执行收尾工作，再返回用户态继续执行程序\n\n![[Pasted image 20240819014740.png]]\n### 未了解\n- [ ] sigaction 详细解释\n- [ ] signal 在内核态的处理过程\n- [ ]","title":"Linux 信号处理 —— Signal","abstract":"信号是一种中断，为 Linux 提供一种处理异步事件的方法。\n [Linux 信号（signal） - 简书](https://www.jianshu.com/p/f445bfeea40a) \n- 9: `SIGKILL`","length":50,"created_at":"2024-11-16T07:32:08.000Z","updated_at":"2025-03-09T17:10:04.000Z","tags":["Linux","Signal","BasicKnowledge","Operation"],"license":false,"headingTrees":[{"key":"信号的定义","href":"#信号的定义","heading":3,"title":"信号的定义","children":[],"id":"信号的定义"},{"key":"信号的使用","href":"#信号的使用","heading":3,"title":"信号的使用","children":[],"id":"信号的使用"},{"key":"未了解","href":"#未了解","heading":3,"title":"未了解","children":[],"id":"未了解"},{"key":"一文看懂-linux-信号处理原理与实现","href":"#一文看懂-linux-信号处理原理与实现","heading":1,"title":"一文看懂 Linux 信号处理原理与实现","children":[{"key":"信号处理时内核态","href":"#信号处理时内核态","heading":3,"title":"信号处理时内核态","children":[],"id":"信号处理时内核态"},{"key":"未了解-1","href":"#未了解-1","heading":3,"title":"未了解","children":[],"id":"未了解-1"}],"id":"一文看懂-linux-信号处理原理与实现"}],"wikiRefAliases":["Linux Clone VS Fork"],"richRefAliases":["Pasted image 20240819014740.png"]}},{"pathMapping":{"filePath":"public/content/ideas/Linux 内存 —— 内存分页、分段.md","pagePath":"/ideas/Linux 内存 —— 内存分页、分段","slug":"Linux 内存 —— 内存分页、分段"},"meta":{"content":"\n#Linux #memory #Operation #BasicKnowledge \n\n> 内存**分页**与内存**分段**是**操作系统**管理**虚拟内存**的方式。\n> \n> 分段：将进程内存分为**代码分段**、**数据分段**、**栈段**、**堆段**等逻辑分明的段。能产生连续的物理空间。容易造成内存碎片，内存交换率低。\n> 分页：将物理内存与虚拟内存都分为一个个**固定大小**的页，内存以页为单位分配、回收、释放。适配局部性原理，碎片利用率高，可以不加载整个内存。\n\n [kernel_memory_management/✍ 文章/一文带你了解，虚拟内存、内存分页、分段、段页式内存管理.md at main · 0voice/kernel_memory_management](https://github.com/0voice/kernel_memory_management/blob/main/%E2%9C%8D%20%E6%96%87%E7%AB%A0/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%EF%BC%8C%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E3%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E3%80%81%E5%88%86%E6%AE%B5%E3%80%81%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.md) \n\n\n前置知识：[[Linux 内存 —— 虚拟内存]]\n\n## 内存分段\n\n内存分段是操作管理虚拟地址与物理地址之间关系的方式之一。\n\n> [!important]\n程序是由若干个逻辑分段组成的，可由**代码分段**、**数据分段**、**栈段**、**堆段**组成。不同的段是有不同的属性的，所以就用分段（_Segmentation_）的形式把这些段分离出来。\n\n### 如何映射\n\n分段机制下的虚拟地址由两部分组成，**段内选择子**和**段内偏移量**。\n\n- 段选择子里面最重要的是**段号**，用作段表的索引。**段表**里面保存的是这个**段的基地址、段的界限和特权等级**等。\n- **段内偏移量**应该位于 0 和段界限之间，如果段内偏移量是合法的，就将段基地址加上段内偏移量得到物理内存地址。\n\n![[Pasted image 20231110131944.png]]\n\n有一些不足之处：\n\n- 第一个就是**内存碎片**的问题。\n- 第二个就是**内存交换的效率低**的问题。\n\n### 内存碎片\n\n内存碎片的问题共有两处地方：\n\n- 外部内存碎片，也就是产生了多个不连续的小物理内存，导致新的程序无法被装载；\n- 内部内存碎片，程序所有的内存都被装载到了物理内存，但是这个程序有部分的内存可能并不是很常使用，这也会导致内存的浪费；\n\n解决外部内存碎片的问题就是**内存交换**。\n\n![[Pasted image 20231110132032.png]]\n\n步骤：\n\n- 将程序内存写到磁盘上\n- 从磁盘上读回内存，并整合内存碎片\n\n> [!info]\n> 可以把音乐程序占用的那 256MB 内存写到硬盘上，然后再从硬盘上读回来到内存里。不过再读回的时候，我们不能装载回原来的位置，而是紧紧跟着那已经被占用了的 512MB 内存后面。这样就能空缺出连续的时间 256MB 空间，于是新的 200MB 程序就可以装载进来。\n\n这个内存交换空间，在 Linux 系统里，也就是我们经常看到的 **Swap 空间**，这块空间是从硬盘划分出来的，用于内存与硬盘的空间交换\n\n## 内存分页\n\n分段的好处就是能产生连续的内存空间，但是会出现内存碎片和内存交换的空间太大的问题。\n\n要解决这些问题，那么就要想出能少出现一些内存碎片的办法。另外，当需要进行内存交换的时候，让需要交换的**写入或者从磁盘装载的数据更少**一点，这样就可以解决问题了。这个办法，也就是**内存分页**（_Paging_）。\n\n页表实际上存储在 CPU 的**内存管理单元** （_MMU_） 中，于是 CPU 就可以直接通过 MMU，找出要实际要访问的物理内存地址。\n\n> [!important]\n分页是把整个**虚拟和物理内存**空间切成一段段固定大小的**页**（_Page_）。一个页是一个连续并且尺寸固定的内存空间。在 Linux 下，**每一页的大小为 4KB**。\n\n虚拟地址与物理地址之间通过**页表**来映射，如下图：\n\n![[Pasted image 20231110132824.png]]\n\n### 如何解决内存碎片、内存交换效率低\n\n由于内存空间都是预先划分好的，也就不会像分段会产生间隙非常小的内存，这正是分段会产生内存碎片的原因。而采用了分页，那么释放的**内存**都是**以页为单位释放**的，也就不会产生无法给进程使用的小内存。\n\n如果内存空间不够，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页面给释放掉，也就是暂时写在硬盘上，称为**换出**（_Swap Out_）。一旦需要的时候，再加载进来，称为**换入**（_Swap In_）。所以，一次性写入磁盘的也只有少数的一个页或者几个页，不会花太多时间，**内存交换的效率就相对比较高。**\n\n更进一步地，分页的方式使得我们在加载程序的时候，不再需要一次性都把程序加载到物理内存中。我们完全可以在进行虚拟内存和物理内存的页之间的映射之后，并不是真的把页加载到物理内存里，而是**只有**在程序运行中，**需要用到**对应虚拟内存页里面的指令和数据时，**再加载到物理内存**里面去。\n\n### 如何映射\n\n在分页机制下，虚拟地址分为两部分，**页号**和**页内偏移**。页号作为页表的索引，**页表**包含物理页每页所在**物理内存的基地址**，这个基地址与页内偏移的组合就形成了物理内存地址，见下图。\n\n![[Pasted image 20231110133623.png]]\n\n三个步骤：\n\n- 把虚拟内存地址，切分成页号和偏移量；\n- 根据页号，从页表里面，查询对应的物理页号；\n- 直接拿物理页号，加上前面的偏移量，就得到了物理内存地址。\n\n### 局部性与 Cache\n\n在一段时间内，整个程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域。\n\n可把最常访问的几个页表项存储到访问速度更快的硬件，于是加入了一个专门存放程序最常访问的页表项的 Cache，这个 Cache 就是 TLB（_Translation Lookaside Buffer_） ，通常称为页表缓存、转址旁路缓存、快表等。\n\n## 段页式内存管理\n\n段页式内存管理实现的方式：\n\n- 先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制；\n- 接着再把每个段划分为多个页，也就是对分段划分出来的连续空间，再划分固定大小的页；\n\n![[Pasted image 20231110134320.png]]\n\n这样，地址结构就由**段号、段内页号和页内位移**三部分组成。\n\n段页式地址变换中要得到物理地址须经过三次内存访问：\n\n- 第一次访问段表，得到页表起始地址；\n- 第二次访问页表，得到物理页号；\n- 第三次将物理页号与页内位移组合，得到物理地址。\n\n可用软、硬件相结合的方法实现段页式地址变换，这样虽然增加了硬件成本和系统开销，但提高了内存的利用率。","title":"Linux 内存 —— 内存分页、分段","abstract":"> 内存**分页**与内存**分段**是**操作系统**管理**虚拟内存**的方式。\n> \n> 分段：将进程内存分为**代码分段**、**数据分段**、**栈段**、**堆段**等逻辑分明的段。能产生连续的物理空间。容易造成内存碎片，内存交换率低。","length":114,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","memory","Operation","BasicKnowledge"],"license":false,"headingTrees":[{"key":"内存分段","href":"#内存分段","heading":2,"title":"内存分段","children":[{"key":"如何映射","href":"#如何映射","heading":3,"title":"如何映射","children":[],"id":"如何映射"},{"key":"内存碎片","href":"#内存碎片","heading":3,"title":"内存碎片","children":[],"id":"内存碎片"}],"id":"内存分段"},{"key":"内存分页","href":"#内存分页","heading":2,"title":"内存分页","children":[{"key":"如何解决内存碎片内存交换效率低","href":"#如何解决内存碎片内存交换效率低","heading":3,"title":"如何解决内存碎片、内存交换效率低","children":[],"id":"如何解决内存碎片内存交换效率低"},{"key":"如何映射-1","href":"#如何映射-1","heading":3,"title":"如何映射","children":[],"id":"如何映射-1"},{"key":"局部性与-cache","href":"#局部性与-cache","heading":3,"title":"局部性与 Cache","children":[],"id":"局部性与-cache"}],"id":"内存分页"},{"key":"段页式内存管理","href":"#段页式内存管理","heading":2,"title":"段页式内存管理","children":[],"id":"段页式内存管理"}],"wikiRefAliases":["Linux 内存 —— 虚拟内存"],"richRefAliases":["Pasted image 20231110131944.png","Pasted image 20231110132032.png","Pasted image 20231110132824.png","Pasted image 20231110133623.png","Pasted image 20231110134320.png"]}},{"pathMapping":{"filePath":"public/content/ideas/Linux 内存 —— 堆和栈.md","pagePath":"/ideas/Linux 内存 —— 堆和栈","slug":"Linux 内存 —— 堆和栈"},"meta":{"content":"\n#Linux #memory #BasicKnowledge \n\n> 堆区与栈区都是程序内存分段中的一段。\n\n[[Linux 内存 —— 内存分页、分段]]\n\n## 栈\n\n- 是逻辑栈，连续\n- 有大小限制， Windows 下为 2M\n- 入栈出栈为 CPU 指令，申请、读取快\n\n### 储存内容\n\n- 下条指令地址（ pop 后运行那条指令）\n- 函数参数\n- 函数局部变量\n\n## 堆\n\n- 逻辑上是链表，不连续\n- 基本无大小限制\n- 申请慢，容易产生内存碎片\n\n### 储存内容\n\n- 堆的大小\n- 堆变量","title":"Linux 内存 —— 堆和栈","abstract":"> 堆区与栈区都是程序内存分段中的一段。\n[[Linux 内存 —— 内存分页、分段]]\n- 是逻辑栈，连续","length":29,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","memory","BasicKnowledge"],"license":false,"headingTrees":[{"key":"栈","href":"#栈","heading":2,"title":"栈","children":[{"key":"储存内容","href":"#储存内容","heading":3,"title":"储存内容","children":[],"id":"储存内容"}],"id":"栈"},{"key":"堆","href":"#堆","heading":2,"title":"堆","children":[{"key":"储存内容-1","href":"#储存内容-1","heading":3,"title":"储存内容","children":[],"id":"储存内容-1"}],"id":"堆"}],"wikiRefAliases":["Linux 内存 —— 内存分页、分段"],"richRefAliases":[]}},{"pathMapping":{"filePath":"public/content/ideas/Linux 内存 —— 虚拟内存.md","pagePath":"/ideas/Linux 内存 —— 虚拟内存","slug":"Linux 内存 —— 虚拟内存"},"meta":{"content":"\n#Linux #memory #Operation #BasicKnowledge \n\n> 每个**进程**分配一套**虚拟内存**地址，由操作系统管理，**进程间独立**互不干涉。\n> 程序访问虚拟地址时，由操作系统转换成物理地址，使得这样不同进程内存不会冲突。\n\n [kernel_memory_management/✍ 文章/一文带你了解，虚拟内存、内存分页、分段、段页式内存管理.md at main · 0voice/kernel_memory_management](https://github.com/0voice/kernel_memory_management/blob/main/%E2%9C%8D%20%E6%96%87%E7%AB%A0/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%EF%BC%8C%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E3%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E3%80%81%E5%88%86%E6%AE%B5%E3%80%81%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.md) \n \nCPU是直接操作内存的物理地址。\n\n两个线程占用内存空间不能重叠，否则会相互擦除。如果直接使用物理内存，需要各线程都要理解其他所有线程占用住的空间，违反隔离原理。因此需要一种隔离内存的机制。\n\n这个机制就是虚拟内存。\n\n> [!important]\n> 每个**进程**分配一套**虚拟内存**地址，由操作系统管理，**进程间独立**互不干涉。\n\n- 程序所使用的内存地址叫做**虚拟内存地址**（_Virtual Memory Address_）\n- 实际存在硬件内存里面的空间地址叫**物理内存地址**（_Physical Memory Address_）\n\n程序访问虚拟地址时，由操作系统转换成物理地址，使得这样不同进程内存不会冲突。\n\n操作系统引入了虚拟内存，进程持有的虚拟地址会通过 CPU 芯片中的内存管理单元（MMU）的映射关系，来转换变成物理地址，然后再通过物理地址访问内存\n\n操作系统通过**内存分页**和**内存分段**等机制来管理虚拟内存与物理内存的映射。\n\n深入：[[Linux 内存 —— 内存分页、分段]]\n\n\n\n## Extra\n\n内存管理是以进程为单元，线程的栈在主进程的堆中。[[Linux 内存 —— 堆和栈]]","title":"Linux 内存 —— 虚拟内存","abstract":"> 每个**进程**分配一套**虚拟内存**地址，由操作系统管理，**进程间独立**互不干涉。\n> 程序访问虚拟地址时，由操作系统转换成物理地址，使得这样不同进程内存不会冲突。\n [kernel_memory_management/✍ 文章/一文带你了解，虚拟内存、内存分页、分段、段页式内存管理.md at main · 0voice/kernel_memory_management](https://github.com/0voice/kernel_memory_management/blob/main/%E2%9C%8D%20%E6%96%87%E7%AB%A0/%E4%B8%80%E6%96%87%E5%B8%A6%E4%BD%A0%E4%BA%86%E8%A7%A3%EF%BC%8C%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E3%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E3%80%81%E5%88%86%E6%AE%B5%E3%80%81%E6%AE%B5%E9%A1%B5%E5%BC%8F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.md) ","length":33,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","memory","Operation","BasicKnowledge"],"license":false,"headingTrees":[{"key":"extra","href":"#extra","heading":2,"title":"Extra","children":[],"id":"extra"}],"wikiRefAliases":["Linux 内存 —— 内存分页、分段","Linux 内存 —— 堆和栈"],"richRefAliases":[]}},{"pathMapping":{"filePath":"public/content/ideas/Linux 调度 —— 进程与线程.md","pagePath":"/ideas/Linux 调度 —— 进程与线程","slug":"Linux 调度 —— 进程与线程"},"meta":{"content":"\n#Linux #schedule #BasicKnowledge \n\n## 进程\n\n**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n\n切换需要切换上下文\n\n- 需要切换内存映射表(MMU)\n- 进程栈大小随机，但比线程栈大\n\n\n\n\n## 线程\n\n**线程**是计算机**调度**最小的单位，也是程序执行的最小单位。\n\n线程的内存描述符直接指向父进程的描述符。线程间切换代价比较小，**不需要切换映射表**（MMU），**只是指令间的切换**即可，比较轻量级。线程的栈在主进程的堆中。\n\n- 只需切换各种寄存器\n- 线程共享地址空间\n- 线程栈固定大小，默认 8M ，默认值由操作系统确定， `ulimit -a` 查看， `ulimit -s` 修改\n\n同一进程内的线程间共享：\n- \n\n## 细节\n\n关于 MMU ： [[Linux 内存 —— 内存分页、分段]]\n\n\n内存管理是以进程为单元，线程的栈在主进程的堆中。[[Linux 内存 —— 堆和栈]]\n\n## 上下文切换开销\n\n- 寄存器状态保存、恢复\n- 缓存失效\n- 陷入内核态开销","title":"Linux 调度 —— 进程与线程","abstract":"**进程**是计算机**资源分配**最小的单位，是CPU分配资源的基本单位，具有**独立的内存**。\n切换需要切换上下文\n- 需要切换内存映射表(MMU)","length":40,"created_at":"2024-11-16T07:32:08.000Z","updated_at":null,"tags":["Linux","schedule","BasicKnowledge"],"license":false,"headingTrees":[{"key":"进程","href":"#进程","heading":2,"title":"进程","children":[],"id":"进程"},{"key":"线程","href":"#线程","heading":2,"title":"线程","children":[],"id":"线程"},{"key":"同一进程内的线程间共享","href":"#同一进程内的线程间共享","heading":2,"title":"同一进程内的线程间共享：","children":[],"id":"同一进程内的线程间共享"},{"key":"细节","href":"#细节","heading":2,"title":"细节","children":[],"id":"细节"},{"key":"上下文切换开销","href":"#上下文切换开销","heading":2,"title":"上下文切换开销","children":[],"id":"上下文切换开销"}],"wikiRefAliases":["Linux 内存 —— 内存分页、分段","Linux 内存 —— 堆和栈"],"richRefAliases":[]}},{"pathMapping":{"filePath":"public/content/ideas/blog-syntax.md","pagePath":"/ideas/blog-syntax","slug":"blog-syntax"},"meta":{"content":"\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n\n**加粗**\n\n*斜体*\n\n_斜体2_\n\n***加粗斜体***\n\n**_加粗斜体2_**\n\n~~删除线~~\n\n==高亮==\n\n> 引用\n\n# 其他 MD 语法\n\n## 代码块\n\n`行内代码`\n\n代码块高亮：\n\n```python\n# 代码块\ndef func_echo(s: str):\n    print(s)\n\n\nclass HelloPrinter:\n    printer: Callable[[str]]\n\n    def __init__(self, printer: Callable[[str]]):\n        self.printer = printer\n\n    def call(self, s: str):\n        self.printer(s)\n\n\np = HelloPrinter(func_echo)\np.call(\"hello world!\")\n```\n\n大围栏\n\n````markdown\n```\ndef func_echo(s: str):\n    print(s)\n```\n````\n\n行内反引号围栏： `` ` `` 或者 ``` `` ``` 的模式\n\n```markdown\n`段落反引号内的行内反引号`\n```\n\n#### Rehype Pretty 语法：\n\n名称显示，captions 显示：\n\n```python title=\"main.py\" caption=\"这是一段描述\"\n# 代码块\ndef func_echo(s: str):\n    print(s)\n\n\nclass HelloPrinter:\n    printer: Callable[[str]]\n\n    def __init__(self, printer: Callable[[str]]):\n        self.printer = printer\n\n    def call(self, s: str):\n        self.printer(s)\n\n\np = HelloPrinter(func_echo)\np.call(\"hello world!\")\n```\n\n高亮\n\n```python {1-3,5}#a {4}#b {7} /printer/#c \"Callable\"#a /func_echo/#1\n# 代码块\ndef func_echo(s: str):\n    print(s)\n\n\nclass HelloPrinter:\n    printer: Callable[[str]]\n\n    def __init__(self, printer: Callable[[str]]):\n        self.printer = printer\n\n    def call(self, s: str):\n        self.printer(s)\n\n\np = HelloPrinter(func_echo)\np.call(\"hello world!\")\n```\n\n行号\n\n```python showLineNumbers{998}\n# 代码块\ndef func_echo(s: str):\n    print(s)\n\n```\n\n## 列表\n\n- 无序列表\n  - 无序列表\n    - 无序列表\n    - 无序列表\n\n1. 有序列表\n2. 有序列表\n3. 有序列表\n   1. 有序列表\n   2. 有序列表\n      1. 有序列表\n      2. 有序列表\n\n- [ ] 未完成\n- [x] 已完成\n  - [x] 已完成\n    - [ ] 未完成\n\n- 交叉嵌套\n  - [ ] 未完成\n  - [x] 已完成\n    1. 有序列表\n    2. 有序列表\n\n- [ ] 交叉嵌套 2\n  1. 有序列表\n  2. 有序列表\n     - 无序列表\n     - 无序列表\n\n1. 交叉嵌套\n2. 交叉嵌套\n   - 无序列表\n   - 无序列表\n     - [ ] 未完成\n     - [x] 已完成\n\n## Quote Block\n\n> 这是一个 Quote Block\n>\n> 里面可以有多行数据\n\n## 链接\n\n[链接](https://blog.ryo-okami.xyz)\n\n[站内链接](/ideas/using-chart-js)\n\n## 图片\n\n图片：\n\n![图片](https://blog.ryo-okami.xyz/content/articles/2022-07-31-why-homogeneous/OnOneLineWillStillOneLine_ManimCE_v0.16.0.post0.gif)\n\n站内图片：\n\n![站内图片](/content/articles/2022-07-31-why-homogeneous/OnOneLineWillStillOneLine_ManimCE_v0.16.0.post0.gif)\n\n## 表格\n\n| 表头     | 表头     | 表头     |\n| -------- | -------- | -------- |\n| ~~删除~~ | ==高亮== | **加粗** |\n| 单元     | 单元     | _斜体_   |\n\n## 脚注\n\n下标[^1]\n\n[^1]: 注释\n\n# 插件\n\n## Katex\n\n行间公式\n\n$$\n\\begin{aligned}\n\\dot{x} & = \\sigma(y-x) \\\\\n\\dot{y} & = \\rho x - y - xz \\\\\n\\dot{z} & = -\\beta z + xy\n\\end{aligned}\n$$\n\n行内公式 $E=mc^2$\n\n## Mermaid\n\nmermaid 流程图\n\n```mermaid\ngraph LR\n  A[方形] --> B(圆角)\n  B --> C{条件}\n  C -->|a=1| D[结果1]\n  C -->|a=2| E[结果2]\n  C -->|a=3| F[结果3]\n```\n\n另一个 mermaid 流程图，同样类型不会冲突\n\n```mermaid\ngraph TD\n  A((圆)) --> B([圆边])\n  B --> C[(DB)]\n```\n\nmermaid 时序图\n\n```mermaid\nsequenceDiagram\n  participant Alice\n  participant Bob\n  Alice->>John: Hello John, how are you?\n  loop Healthcheck\n    John->>John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts <br/>prevail...\n  John-->>Alice: Great!\n  John->>Bob: How about you?\n  Bob-->>John: Jolly good!\n```\n\n## Jessie Code 几何图形\n\n简单 Jessie Code\n\n```jessiecode\nA = point(1, 0);\nB = point(-1, 0);\nC = point(0.2, 1.5);\nL_AB = line(A, B);\nL_AC = line(A, C);\nK_ABC = circle(A, B, C);\n```\n\n可以有多个 Jessie Code 代码块\n\n```jessiecode\n$board.setView([-1.5, 2, 1.5, -1]);\n\n// Triangle ABC\nA = point(1, 0);\nB = point(-1, 0);\nC = point(0.2, 1.5);\npol = polygon(A,B,C) <<\n        fillColor: '#FFFF00',\n        borders: <<\n            strokeWidth: 1,\n            strokeColor: '#C0C000'\n        >>\n    >>;\n \n// Perpendiculars and orthocenter i1\npABC = perpendicular(pol.borders[0], C) << dash: 2, strokeWidth: 1, strokeColor: '#560092' >>;\npBCA = perpendicular(pol.borders[1], A) << dash: 2, strokeWidth: 1, strokeColor: '#560092' >>;\npCAB = perpendicular(pol.borders[2], B) << dash: 2, strokeWidth: 1, strokeColor: '#560092' >>;\ni1 = intersection(pABC, pCAB, 0);\n\n// Midpoints of segments\nmAB = midpoint(A, B);\nmBC = midpoint(B, C);\nmCA = midpoint(C, A);\n \n// Line bisectors and centroid i2\nma = segment(mBC, A) << strokeWidth: 1, strokeColor: '#009256' >>;\nmb = segment(mCA, B) << strokeWidth: 1, strokeColor: '#009256' >>;\nmc = segment(mAB, C) << strokeWidth: 1, strokeColor: '#009256' >>;\ni2 = intersection(ma, mc, 0);\n \n// Circum circle and circum center\nc = circumcircle(A, B, C) <<\n        strokeColor: '#000000',\n        dash: 3,\n        strokeWidth: 1,\n        center: <<\n            name: 'i_3',\n            withlabel:true,\n            visible: true\n        >>\n    >>;\n \n// Euler line \neuler = line(i1, i2) <<\n        strokeWidth: 2,\n        strokeColor:'#C01B37'\n    >>;\n```\n\nFunction Graph 也可在 Jessie Code 中使用\n\n```jessiecode\nFFunc = function(x) {\n    return sin(x);\n};\nF = functiongraph(FFunc, -10, 10);\n\nP1 = point(0, 0);\nP2 = point(1, 2);\n\na = function () {\n    return P2.X() - P1.X();\n};\n\nb = function () {\n    return P2.Y() - P1.Y();\n};\n\nGFunc = function(x) {\n    return b() * sin(PI * ( x - P1.X() ) / 2 / a() ) + P1.Y();\n};\nG = functiongraph(GFunc, -10, 10);\n\n\nInterFunc = function(i, x) {\n  return FFunc(x) * i / 10 + GFunc(x) * (1 - i / 10);\n};\n\nH1 = functiongraph(function(x) {\n  return InterFunc(1, x);\n}, -10, 10) << strokeOpacity: 0.5 >>;\n\nH2 = functiongraph(function(x) {\n  return InterFunc(2, x);\n}, -10, 10) << strokeOpacity: 0.5 >>;\n\nH3 = functiongraph(function(x) {\n  return InterFunc(3, x);\n}, -10, 10) << strokeOpacity: 0.5 >>;\n\nH4 = functiongraph(function(x) {\n  return InterFunc(4, x);\n}, -10, 10) << strokeOpacity: 0.5 >>;\n\nH5 = functiongraph(function(x) {\n  return InterFunc(5, x);\n}, -10, 10) << strokeOpacity: 0.5 >>;\n\nH6 = functiongraph(function(x) {\n  return InterFunc(6, x);\n}, -10, 10) << strokeOpacity: 0.5 >>;\n\nH7 = functiongraph(function(x) {\n  return InterFunc(7, x);\n}, -10, 10) << strokeOpacity: 0.5 >>;\n\nH8 = functiongraph(function(x) {\n  return InterFunc(8, x);\n}, -10, 10) << strokeOpacity: 0.5 >>;\n\nH9 = functiongraph(function(x) {\n  return InterFunc(9, x);\n}, -10, 10) << strokeOpacity: 0.5 >>;\n```\n\n可以以 frontmatter 形式指定 board 参数\n\n```jessiecode\n---\nboundingbox: [-1, 2, 2, -1]\ngrid: true\naxis: false\n---\nA = point(0, 0);\nB = point(1, 0);\nC = point(0, 1);\nL_AB = line(A, B);\nL_AC = line(A, C);\nK_ABC = circle(A, B, C);\n```\n\n## Heading 引用\n\n点击能够跳转：\n\n[文章内标题引用](#一级标题)\n\n[跨文章标题引用](/ideas/using-chart-js#react-chartjs-2)\n\n# Obsidian\n\n## Wikilink\n\n### 站内短引用\n\n[[2022-08-13-introduction-for-k8s]]\n\n可以去掉路径中的日期 [[introduction-for-k8s]] 作为 page path 引用\n\n带 label [[2022-08-13-introduction-for-k8s|其他文章]]\n\n带 fragment [[2022-08-13-introduction-for-k8s#部署一个-pod|其他文章]]\n\n带路径 [[articles/2022-08-13-introduction-for-k8s|其他文章]]\n\nPage path 全路径 [[/articles/introduction-for-k8s|其他文章]]\n\nfile path 全路径 [[public/content/articles/2022-08-13-introduction-for-k8s|其他文章]]\n\n一行多个 [[2022-08-13-introduction-for-k8s|其他文章]] [[2022-08-20-introduction-for-k8s-2|其他文章2]]\n\n> 目前未实现 Obsidian Anchor 直接引用到块或标题\n\n## Rich Content 短引用\n\n### 图片短引用\n\n短引用图片，纯文件名\n\n![[test-img-show-image.png]]\n\n短引用图片，带注释\n\n![[test-img-show-image.png|这是一张图片]]\n\n短引用图片，带路径\n\n![[blog-syntax/test-img-show-image.png]]\n\n短引用图片，带路径和注释\n\n![[blog-syntax/test-img-show-image.png|这是一张图片]]\n\n短引用图片，全路径\n\n![[/content/ideas/blog-syntax/test-img-show-image.png]]\n\n### Excalidraw 短引用\n\n短引用 Excalidraw\n\n![[Drawing 2024-04-13 17.33.27.excalidraw]]\n\n## Callouts\n\n> [!note]\n>\n> Note 级\n\n> [!info]\n>\n> Callout 里是正常的 markdown 语法\n> ```markdown\n> > [!info]\n> >\n> > Callout 里是正常的 markdown 语法\n> ```\n\n> [!tip] 标题\n>\n> Tip 级带标题\n\n> [!faq]- 可折叠 Callout\n>\n> 是的，这是 faq 级 callout 。可折叠 Callout 在折叠时隐藏内容。\n\n> [!faq]+ 默认打开的可折叠 Callout\n>\n> 可折叠 Callout 也可以设置为默认打开。\n\n> [!question] 可以嵌套吗？\n>\n> > [!todo] 是的，可以。\n> > > [!example] 你可以使用多层嵌套。\n> > > 在最里面也可以使用 markdown 语法\n>\n> > [!tip]- 还可以嵌套其他 Obsidian 语法\n> > 比如==高亮==，也可以嵌套 wikilink [[introduction-for-k8s]]\n> >\n> > 或者嵌套 Embeded 图片\n> >\n> > ![[test-img-show-image.png]]\n> >\n> > 也可以嵌套 mermaid 图表\n> >\n> > ```mermaid\n> > graph TD\n> > A[Start] --> B[Process]\n> > B --> C[End]\n> > ```\n> >\n> > 也可以嵌套 Excalidraw\n> >\n> > ![[Drawing 2024-04-13 17.33.27.excalidraw]]\n> >\n> > 也可以是 Tag #Tag1 #Tag2\n> >\n> > #单行Tag\n>\n\n> [!abstract]-\n> Abstract 级\n\n> [!summary]-\n> Summary 级, 是 abstract 的 alias\n\n> [!tldr]-\n> TL;DR 级, 是 summary 的 alias\n\n> [!info]-\n> Info 级\n\n> [!todo]-\n> Todo 级\n\n> [!tip]-\n> Tip 级\n\n> [!hint]-\n> Hint 级, 是 tip 的 alias\n\n> [!important]-\n> Important 级, 是 tip 的 alias\n\n> [!success]-\n> Success 级\n\n> [!check]-\n> Check 级, 是 success 的 alias\n\n> [!done]-\n> Done 级, 是 success 的 alias\n\n> [!question]-\n> Question 级\n\n> [!help]-\n> Help 级, 是 question 的 alias\n\n> [!faq]-\n> Faq 级, 是 question 的 alias\n\n> [!warning]-\n> Warning 级\n\n> [!caution]-\n> Caution 级, 是 warning 的 alias\n\n> [!attention]-\n> Attention 级, 是 caution 的 alias\n\n> [!failure]-\n> Failure 级\n\n> [!fail]-\n> Fail 级, 是 failure 的 alias\n\n> [!missing]-\n> Missing 级, 是 failure 的 alias\n\n> [!danger]-\n> Danger 级\n\n> [!error]-\n> Error 级, 是 danger 的 alias\n\n> [!bug]-\n> Bug 级\n\n> [!example]-\n> Example 级\n\n> [!quote]-\n> Quote 级\n\n> [!cite]-\n> Cite 级, 是 quote 的 alias\n\n自定义 callout 类型\n\n> [!reasoning]\n> LLM Reasoning\n\n> [!query]\n> User Query\n\n> [!ai]\n> AI Generated Content\n\n> [!think]\n> Further thinking by writer\n\n> [!idea]\n> Idea 级, 是 think 的 alias\n\n## 标签\n\n文字里可以有 #Tag ， 会被渲染成标签。\n\n#Tag\n\n一行可以有多个 #Tag/Tag2 #Tag3 如果存在于 Tag 索引，则可点击 #Linux\n\n> [!info] Tag 可以与其他组件结合\n> 就像 #Tag 这样\n","title":"博客语法渲染测试","abstract":"**加粗**\n*斜体*\n_斜体2_","length":627,"created_at":"2024-04-14T11:41:29.000Z","updated_at":"2025-04-30T03:48:16.000Z","tags":["Tag1","Tag2","单行Tag","Tag","Tag/Tag2","Tag3","Linux","Blog","Nextjs"],"license":false,"headingTrees":[{"key":"一级标题","href":"#一级标题","heading":1,"title":"一级标题","children":[{"key":"二级标题","href":"#二级标题","heading":2,"title":"二级标题","children":[{"key":"三级标题","href":"#三级标题","heading":3,"title":"三级标题","children":[{"key":"四级标题","href":"#四级标题","heading":4,"title":"四级标题","children":[{"key":"五级标题","href":"#五级标题","heading":5,"title":"五级标题","children":[{"key":"六级标题","href":"#六级标题","heading":6,"title":"六级标题","children":[],"id":"六级标题"}],"id":"五级标题"}],"id":"四级标题"}],"id":"三级标题"}],"id":"二级标题"}],"id":"一级标题"},{"key":"其他-md-语法","href":"#其他-md-语法","heading":1,"title":"其他 MD 语法","children":[{"key":"代码块","href":"#代码块","heading":2,"title":"代码块","children":[{"key":"rehype-pretty-语法","href":"#rehype-pretty-语法","heading":4,"title":"Rehype Pretty 语法：","children":[],"id":"rehype-pretty-语法"}],"id":"代码块"},{"key":"列表","href":"#列表","heading":2,"title":"列表","children":[],"id":"列表"},{"key":"quote-block","href":"#quote-block","heading":2,"title":"Quote Block","children":[],"id":"quote-block"},{"key":"链接","href":"#链接","heading":2,"title":"链接","children":[],"id":"链接"},{"key":"图片","href":"#图片","heading":2,"title":"图片","children":[],"id":"图片"},{"key":"表格","href":"#表格","heading":2,"title":"表格","children":[],"id":"表格"},{"key":"脚注","href":"#脚注","heading":2,"title":"脚注","children":[],"id":"脚注"}],"id":"其他-md-语法"},{"key":"插件","href":"#插件","heading":1,"title":"插件","children":[{"key":"katex","href":"#katex","heading":2,"title":"Katex","children":[],"id":"katex"},{"key":"mermaid","href":"#mermaid","heading":2,"title":"Mermaid","children":[],"id":"mermaid"},{"key":"jessie-code-几何图形","href":"#jessie-code-几何图形","heading":2,"title":"Jessie Code 几何图形","children":[],"id":"jessie-code-几何图形"},{"key":"heading-引用","href":"#heading-引用","heading":2,"title":"Heading 引用","children":[],"id":"heading-引用"}],"id":"插件"},{"key":"obsidian","href":"#obsidian","heading":1,"title":"Obsidian","children":[{"key":"wikilink","href":"#wikilink","heading":2,"title":"Wikilink","children":[{"key":"站内短引用","href":"#站内短引用","heading":3,"title":"站内短引用","children":[],"id":"站内短引用"}],"id":"wikilink"},{"key":"rich-content-短引用","href":"#rich-content-短引用","heading":2,"title":"Rich Content 短引用","children":[{"key":"图片短引用","href":"#图片短引用","heading":3,"title":"图片短引用","children":[],"id":"图片短引用"},{"key":"excalidraw-短引用","href":"#excalidraw-短引用","heading":3,"title":"Excalidraw 短引用","children":[],"id":"excalidraw-短引用"}],"id":"rich-content-短引用"},{"key":"callouts","href":"#callouts","heading":2,"title":"Callouts","children":[],"id":"callouts"},{"key":"标签","href":"#标签","heading":2,"title":"标签","children":[],"id":"标签"},{"key":"footnote-label","href":"#footnote-label","heading":2,"title":"Footnotes","children":[],"id":"footnote-label"}],"id":"obsidian"}],"wikiRefAliases":["2022-08-13-introduction-for-k8s","introduction-for-k8s","2022-08-13-introduction-for-k8s","2022-08-13-introduction-for-k8s#部署一个-pod","articles/2022-08-13-introduction-for-k8s","/articles/introduction-for-k8s","public/content/articles/2022-08-13-introduction-for-k8s","2022-08-13-introduction-for-k8s","2022-08-20-introduction-for-k8s-2","introduction-for-k8s"],"richRefAliases":["test-img-show-image.png","test-img-show-image.png","blog-syntax/test-img-show-image.png","blog-syntax/test-img-show-image.png","/content/ideas/blog-syntax/test-img-show-image.png","Drawing 2024-04-13 17.33.27.excalidraw","test-img-show-image.png","Drawing 2024-04-13 17.33.27.excalidraw"]}}]},"__N_SSG":true}