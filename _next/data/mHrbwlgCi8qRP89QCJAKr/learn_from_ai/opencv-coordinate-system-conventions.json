{"pageProps":{"slug":"opencv-coordinate-system-conventions","tags":[{"tag":"OpenCV","slug":"opencv","path":"/tags/opencv","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/opencv-coordinate-system-conventions"}]},{"tag":"图像处理","slug":"图像处理","path":"/tags/图像处理","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/opencv-coordinate-system-conventions"}]},{"tag":"学习笔记","slug":"学习笔记","path":"/tags/学习笔记","postSlugs":[{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/deep-learning-model-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/opencv-coordinate-system-conventions"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/executable-file-formats"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/lora-matrix-initialization-strategy"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/pytorch-backpropagation-mechanism"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/mqtt-protocol-principles-applications"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-unet-structure"},{"postType":"learn_from_ai","postPagePath":"/learn_from_ai/stable-diffusion-lora-training-methods"}]}],"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h2: \"h2\",\n    li: \"li\",\n    ol: \"ol\",\n    p: \"p\",\n    span: \"span\",\n    strong: \"strong\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"📝 本文是我在学习 OpenCV 时遇到的一个问题。问题的解答和中文翻译均由 AI 生成。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"opencv-坐标表示理解-y-x-与-x-y-的区别\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#opencv-坐标表示理解-y-x-与-x-y-的区别\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"OpenCV 坐标表示：理解 (y, x) 与 (x, y) 的区别\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"q\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#q\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Q\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Why sometimes opencv represent a point coordinate as (y,x) (e.g. the result of cv2.findContours) , and sometimes it represent as (x, y) (e.g. the arg \", _jsx(_components.span, {\n        \"data-rehype-pretty-code-figure\": \"\",\n        children: _jsx(_components.code, {\n          \"data-language\": \"plaintext\",\n          \"data-theme\": \"plastic\",\n          children: _jsx(_components.span, {\n            \"data-line\": \"\",\n            children: _jsx(_components.span, {\n              children: \"center\"\n            })\n          })\n        })\n      }), \" of cv2.circle)?\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"为什么 OpenCV 有时用 (y,x) 表示坐标点（比如 cv2.findContours 的返回值），有时又用 (x,y) 表示（比如 cv2.circle 函数的 \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"center\"\n              })\n            })\n          })\n        }), \" 参数）？\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"a\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#a\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"A\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"OpenCV uses different conventions for different functions based on their specific requirements and historical reasons:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"OpenCV 基于不同函数的具体需求和历史原因，使用了不同的坐标表示约定：\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"(y, x) Convention\"\n        }), \": This is often used when dealing with image matrices directly. In image processing, images are typically represented as 2D arrays where the first dimension is the row (height, y-coordinate) and the second dimension is the column (width, x-coordinate). Functions like \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"cv2.findContours\"\n              })\n            })\n          })\n        }), \" return coordinates in this order to match the array indexing.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"(y, x) 约定\"\n          }), \"：这种表示方法通常用于直接处理图像矩阵时。在图像处理中，图像通常表示为二维数组，其中第一维是行（高度，y 坐标），第二维是列（宽度，x 坐标）。像 \", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"cv2.findContours\"\n                })\n              })\n            })\n          }), \" 这样的函数返回这种顺序的坐标是为了匹配数组索引方式。\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"(x, y) Convention\"\n        }), \": This is used in functions that deal with geometric shapes or points in a more traditional Cartesian coordinate system, where \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"x\"\n              })\n            })\n          })\n        }), \" is the horizontal axis and \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"y\"\n              })\n            })\n          })\n        }), \" is the vertical axis. Functions like \", _jsx(_components.span, {\n          \"data-rehype-pretty-code-figure\": \"\",\n          children: _jsx(_components.code, {\n            \"data-language\": \"plaintext\",\n            \"data-theme\": \"plastic\",\n            children: _jsx(_components.span, {\n              \"data-line\": \"\",\n              children: _jsx(_components.span, {\n                children: \"cv2.circle\"\n              })\n            })\n          })\n        }), \" use this convention to specify the center of the circle.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.strong, {\n            children: \"(x, y) 约定\"\n          }), \"：这种表示方法用于处理几何图形或在传统笛卡尔坐标系中的点，其中 \", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"x\"\n                })\n              })\n            })\n          }), \" 是水平轴，\", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"y\"\n                })\n              })\n            })\n          }), \" 是垂直轴。像 \", _jsx(_components.span, {\n            \"data-rehype-pretty-code-figure\": \"\",\n            children: _jsx(_components.code, {\n              \"data-language\": \"plaintext\",\n              \"data-theme\": \"plastic\",\n              children: _jsx(_components.span, {\n                \"data-line\": \"\",\n                children: _jsx(_components.span, {\n                  children: \"cv2.circle\"\n                })\n              })\n            })\n          }), \" 这样的函数使用这种约定来指定圆心位置。\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The inconsistency arises because OpenCV aims to balance between image matrix operations and geometric operations, each having their own conventional coordinate systems.\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"这种不一致性的出现是因为 OpenCV 需要在图像矩阵运算和几何运算之间取得平衡，而这两种运算各自有其传统的坐标系统表示方法。\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"meta":{"content":"\n> 📝 本文是我在学习 OpenCV 时遇到的一个问题。问题的解答和中文翻译均由 AI 生成。\n\n## OpenCV 坐标表示：理解 (y, x) 与 (x, y) 的区别\n\n## Q\n\nWhy sometimes opencv represent a point coordinate as (y,x) (e.g. the result of cv2.findContours) , and sometimes it represent as (x, y) (e.g. the arg `center` of cv2.circle)?\n\n> 为什么 OpenCV 有时用 (y,x) 表示坐标点（比如 cv2.findContours 的返回值），有时又用 (x,y) 表示（比如 cv2.circle 函数的 `center` 参数）？\n\n## A\n\nOpenCV uses different conventions for different functions based on their specific requirements and historical reasons:\n\n> OpenCV 基于不同函数的具体需求和历史原因，使用了不同的坐标表示约定：\n\n1. **(y, x) Convention**: This is often used when dealing with image matrices directly. In image processing, images are typically represented as 2D arrays where the first dimension is the row (height, y-coordinate) and the second dimension is the column (width, x-coordinate). Functions like `cv2.findContours` return coordinates in this order to match the array indexing.\n\n> 1. **(y, x) 约定**：这种表示方法通常用于直接处理图像矩阵时。在图像处理中，图像通常表示为二维数组，其中第一维是行（高度，y 坐标），第二维是列（宽度，x 坐标）。像 `cv2.findContours` 这样的函数返回这种顺序的坐标是为了匹配数组索引方式。\n\n2. **(x, y) Convention**: This is used in functions that deal with geometric shapes or points in a more traditional Cartesian coordinate system, where `x` is the horizontal axis and `y` is the vertical axis. Functions like `cv2.circle` use this convention to specify the center of the circle.\n\n> 2. **(x, y) 约定**：这种表示方法用于处理几何图形或在传统笛卡尔坐标系中的点，其中 `x` 是水平轴，`y` 是垂直轴。像 `cv2.circle` 这样的函数使用这种约定来指定圆心位置。\n\nThe inconsistency arises because OpenCV aims to balance between image matrix operations and geometric operations, each having their own conventional coordinate systems.\n\n> 这种不一致性的出现是因为 OpenCV 需要在图像矩阵运算和几何运算之间取得平衡，而这两种运算各自有其传统的坐标系统表示方法。\n","title":"OpenCV 坐标表示：理解 (y, x) 与 (x, y) 的区别","abstract":"> 📝 本文是我在学习 OpenCV 时遇到的一个问题。问题的解答和中文翻译均由 AI 生成。\nWhy sometimes opencv represent a point coordinate as (y,x) (e.g. the result of cv2.findContours) , and sometimes it represent as (x, y) (e.g. the arg `center` of cv2.circle)?\n> 为什么 OpenCV 有时用 (y,x) 表示坐标点（比如 cv2.findContours 的返回值），有时又用 (x,y) 表示（比如 cv2.circle 函数的 `center` 参数）？","length":29,"created_at":"2024-11-29T03:00:00.000Z","updated_at":"2024-11-29T03:00:00.000Z","tags":["OpenCV","图像处理","学习笔记"],"license":true,"headingTrees":[{"key":"opencv-坐标表示理解-y-x-与-x-y-的区别","href":"#opencv-坐标表示理解-y-x-与-x-y-的区别","heading":2,"title":"OpenCV 坐标表示：理解 (y, x) 与 (x, y) 的区别","children":[],"id":"opencv-坐标表示理解-y-x-与-x-y-的区别"},{"key":"q","href":"#q","heading":2,"title":"Q","children":[],"id":"q"},{"key":"a","href":"#a","heading":2,"title":"A","children":[],"id":"a"}],"wikiRefAliases":[],"richRefAliases":[]},"prevNextInfo":{"prevInfo":{"pathMapping":{"pagePath":"/learn_from_ai/executable-file-formats","filePath":"public/content/learn_from_ai/2024-12-08-executable-file-formats.md"},"meta":{"title":"可执行文件格式对比：ELF、PE、Mach-O等","created_at":"2024-12-08T02:00:00.000Z","updated_at":"2024-12-08T02:00:00.000Z"}},"nextInfo":{"pathMapping":{"pagePath":"/learn_from_ai/deep-learning-model-formats","filePath":"public/content/learn_from_ai/2024-11-29-deep-learning-model-formats.md"},"meta":{"title":"深度学习模型文件格式对比：pth、safetensor 与 onnx","created_at":"2024-11-29T02:00:00.000Z","updated_at":"2024-11-29T02:00:00.000Z"}}},"backRefResources":[],"hyperProps":{"withSEO":true,"withComments":false}},"__N_SSG":true}